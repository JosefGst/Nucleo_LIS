
LIS_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  080094c8  080094c8  000194c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a1c  08009a1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a1c  08009a1c  00019a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a24  08009a24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a24  08009a24  00019a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a28  08009a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001e0  08009c0c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08009c0c  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001676c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002798  00000000  00000000  0003697c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00039118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  0003a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bba  00000000  00000000  0003b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc16  00000000  00000000  00062bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edc43  00000000  00000000  000727f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b0  00000000  00000000  00160488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094b0 	.word	0x080094b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080094b0 	.word	0x080094b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <lis2dh12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	72fb      	strb	r3, [r7, #11]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	685c      	ldr	r4, [r3, #4]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6898      	ldr	r0, [r3, #8]
 8001008:	893b      	ldrh	r3, [r7, #8]
 800100a:	7af9      	ldrb	r1, [r7, #11]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	47a0      	blx	r4
 8001010:	6178      	str	r0, [r7, #20]
  return ret;
 8001012:	697b      	ldr	r3, [r7, #20]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <lis2dh12_from_fs16_lp_to_mg>:
{
  return ( (float_t)lsb / 256.0f ) * 64.0f;
}

float_t lis2dh12_from_fs16_lp_to_mg(int16_t lsb)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 256.0f ) * 192.0f;
 8001026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001032:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001050 <lis2dh12_from_fs16_lp_to_mg+0x34>
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001054 <lis2dh12_from_fs16_lp_to_mg+0x38>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001042:	eeb0 0a67 	vmov.f32	s0, s15
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	43800000 	.word	0x43800000
 8001054:	43400000 	.word	0x43400000

08001058 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
 8001062:	f107 0208 	add.w	r2, r7, #8
 8001066:	2301      	movs	r3, #1
 8001068:	2127      	movs	r1, #39	; 0x27
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffbe 	bl	8000fec <lis2dh12_read_reg>
 8001070:	60f8      	str	r0, [r7, #12]
  *val = status_reg.zyxda;
 8001072:	7a3b      	ldrb	r3, [r7, #8]
 8001074:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	461a      	mov	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	701a      	strb	r2, [r3, #0]

  return ret;
 8001080:	68fb      	ldr	r3, [r7, #12]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	2306      	movs	r3, #6
 800109a:	2128      	movs	r1, #40	; 0x28
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ffa5 	bl	8000fec <lis2dh12_read_reg>
 80010a2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	3302      	adds	r3, #2
 80010cc:	b212      	sxth	r2, r2
 80010ce:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3302      	adds	r3, #2
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b29a      	uxth	r2, r3
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3302      	adds	r3, #2
 80010ea:	b212      	sxth	r2, r2
 80010ec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80010ee:	7c7a      	ldrb	r2, [r7, #17]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	3304      	adds	r3, #4
 80010f4:	b212      	sxth	r2, r2
 80010f6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3304      	adds	r3, #4
 80010fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001100:	b29b      	uxth	r3, r3
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b29a      	uxth	r2, r3
 8001106:	7c3b      	ldrb	r3, [r7, #16]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b29a      	uxth	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3304      	adds	r3, #4
 8001112:	b212      	sxth	r2, r2
 8001114:	801a      	strh	r2, [r3, #0]

  return ret;
 8001116:	697b      	ldr	r3, [r7, #20]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t opt = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112c:	f000 fc38 	bl	80019a0 <HAL_Init>
  /* USER CODE BEGIN Init */
  void LIS_init(void);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001130:	f000 f850 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001134:	f000 f924 	bl	8001380 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001138:	f000 f8f2 	bl	8001320 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800113c:	f000 f8b2 	bl	80012a4 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	2220      	movs	r2, #32
 8001146:	491f      	ldr	r1, [pc, #124]	; (80011c4 <main+0xa4>)
 8001148:	481f      	ldr	r0, [pc, #124]	; (80011c8 <main+0xa8>)
 800114a:	f003 f801 	bl	8004150 <HAL_UART_Transmit>
	  opt = readUserInput();
 800114e:	f000 f93b 	bl	80013c8 <readUserInput>
 8001152:	4603      	mov	r3, r0
 8001154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  if(opt == 1){
 8001158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800115c:	2b01      	cmp	r3, #1
 800115e:	d1ef      	bne.n	8001140 <main+0x20>
		  sprintf(msg, "%d \r\n", opt);
 8001160:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4919      	ldr	r1, [pc, #100]	; (80011cc <main+0xac>)
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fbf3 	bl	8005954 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f82d 	bl	80001d0 <strlen>
 8001176:	4603      	mov	r3, r0
 8001178:	b29a      	uxth	r2, r3
 800117a:	1d39      	adds	r1, r7, #4
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <main+0xa8>)
 8001182:	f002 ffe5 	bl	8004150 <HAL_UART_Transmit>
		  for(int i = 1; i < 11; ++i){
 8001186:	2301      	movs	r3, #1
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e016      	b.n	80011ba <main+0x9a>
			  sprintf(msg, "%d\t", i);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	490f      	ldr	r1, [pc, #60]	; (80011d0 <main+0xb0>)
 8001192:	4618      	mov	r0, r3
 8001194:	f004 fbde 	bl	8005954 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f818 	bl	80001d0 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	1d39      	adds	r1, r7, #4
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	4807      	ldr	r0, [pc, #28]	; (80011c8 <main+0xa8>)
 80011ac:	f002 ffd0 	bl	8004150 <HAL_UART_Transmit>
			  lis2dh12_read_data_polling();
 80011b0:	f000 f928 	bl	8001404 <lis2dh12_read_data_polling>
		  for(int i = 1; i < 11; ++i){
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	3301      	adds	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	2b0a      	cmp	r3, #10
 80011be:	dde5      	ble.n	800118c <main+0x6c>
	  HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 80011c0:	e7be      	b.n	8001140 <main+0x20>
 80011c2:	bf00      	nop
 80011c4:	080094c8 	.word	0x080094c8
 80011c8:	20000650 	.word	0x20000650
 80011cc:	080094ec 	.word	0x080094ec
 80011d0:	080094f4 	.word	0x080094f4

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0b8      	sub	sp, #224	; 0xe0
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011de:	2244      	movs	r2, #68	; 0x44
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fd2e 	bl	8004c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2288      	movs	r2, #136	; 0x88
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fd20 	bl	8004c44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001204:	2310      	movs	r3, #16
 8001206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800120a:	2301      	movs	r3, #1
 800120c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001216:	2360      	movs	r3, #96	; 0x60
 8001218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001222:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fc9c 	bl	8002b64 <HAL_RCC_OscConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001232:	f000 f8df 	bl	80013f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001236:	230f      	movs	r3, #15
 8001238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001254:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f002 f868 	bl	8003330 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001266:	f000 f8c5 	bl	80013f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800126a:	2342      	movs	r3, #66	; 0x42
 800126c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800126e:	2300      	movs	r3, #0
 8001270:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001272:	2300      	movs	r3, #0
 8001274:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fa5f 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001284:	f000 f8b6 	bl	80013f4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001288:	f44f 7000 	mov.w	r0, #512	; 0x200
 800128c:	f001 fc14 	bl	8002ab8 <HAL_PWREx_ControlVoltageScaling>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001296:	f000 f8ad 	bl	80013f4 <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	37e0      	adds	r7, #224	; 0xe0
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_I2C1_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_I2C1_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_I2C1_Init+0x74>)
 80012b0:	f640 6214 	movw	r2, #3604	; 0xe14
 80012b4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_I2C1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <MX_I2C1_Init+0x74>)
 80012be:	2201      	movs	r2, #1
 80012c0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_I2C1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_I2C1_Init+0x74>)
 80012e2:	f000 fe69 	bl	8001fb8 <HAL_I2C_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 f882 	bl	80013f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_I2C1_Init+0x74>)
 80012f4:	f001 fb3a 	bl	800296c <HAL_I2CEx_ConfigAnalogFilter>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012fe:	f000 f879 	bl	80013f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x74>)
 8001306:	f001 fb7c 	bl	8002a02 <HAL_I2CEx_ConfigDigitalFilter>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001310:	f000 f870 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000604 	.word	0x20000604
 800131c:	40005400 	.word	0x40005400

08001320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_USART2_UART_Init+0x58>)
 8001326:	4a15      	ldr	r2, [pc, #84]	; (800137c <MX_USART2_UART_Init+0x5c>)
 8001328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_USART2_UART_Init+0x58>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART2_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_USART2_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART2_UART_Init+0x58>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART2_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART2_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART2_UART_Init+0x58>)
 8001364:	f002 fea6 	bl	80040b4 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800136e:	f000 f841 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000650 	.word	0x20000650
 800137c:	40004400 	.word	0x40004400

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_GPIO_Init+0x44>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <MX_GPIO_Init+0x44>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_GPIO_Init+0x44>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_GPIO_Init+0x44>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <MX_GPIO_Init+0x44>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_GPIO_Init+0x44>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000

080013c8 <readUserInput>:

/* USER CODE BEGIN 4 */
uint8_t readUserInput(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
	char readBuf[1];

	//HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 80013ce:	1d39      	adds	r1, r7, #4
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	2201      	movs	r2, #1
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <readUserInput+0x28>)
 80013d8:	f002 ff4d 	bl	8004276 <HAL_UART_Receive>
	return atoi(readBuf);
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fc02 	bl	8004be8 <atoi>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2db      	uxtb	r3, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000650 	.word	0x20000650

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <lis2dh12_read_data_polling>:
static float acceleration_mg[3];
static uint8_t whoamI;
static uint8_t tx_buffer[1000];

void lis2dh12_read_data_polling(void)
{
 8001404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001408:	b088      	sub	sp, #32
 800140a:	af04      	add	r7, sp, #16
	stmdev_ctx_t dev_ctx;

	dev_ctx.write_reg = platform_write;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <lis2dh12_read_data_polling+0xd8>)
 800140e:	607b      	str	r3, [r7, #4]
	dev_ctx.read_reg = platform_read;
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <lis2dh12_read_data_polling+0xdc>)
 8001412:	60bb      	str	r3, [r7, #8]
	dev_ctx.handle = &SENSOR_BUS;
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <lis2dh12_read_data_polling+0xe0>)
 8001416:	60fb      	str	r3, [r7, #12]
  /* Read samples in polling mode (no int) */

    lis2dh12_reg_t reg;

    /* Read output only if new value available */
    lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 8001418:	463a      	mov	r2, r7
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe1a 	bl	8001058 <lis2dh12_xl_data_ready_get>
    if (reg.byte) {
 8001424:	783b      	ldrb	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d052      	beq.n	80014d0 <lis2dh12_read_data_polling+0xcc>
      /* Read accelerometer data */
      memset(data_raw_acceleration, 0x00, 3*sizeof(int16_t));
 800142a:	2206      	movs	r2, #6
 800142c:	2100      	movs	r1, #0
 800142e:	482e      	ldr	r0, [pc, #184]	; (80014e8 <lis2dh12_read_data_polling+0xe4>)
 8001430:	f003 fc08 	bl	8004c44 <memset>
      lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	492c      	ldr	r1, [pc, #176]	; (80014e8 <lis2dh12_read_data_polling+0xe4>)
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe26 	bl	800108a <lis2dh12_acceleration_raw_get>
      acceleration_mg[0] =
    		  lis2dh12_from_fs16_lp_to_mg(data_raw_acceleration[0]);
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <lis2dh12_read_data_polling+0xe4>)
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fde9 	bl	800101c <lis2dh12_from_fs16_lp_to_mg>
 800144a:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <lis2dh12_read_data_polling+0xe8>)
 8001450:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] =
    		  lis2dh12_from_fs16_lp_to_mg(data_raw_acceleration[1]);
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <lis2dh12_read_data_polling+0xe4>)
 8001456:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fdde 	bl	800101c <lis2dh12_from_fs16_lp_to_mg>
 8001460:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <lis2dh12_read_data_polling+0xe8>)
 8001466:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] =
    		  lis2dh12_from_fs16_lp_to_mg(data_raw_acceleration[2]);
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <lis2dh12_read_data_polling+0xe4>)
 800146c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fdd3 	bl	800101c <lis2dh12_from_fs16_lp_to_mg>
 8001476:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <lis2dh12_read_data_polling+0xe8>)
 800147c:	edc3 7a02 	vstr	s15, [r3, #8]

      sprintf((char*)tx_buffer, "Acceleration [mg]: %4.2f\t%4.2f\t%4.2f\r\n",
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <lis2dh12_read_data_polling+0xe8>)
 8001482:	681b      	ldr	r3, [r3, #0]
      sprintf((char*)tx_buffer, "Acceleration [mg]: %4.2f\t%4.2f\t%4.2f\r\n",
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	4680      	mov	r8, r0
 800148c:	4689      	mov	r9, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <lis2dh12_read_data_polling+0xe8>)
 8001490:	685b      	ldr	r3, [r3, #4]
      sprintf((char*)tx_buffer, "Acceleration [mg]: %4.2f\t%4.2f\t%4.2f\r\n",
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f858 	bl	8000548 <__aeabi_f2d>
 8001498:	4604      	mov	r4, r0
 800149a:	460d      	mov	r5, r1
              acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <lis2dh12_read_data_polling+0xe8>)
 800149e:	689b      	ldr	r3, [r3, #8]
      sprintf((char*)tx_buffer, "Acceleration [mg]: %4.2f\t%4.2f\t%4.2f\r\n",
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f851 	bl	8000548 <__aeabi_f2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014ae:	e9cd 4500 	strd	r4, r5, [sp]
 80014b2:	4642      	mov	r2, r8
 80014b4:	464b      	mov	r3, r9
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <lis2dh12_read_data_polling+0xec>)
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <lis2dh12_read_data_polling+0xf0>)
 80014ba:	f004 fa4b 	bl	8005954 <siprintf>
      tx_com(tx_buffer, strlen((char const*)tx_buffer));
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <lis2dh12_read_data_polling+0xf0>)
 80014c0:	f7fe fe86 	bl	80001d0 <strlen>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	480a      	ldr	r0, [pc, #40]	; (80014f4 <lis2dh12_read_data_polling+0xf0>)
 80014cc:	f000 f856 	bl	800157c <tx_com>
//              "Temperature [degC]:%6.2f\r\n",
//              temperature_degC);
//      tx_com(tx_buffer, strlen((char const*)tx_buffer));
//    }

}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014da:	bf00      	nop
 80014dc:	080014f9 	.word	0x080014f9
 80014e0:	0800153b 	.word	0x0800153b
 80014e4:	20000604 	.word	0x20000604
 80014e8:	200001fc 	.word	0x200001fc
 80014ec:	20000204 	.word	0x20000204
 80014f0:	080094f8 	.word	0x080094f8
 80014f4:	20000210 	.word	0x20000210

080014f8 <platform_write>:

static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	461a      	mov	r2, r3
 8001504:	460b      	mov	r3, r1
 8001506:	72fb      	strb	r3, [r7, #11]
 8001508:	4613      	mov	r3, r2
 800150a:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F411RE)
  /* Write multiple command */
  reg |= 0x80;
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001512:	72fb      	strb	r3, [r7, #11]
//  HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg,
//                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_H, reg,
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	b29a      	uxth	r2, r3
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	893b      	ldrh	r3, [r7, #8]
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2301      	movs	r3, #1
 8001528:	2133      	movs	r1, #51	; 0x33
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fdd4 	bl	80020d8 <HAL_I2C_Mem_Write>
#elif defined(SPC584B_DIS)
  /* Write multiple command */
  reg |= 0x80;
  i2c_lld_write(handle,  LIS2DH12_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b088      	sub	sp, #32
 800153e:	af04      	add	r7, sp, #16
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	460b      	mov	r3, r1
 8001548:	72fb      	strb	r3, [r7, #11]
 800154a:	4613      	mov	r3, r2
 800154c:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F411RE)
  /* Read multiple command */
  reg |= 0x80;
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001554:	72fb      	strb	r3, [r7, #11]
//  HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg,
//                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_H, reg,
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	b29a      	uxth	r2, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	2133      	movs	r1, #51	; 0x33
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fec7 	bl	8002300 <HAL_I2C_Mem_Read>
#elif defined(SPC584B_DIS)
  /* Read multiple command */
  reg |= 0x80;
  i2c_lld_read(handle, LIS2DH12_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <tx_com>:

static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
#if defined(NUCLEO_F411RE)
  HAL_UART_Transmit(&huart2, tx_buffer, len, 1000);
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <tx_com+0x24>)
 8001592:	f002 fddd 	bl	8004150 <HAL_UART_Transmit>
#elif defined(STEVAL_MKI109V3)
  CDC_Transmit_FS(tx_buffer, len);
#elif defined(SPC584B_DIS)
  sd_lld_write(&SD2, tx_buffer, len);
#endif
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000650 	.word	0x20000650

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x44>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x44>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6613      	str	r3, [r2, #96]	; 0x60
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x44>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x44>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x44>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x44>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_I2C_MspInit+0x7c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d127      	bne.n	800165e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_I2C_MspInit+0x80>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a16      	ldr	r2, [pc, #88]	; (800166c <HAL_I2C_MspInit+0x80>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_I2C_MspInit+0x80>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001626:	23c0      	movs	r3, #192	; 0xc0
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162e:	2301      	movs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001636:	2304      	movs	r3, #4
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	480b      	ldr	r0, [pc, #44]	; (8001670 <HAL_I2C_MspInit+0x84>)
 8001642:	f000 fb0f 	bl	8001c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_I2C_MspInit+0x80>)
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_I2C_MspInit+0x80>)
 800164c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001650:	6593      	str	r3, [r2, #88]	; 0x58
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_I2C_MspInit+0x80>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40005400 	.word	0x40005400
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_UART_MspInit+0x7c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d128      	bne.n	80016e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <HAL_UART_MspInit+0x80>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169a:	4a16      	ldr	r2, [pc, #88]	; (80016f4 <HAL_UART_MspInit+0x80>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6593      	str	r3, [r2, #88]	; 0x58
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_UART_MspInit+0x80>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_UART_MspInit+0x80>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_UART_MspInit+0x80>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_UART_MspInit+0x80>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e4:	f000 fabe 	bl	8001c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e8:	bf00      	nop
 80016ea:	3728      	adds	r7, #40	; 0x28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40004400 	.word	0x40004400
 80016f4:	40021000 	.word	0x40021000

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800174c:	f000 f984 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
	return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_kill>:

int _kill(int pid, int sig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800176e:	f003 fa3f 	bl	8004bf0 <__errno>
 8001772:	4603      	mov	r3, r0
 8001774:	2216      	movs	r2, #22
 8001776:	601a      	str	r2, [r3, #0]
	return -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_exit>:

void _exit (int status)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe7 	bl	8001764 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001796:	e7fe      	b.n	8001796 <_exit+0x12>

08001798 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
	}

return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e009      	b.n	80017f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf1      	blt.n	80017e4 <_write+0x12>
	}
	return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001832:	605a      	str	r2, [r3, #4]
	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_isatty>:

int _isatty(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f003 f9a4 	bl	8004bf0 <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20018000 	.word	0x20018000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	200005f8 	.word	0x200005f8
 80018dc:	200006e8 	.word	0x200006e8

080018e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <SystemInit+0x64>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <SystemInit+0x64>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <SystemInit+0x68>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <SystemInit+0x68>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <SystemInit+0x68>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <SystemInit+0x68>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <SystemInit+0x68>)
 800190c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001910:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001914:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <SystemInit+0x68>)
 8001918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <SystemInit+0x68>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <SystemInit+0x68>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <SystemInit+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SystemInit+0x64>)
 8001932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001936:	609a      	str	r2, [r3, #8]
#endif
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00
 8001948:	40021000 	.word	0x40021000

0800194c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001950:	f7ff ffc6 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001954:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001956:	e003      	b.n	8001960 <LoopCopyDataInit>

08001958 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800195a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800195c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800195e:	3104      	adds	r1, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001960:	480a      	ldr	r0, [pc, #40]	; (800198c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001964:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001966:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001968:	d3f6      	bcc.n	8001958 <CopyDataInit>
	ldr	r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <LoopForever+0x12>)
	b	LoopFillZerobss
 800196c:	e002      	b.n	8001974 <LoopFillZerobss>

0800196e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800196e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001970:	f842 3b04 	str.w	r3, [r2], #4

08001974 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <LoopForever+0x16>)
	cmp	r2, r3
 8001976:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001978:	d3f9      	bcc.n	800196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f003 f93f 	bl	8004bfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197e:	f7ff fbcf 	bl	8001120 <main>

08001982 <LoopForever>:

LoopForever:
    b LoopForever
 8001982:	e7fe      	b.n	8001982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001984:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001988:	08009a2c 	.word	0x08009a2c
	ldr	r0, =_sdata
 800198c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001990:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001994:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001998:	200006e4 	.word	0x200006e4

0800199c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_2_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_Init+0x3c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_Init+0x3c>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b6:	2003      	movs	r0, #3
 80019b8:	f000 f920 	bl	8001bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f80f 	bl	80019e0 <HAL_InitTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	71fb      	strb	r3, [r7, #7]
 80019cc:	e001      	b.n	80019d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ce:	f7ff fde9 	bl	80015a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d2:	79fb      	ldrb	r3, [r7, #7]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_InitTick+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_InitTick+0x70>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_InitTick+0x6c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f91d 	bl	8001c4a <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d809      	bhi.n	8001a30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f8f5 	bl	8001c12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_InitTick+0x74>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e004      	b.n	8001a40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e001      	b.n	8001a40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	200006d0 	.word	0x200006d0

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	200006d0 	.word	0x200006d0

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	db0a      	blt.n	8001b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	490c      	ldr	r1, [pc, #48]	; (8001b48 <__NVIC_SetPriority+0x4c>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	0112      	lsls	r2, r2, #4
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b24:	e00a      	b.n	8001b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <__NVIC_SetPriority+0x50>)
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	3b04      	subs	r3, #4
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	440b      	add	r3, r1
 8001b3a:	761a      	strb	r2, [r3, #24]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f1c3 0307 	rsb	r3, r3, #7
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	bf28      	it	cs
 8001b6e:	2304      	movcs	r3, #4
 8001b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3304      	adds	r3, #4
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d902      	bls.n	8001b80 <NVIC_EncodePriority+0x30>
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3b03      	subs	r3, #3
 8001b7e:	e000      	b.n	8001b82 <NVIC_EncodePriority+0x32>
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b84:	f04f 32ff 	mov.w	r2, #4294967295
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	401a      	ands	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	43d9      	mvns	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	4313      	orrs	r3, r2
         );
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d301      	bcc.n	8001bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00f      	b.n	8001bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <SysTick_Config+0x40>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f7ff ff8e 	bl	8001afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <SysTick_Config+0x40>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <SysTick_Config+0x40>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	e000e010 	.word	0xe000e010

08001bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff47 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff5c 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff8e 	bl	8001b50 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5d 	bl	8001afc <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffb0 	bl	8001bb8 <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	e17f      	b.n	8001f74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8171 	beq.w	8001f6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d00b      	beq.n	8001cac <HAL_GPIO_Init+0x48>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca0:	2b11      	cmp	r3, #17
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	d130      	bne.n	8001d0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0201 	and.w	r2, r3, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d118      	bne.n	8001d4c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x128>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d123      	bne.n	8001dd4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	6939      	ldr	r1, [r7, #16]
 8001dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80ac 	beq.w	8001f6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	4b5f      	ldr	r3, [pc, #380]	; (8001f94 <HAL_GPIO_Init+0x330>)
 8001e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1a:	4a5e      	ldr	r2, [pc, #376]	; (8001f94 <HAL_GPIO_Init+0x330>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6613      	str	r3, [r2, #96]	; 0x60
 8001e22:	4b5c      	ldr	r3, [pc, #368]	; (8001f94 <HAL_GPIO_Init+0x330>)
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e2e:	4a5a      	ldr	r2, [pc, #360]	; (8001f98 <HAL_GPIO_Init+0x334>)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e58:	d025      	beq.n	8001ea6 <HAL_GPIO_Init+0x242>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <HAL_GPIO_Init+0x338>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <HAL_GPIO_Init+0x23e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_GPIO_Init+0x33c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x23a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4d      	ldr	r2, [pc, #308]	; (8001fa4 <HAL_GPIO_Init+0x340>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x236>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4c      	ldr	r2, [pc, #304]	; (8001fa8 <HAL_GPIO_Init+0x344>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x232>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4b      	ldr	r2, [pc, #300]	; (8001fac <HAL_GPIO_Init+0x348>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x22e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_GPIO_Init+0x34c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x22a>
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	e00c      	b.n	8001ea8 <HAL_GPIO_Init+0x244>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e00a      	b.n	8001ea8 <HAL_GPIO_Init+0x244>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x244>
 8001e96:	2304      	movs	r3, #4
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x244>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x244>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x244>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x244>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	f002 0203 	and.w	r2, r2, #3
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eb8:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_GPIO_Init+0x334>)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001eea:	4a32      	ldr	r2, [pc, #200]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ef0:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f68:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_GPIO_Init+0x350>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f47f ae78 	bne.w	8001c74 <HAL_GPIO_Init+0x10>
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	48000800 	.word	0x48000800
 8001fa4:	48000c00 	.word	0x48000c00
 8001fa8:	48001000 	.word	0x48001000
 8001fac:	48001400 	.word	0x48001400
 8001fb0:	48001800 	.word	0x48001800
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e081      	b.n	80020ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fb04 	bl	80015ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002008:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002018:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d107      	bne.n	8002032 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e006      	b.n	8002040 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800203e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d104      	bne.n	8002052 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002050:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002064:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002074:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	ea42 0103 	orr.w	r1, r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	021a      	lsls	r2, r3, #8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69d9      	ldr	r1, [r3, #28]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	817b      	strh	r3, [r7, #10]
 80020ea:	460b      	mov	r3, r1
 80020ec:	813b      	strh	r3, [r7, #8]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	f040 80f9 	bne.w	80022f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_I2C_Mem_Write+0x34>
 8002106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0ed      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_I2C_Mem_Write+0x4e>
 8002122:	2302      	movs	r3, #2
 8002124:	e0e6      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800212e:	f7ff fca7 	bl	8001a80 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2319      	movs	r3, #25
 800213a:	2201      	movs	r2, #1
 800213c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fac3 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0d1      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2221      	movs	r2, #33	; 0x21
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a3a      	ldr	r2, [r7, #32]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002178:	88f8      	ldrh	r0, [r7, #6]
 800217a:	893a      	ldrh	r2, [r7, #8]
 800217c:	8979      	ldrh	r1, [r7, #10]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	4603      	mov	r3, r0
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f9d3 	bl	8002534 <I2C_RequestMemoryWrite>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0a9      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2bff      	cmp	r3, #255	; 0xff
 80021a8:	d90e      	bls.n	80021c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	22ff      	movs	r2, #255	; 0xff
 80021ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	8979      	ldrh	r1, [r7, #10]
 80021b8:	2300      	movs	r3, #0
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fba5 	bl	8002910 <I2C_TransferConfig>
 80021c6:	e00f      	b.n	80021e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	8979      	ldrh	r1, [r7, #10]
 80021da:	2300      	movs	r3, #0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fb94 	bl	8002910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 faad 	bl	800274c <I2C_WaitOnTXISFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e07b      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d034      	beq.n	80022a0 <HAL_I2C_Mem_Write+0x1c8>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	d130      	bne.n	80022a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	2200      	movs	r2, #0
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fa3f 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e04d      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	2bff      	cmp	r3, #255	; 0xff
 8002260:	d90e      	bls.n	8002280 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	22ff      	movs	r2, #255	; 0xff
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	b2da      	uxtb	r2, r3
 800226e:	8979      	ldrh	r1, [r7, #10]
 8002270:	2300      	movs	r3, #0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fb49 	bl	8002910 <I2C_TransferConfig>
 800227e:	e00f      	b.n	80022a0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29a      	uxth	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	b2da      	uxtb	r2, r3
 8002290:	8979      	ldrh	r1, [r7, #10]
 8002292:	2300      	movs	r3, #0
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fb38 	bl	8002910 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d19e      	bne.n	80021e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa8c 	bl	80027cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e01a      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2220      	movs	r2, #32
 80022c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_I2C_Mem_Write+0x224>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	fe00e800 	.word	0xfe00e800

08002300 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	4608      	mov	r0, r1
 800230a:	4611      	mov	r1, r2
 800230c:	461a      	mov	r2, r3
 800230e:	4603      	mov	r3, r0
 8002310:	817b      	strh	r3, [r7, #10]
 8002312:	460b      	mov	r3, r1
 8002314:	813b      	strh	r3, [r7, #8]
 8002316:	4613      	mov	r3, r2
 8002318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b20      	cmp	r3, #32
 8002324:	f040 80fd 	bne.w	8002522 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <HAL_I2C_Mem_Read+0x34>
 800232e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0f1      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_I2C_Mem_Read+0x4e>
 800234a:	2302      	movs	r3, #2
 800234c:	e0ea      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002356:	f7ff fb93 	bl	8001a80 <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2319      	movs	r3, #25
 8002362:	2201      	movs	r2, #1
 8002364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f9af 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0d5      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2222      	movs	r2, #34	; 0x22
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a0:	88f8      	ldrh	r0, [r7, #6]
 80023a2:	893a      	ldrh	r2, [r7, #8]
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4603      	mov	r3, r0
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f913 	bl	80025dc <I2C_RequestMemoryRead>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0ad      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2bff      	cmp	r3, #255	; 0xff
 80023d0:	d90e      	bls.n	80023f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	22ff      	movs	r2, #255	; 0xff
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	4b52      	ldr	r3, [pc, #328]	; (800252c <HAL_I2C_Mem_Read+0x22c>)
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fa91 	bl	8002910 <I2C_TransferConfig>
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_I2C_Mem_Read+0x22c>)
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fa80 	bl	8002910 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	2200      	movs	r2, #0
 8002418:	2104      	movs	r1, #4
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f956 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07c      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d034      	beq.n	80024d0 <HAL_I2C_Mem_Read+0x1d0>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d130      	bne.n	80024d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f927 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e04d      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2bff      	cmp	r3, #255	; 0xff
 8002490:	d90e      	bls.n	80024b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	b2da      	uxtb	r2, r3
 800249e:	8979      	ldrh	r1, [r7, #10]
 80024a0:	2300      	movs	r3, #0
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fa31 	bl	8002910 <I2C_TransferConfig>
 80024ae:	e00f      	b.n	80024d0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	8979      	ldrh	r1, [r7, #10]
 80024c2:	2300      	movs	r3, #0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fa20 	bl	8002910 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d19a      	bne.n	8002410 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f974 	bl	80027cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e01a      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2220      	movs	r2, #32
 80024f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_I2C_Mem_Read+0x230>)
 8002502:	400b      	ands	r3, r1
 8002504:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
  }
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	80002400 	.word	0x80002400
 8002530:	fe00e800 	.word	0xfe00e800

08002534 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	4608      	mov	r0, r1
 800253e:	4611      	mov	r1, r2
 8002540:	461a      	mov	r2, r3
 8002542:	4603      	mov	r3, r0
 8002544:	817b      	strh	r3, [r7, #10]
 8002546:	460b      	mov	r3, r1
 8002548:	813b      	strh	r3, [r7, #8]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	8979      	ldrh	r1, [r7, #10]
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <I2C_RequestMemoryWrite+0xa4>)
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f9d7 	bl	8002910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	69b9      	ldr	r1, [r7, #24]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f8f0 	bl	800274c <I2C_WaitOnTXISFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e02c      	b.n	80025d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800257c:	893b      	ldrh	r3, [r7, #8]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
 8002586:	e015      	b.n	80025b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	b29b      	uxth	r3, r3
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	69b9      	ldr	r1, [r7, #24]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f8d6 	bl	800274c <I2C_WaitOnTXISFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e012      	b.n	80025d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025aa:	893b      	ldrh	r3, [r7, #8]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2200      	movs	r2, #0
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f884 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	80002000 	.word	0x80002000

080025dc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	817b      	strh	r3, [r7, #10]
 80025ee:	460b      	mov	r3, r1
 80025f0:	813b      	strh	r3, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	8979      	ldrh	r1, [r7, #10]
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <I2C_RequestMemoryRead+0xa4>)
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2300      	movs	r3, #0
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f984 	bl	8002910 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f89d 	bl	800274c <I2C_WaitOnTXISFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e02c      	b.n	8002676 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002622:	893b      	ldrh	r3, [r7, #8]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28
 800262c:	e015      	b.n	800265a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	b29b      	uxth	r3, r3
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f883 	bl	800274c <I2C_WaitOnTXISFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e012      	b.n	8002676 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002650:	893b      	ldrh	r3, [r7, #8]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	; 0x40
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f831 	bl	80026cc <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	80002000 	.word	0x80002000

08002684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d103      	bne.n	80026a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d007      	beq.n	80026c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	619a      	str	r2, [r3, #24]
  }
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026dc:	e022      	b.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d01e      	beq.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e6:	f7ff f9cb 	bl	8001a80 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d302      	bcc.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d113      	bne.n	8002724 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e00f      	b.n	8002744 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4013      	ands	r3, r2
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	429a      	cmp	r2, r3
 8002740:	d0cd      	beq.n	80026de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002758:	e02c      	b.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f870 	bl	8002844 <I2C_IsAcknowledgeFailed>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e02a      	b.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d01e      	beq.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7ff f983 	bl	8001a80 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d113      	bne.n	80027b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	f043 0220 	orr.w	r2, r3, #32
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e007      	b.n	80027c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d1cb      	bne.n	800275a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027d8:	e028      	b.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f830 	bl	8002844 <I2C_IsAcknowledgeFailed>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e026      	b.n	800283c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ee:	f7ff f947 	bl	8001a80 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d113      	bne.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e007      	b.n	800283c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b20      	cmp	r3, #32
 8002838:	d1cf      	bne.n	80027da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b10      	cmp	r3, #16
 800285c:	d151      	bne.n	8002902 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800285e:	e022      	b.n	80028a6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d01e      	beq.n	80028a6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7ff f90a 	bl	8001a80 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <I2C_IsAcknowledgeFailed+0x3a>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d113      	bne.n	80028a6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e02e      	b.n	8002904 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d1d5      	bne.n	8002860 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2210      	movs	r2, #16
 80028ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2220      	movs	r2, #32
 80028c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff fedd 	bl	8002684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <I2C_IsAcknowledgeFailed+0xc8>)
 80028d6:	400b      	ands	r3, r1
 80028d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f043 0204 	orr.w	r2, r3, #4
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	fe00e800 	.word	0xfe00e800

08002910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	4613      	mov	r3, r2
 8002920:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	0d5b      	lsrs	r3, r3, #21
 800292c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <I2C_TransferConfig+0x58>)
 8002932:	430b      	orrs	r3, r1
 8002934:	43db      	mvns	r3, r3
 8002936:	ea02 0103 	and.w	r1, r2, r3
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002940:	7a7b      	ldrb	r3, [r7, #9]
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	431a      	orrs	r2, r3
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	03ff63ff 	.word	0x03ff63ff

0800296c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b20      	cmp	r3, #32
 8002980:	d138      	bne.n	80029f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800298c:	2302      	movs	r3, #2
 800298e:	e032      	b.n	80029f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2224      	movs	r2, #36	; 0x24
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d139      	bne.n	8002a8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e033      	b.n	8002a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2224      	movs	r2, #36	; 0x24
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000

08002ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac6:	d130      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ac8:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad4:	d038      	beq.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2232      	movs	r2, #50	; 0x32
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0c9b      	lsrs	r3, r3, #18
 8002af8:	3301      	adds	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002afc:	e002      	b.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b10:	d102      	bne.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f2      	bne.n	8002afe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b24:	d110      	bne.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e00f      	b.n	8002b4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b2a:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b36:	d007      	beq.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b38:	4b07      	ldr	r3, [pc, #28]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b40:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	431bde83 	.word	0x431bde83

08002b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e3d4      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b76:	4ba1      	ldr	r3, [pc, #644]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b80:	4b9e      	ldr	r3, [pc, #632]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80e4 	beq.w	8002d60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_RCC_OscConfig+0x4a>
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	2b0c      	cmp	r3, #12
 8002ba2:	f040 808b 	bne.w	8002cbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 8087 	bne.w	8002cbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bae:	4b93      	ldr	r3, [pc, #588]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x62>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e3ac      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	4b8c      	ldr	r3, [pc, #560]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <HAL_RCC_OscConfig+0x7c>
 8002bd6:	4b89      	ldr	r3, [pc, #548]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bde:	e005      	b.n	8002bec <HAL_RCC_OscConfig+0x88>
 8002be0:	4b86      	ldr	r3, [pc, #536]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d223      	bcs.n	8002c38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fd41 	bl	800367c <RCC_SetFlashLatencyFromMSIRange>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e38d      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c04:	4b7d      	ldr	r3, [pc, #500]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a7c      	ldr	r2, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b7a      	ldr	r3, [pc, #488]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	4977      	ldr	r1, [pc, #476]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c22:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	4972      	ldr	r1, [pc, #456]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
 8002c36:	e025      	b.n	8002c84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c38:	4b70      	ldr	r3, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a6f      	ldr	r2, [pc, #444]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c3e:	f043 0308 	orr.w	r3, r3, #8
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4b6d      	ldr	r3, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	496a      	ldr	r1, [pc, #424]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c56:	4b69      	ldr	r3, [pc, #420]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	4965      	ldr	r1, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fd01 	bl	800367c <RCC_SetFlashLatencyFromMSIRange>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e34d      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c84:	f000 fc36 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b5c      	ldr	r3, [pc, #368]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	495a      	ldr	r1, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x29c>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_RCC_OscConfig+0x2a0>)
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ca4:	4b58      	ldr	r3, [pc, #352]	; (8002e08 <HAL_RCC_OscConfig+0x2a4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fe99 	bl	80019e0 <HAL_InitTick>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d052      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	e331      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d032      	beq.n	8002d2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a4c      	ldr	r2, [pc, #304]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fed6 	bl	8001a80 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fed2 	bl	8001a80 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e31a      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cea:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	493b      	ldr	r1, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d14:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	4936      	ldr	r1, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	604b      	str	r3, [r1, #4]
 8002d28:	e01a      	b.n	8002d60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d36:	f7fe fea3 	bl	8001a80 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fe9f 	bl	8001a80 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e2e7      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x1da>
 8002d5c:	e000      	b.n	8002d60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d074      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x21a>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	d10e      	bne.n	8002d96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d10b      	bne.n	8002d96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d064      	beq.n	8002e54 <HAL_RCC_OscConfig+0x2f0>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d160      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e2c4      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x24a>
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e01d      	b.n	8002dea <HAL_RCC_OscConfig+0x286>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db6:	d10c      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x26e>
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e00b      	b.n	8002dea <HAL_RCC_OscConfig+0x286>
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a06      	ldr	r2, [pc, #24]	; (8002dfc <HAL_RCC_OscConfig+0x298>)
 8002de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe fe45 	bl	8001a80 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df8:	e011      	b.n	8002e1e <HAL_RCC_OscConfig+0x2ba>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08009520 	.word	0x08009520
 8002e04:	20000000 	.word	0x20000000
 8002e08:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe fe38 	bl	8001a80 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e280      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e1e:	4baf      	ldr	r3, [pc, #700]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x2a8>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fe28 	bl	8001a80 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe fe24 	bl	8001a80 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	; 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e26c      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e46:	4ba5      	ldr	r3, [pc, #660]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2d0>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d060      	beq.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_OscConfig+0x310>
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d119      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d116      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e74:	4b99      	ldr	r3, [pc, #612]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_OscConfig+0x328>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e249      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	061b      	lsls	r3, r3, #24
 8002e9a:	4990      	ldr	r1, [pc, #576]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea0:	e040      	b.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d023      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eaa:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a8b      	ldr	r2, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fde3 	bl	8001a80 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fddf 	bl	8001a80 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e227      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed0:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	497c      	ldr	r1, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
 8002ef0:	e018      	b.n	8002f24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b7a      	ldr	r3, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a79      	ldr	r2, [pc, #484]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7fe fdbf 	bl	8001a80 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f06:	f7fe fdbb 	bl	8001a80 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e203      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f18:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f0      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d03c      	beq.n	8002faa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01c      	beq.n	8002f72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f3e:	4a67      	ldr	r2, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fd9a 	bl	8001a80 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe fd96 	bl	8001a80 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e1de      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f62:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ef      	beq.n	8002f50 <HAL_RCC_OscConfig+0x3ec>
 8002f70:	e01b      	b.n	8002faa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f72:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f78:	4a58      	ldr	r2, [pc, #352]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f82:	f7fe fd7d 	bl	8001a80 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fd79 	bl	8001a80 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1c1      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f9c:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1ef      	bne.n	8002f8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80a6 	beq.w	8003104 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fbc:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10d      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc8:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	4a43      	ldr	r2, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd4:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe4:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <HAL_RCC_OscConfig+0x57c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d118      	bne.n	8003022 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_OscConfig+0x57c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3a      	ldr	r2, [pc, #232]	; (80030e0 <HAL_RCC_OscConfig+0x57c>)
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fd40 	bl	8001a80 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003004:	f7fe fd3c 	bl	8001a80 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e184      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003016:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_RCC_OscConfig+0x57c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d108      	bne.n	800303c <HAL_RCC_OscConfig+0x4d8>
 800302a:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303a:	e024      	b.n	8003086 <HAL_RCC_OscConfig+0x522>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b05      	cmp	r3, #5
 8003042:	d110      	bne.n	8003066 <HAL_RCC_OscConfig+0x502>
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003054:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	4a20      	ldr	r2, [pc, #128]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003064:	e00f      	b.n	8003086 <HAL_RCC_OscConfig+0x522>
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe fcf7 	bl	8001a80 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fcf3 	bl	8001a80 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e139      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x578>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ed      	beq.n	8003096 <HAL_RCC_OscConfig+0x532>
 80030ba:	e01a      	b.n	80030f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe fce0 	bl	8001a80 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030c2:	e00f      	b.n	80030e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7fe fcdc 	bl	8001a80 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d906      	bls.n	80030e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e122      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e4:	4b90      	ldr	r3, [pc, #576]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e8      	bne.n	80030c4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b8b      	ldr	r3, [pc, #556]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	4a8a      	ldr	r2, [pc, #552]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8108 	beq.w	800331e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	2b02      	cmp	r3, #2
 8003114:	f040 80d0 	bne.w	80032b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003118:	4b83      	ldr	r3, [pc, #524]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0203 	and.w	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	429a      	cmp	r2, r3
 800312a:	d130      	bne.n	800318e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	3b01      	subs	r3, #1
 8003138:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d127      	bne.n	800318e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003148:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d11f      	bne.n	800318e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003158:	2a07      	cmp	r2, #7
 800315a:	bf14      	ite	ne
 800315c:	2201      	movne	r2, #1
 800315e:	2200      	moveq	r2, #0
 8003160:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003162:	4293      	cmp	r3, r2
 8003164:	d113      	bne.n	800318e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	3b01      	subs	r3, #1
 8003174:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d109      	bne.n	800318e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	3b01      	subs	r3, #1
 8003188:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d06e      	beq.n	800326c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d069      	beq.n	8003268 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003194:	4b64      	ldr	r3, [pc, #400]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0b7      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031b0:	4b5d      	ldr	r3, [pc, #372]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a5c      	ldr	r2, [pc, #368]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80031b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031bc:	f7fe fc60 	bl	8001a80 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c4:	f7fe fc5c 	bl	8001a80 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0a4      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d6:	4b54      	ldr	r3, [pc, #336]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e2:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	4b51      	ldr	r3, [pc, #324]	; (800332c <HAL_RCC_OscConfig+0x7c8>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031f2:	3a01      	subs	r2, #1
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031fc:	0212      	lsls	r2, r2, #8
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003204:	0852      	lsrs	r2, r2, #1
 8003206:	3a01      	subs	r2, #1
 8003208:	0552      	lsls	r2, r2, #21
 800320a:	4311      	orrs	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003210:	0852      	lsrs	r2, r2, #1
 8003212:	3a01      	subs	r2, #1
 8003214:	0652      	lsls	r2, r2, #25
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800321c:	0912      	lsrs	r2, r2, #4
 800321e:	0452      	lsls	r2, r2, #17
 8003220:	430a      	orrs	r2, r1
 8003222:	4941      	ldr	r1, [pc, #260]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a3e      	ldr	r2, [pc, #248]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800322e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003232:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003234:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4a3b      	ldr	r2, [pc, #236]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800323a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800323e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003240:	f7fe fc1e 	bl	8001a80 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fc1a 	bl	8001a80 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e062      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003266:	e05a      	b.n	800331e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e059      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d152      	bne.n	800331e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4a27      	ldr	r2, [pc, #156]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800328a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800328e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003290:	f7fe fbf6 	bl	8001a80 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fbf2 	bl	8001a80 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e03a      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x734>
 80032b6:	e032      	b.n	800331e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d02d      	beq.n	800331a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032dc:	f023 0303 	bic.w	r3, r3, #3
 80032e0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 80032e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80032ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fbc5 	bl	8001a80 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fbc1 	bl	8001a80 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e009      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_OscConfig+0x7c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x796>
 8003318:	e001      	b.n	800331e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40021000 	.word	0x40021000
 800332c:	f99d808c 	.word	0xf99d808c

08003330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0c8      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d910      	bls.n	8003374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	4961      	ldr	r1, [pc, #388]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0b0      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d04c      	beq.n	800341a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d107      	bne.n	8003398 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003388:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d121      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e09e      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d115      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e092      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b8:	4b4a      	ldr	r3, [pc, #296]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e086      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c8:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e07e      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033d8:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f023 0203 	bic.w	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	493f      	ldr	r1, [pc, #252]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ea:	f7fe fb49 	bl	8001a80 <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe fb45 	bl	8001a80 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e066      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003408:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 020c 	and.w	r2, r3, #12
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	429a      	cmp	r2, r3
 8003418:	d1eb      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003426:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	492c      	ldr	r1, [pc, #176]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003438:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d210      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4924      	ldr	r1, [pc, #144]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_RCC_ClockConfig+0x1b0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e036      	b.n	80034d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4918      	ldr	r1, [pc, #96]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4910      	ldr	r1, [pc, #64]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034a6:	f000 f825 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <HAL_RCC_ClockConfig+0x1b4>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	490c      	ldr	r1, [pc, #48]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	5ccb      	ldrb	r3, [r1, r3]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fa88 	bl	80019e0 <HAL_InitTick>
 80034d0:	4603      	mov	r3, r0
 80034d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80034d4:	7afb      	ldrb	r3, [r7, #11]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	08009520 	.word	0x08009520
 80034ec:	20000000 	.word	0x20000000
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800350c:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d005      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x34>
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d121      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d11e      	bne.n	8003566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003534:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	e005      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003544:	4b2d      	ldr	r3, [pc, #180]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10d      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003564:	e00a      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d102      	bne.n	8003572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_RCC_GetSysClockFreq+0x110>)
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e004      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d101      	bne.n	800357c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_RCC_GetSysClockFreq+0x114>)
 800357a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d134      	bne.n	80035ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d003      	beq.n	800359a <HAL_RCC_GetSysClockFreq+0xa6>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b03      	cmp	r3, #3
 8003596:	d003      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003598:	e005      	b.n	80035a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <HAL_RCC_GetSysClockFreq+0x110>)
 800359c:	617b      	str	r3, [r7, #20]
      break;
 800359e:	e005      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_RCC_GetSysClockFreq+0x114>)
 80035a2:	617b      	str	r3, [r7, #20]
      break;
 80035a4:	e002      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	617b      	str	r3, [r7, #20]
      break;
 80035aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	3301      	adds	r3, #1
 80035b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	fb02 f203 	mul.w	r2, r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_GetSysClockFreq+0x108>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	0e5b      	lsrs	r3, r3, #25
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	3301      	adds	r3, #1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035ec:	69bb      	ldr	r3, [r7, #24]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	; 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	08009538 	.word	0x08009538
 8003604:	00f42400 	.word	0x00f42400
 8003608:	007a1200 	.word	0x007a1200

0800360c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_RCC_GetHCLKFreq+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000

08003624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003628:	f7ff fff0 	bl	800360c <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4904      	ldr	r1, [pc, #16]	; (800364c <HAL_RCC_GetPCLK1Freq+0x28>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40021000 	.word	0x40021000
 800364c:	08009530 	.word	0x08009530

08003650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003654:	f7ff ffda 	bl	800360c <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0adb      	lsrs	r3, r3, #11
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4904      	ldr	r1, [pc, #16]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	08009530 	.word	0x08009530

0800367c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003694:	f7ff fa02 	bl	8002a9c <HAL_PWREx_GetVoltageRange>
 8003698:	6178      	str	r0, [r7, #20]
 800369a:	e014      	b.n	80036c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	4a24      	ldr	r2, [pc, #144]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	; 0x58
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036b4:	f7ff f9f2 	bl	8002a9c <HAL_PWREx_GetVoltageRange>
 80036b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036cc:	d10b      	bne.n	80036e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b80      	cmp	r3, #128	; 0x80
 80036d2:	d919      	bls.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2ba0      	cmp	r3, #160	; 0xa0
 80036d8:	d902      	bls.n	80036e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036da:	2302      	movs	r3, #2
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e013      	b.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036e0:	2301      	movs	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e010      	b.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d902      	bls.n	80036f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036ec:	2303      	movs	r3, #3
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	e00a      	b.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	d102      	bne.n	80036fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036f8:	2302      	movs	r3, #2
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	e004      	b.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b70      	cmp	r3, #112	; 0x70
 8003702:	d101      	bne.n	8003708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003704:	2301      	movs	r3, #1
 8003706:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 0207 	bic.w	r2, r3, #7
 8003710:	4909      	ldr	r1, [pc, #36]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003718:	4b07      	ldr	r3, [pc, #28]	; (8003738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000
 8003738:	40022000 	.word	0x40022000

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003744:	2300      	movs	r3, #0
 8003746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003748:	2300      	movs	r3, #0
 800374a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	2b00      	cmp	r3, #0
 8003756:	d041      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003760:	d02a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003762:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003766:	d824      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376c:	d008      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800376e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003772:	d81e      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377c:	d010      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800377e:	e018      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003780:	4b86      	ldr	r3, [pc, #536]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a85      	ldr	r2, [pc, #532]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800378c:	e015      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fabb 	bl	8003d10 <RCCEx_PLLSAI1_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800379e:	e00c      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3320      	adds	r3, #32
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fba6 	bl	8003ef8 <RCCEx_PLLSAI2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	74fb      	strb	r3, [r7, #19]
      break;
 80037b6:	e000      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037c0:	4b76      	ldr	r3, [pc, #472]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ce:	4973      	ldr	r1, [pc, #460]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037d6:	e001      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d041      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f0:	d02a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80037f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f6:	d824      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80037f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003802:	d81e      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380c:	d010      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800380e:	e018      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003810:	4b62      	ldr	r3, [pc, #392]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a61      	ldr	r2, [pc, #388]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800381c:	e015      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fa73 	bl	8003d10 <RCCEx_PLLSAI1_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800382e:	e00c      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3320      	adds	r3, #32
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fb5e 	bl	8003ef8 <RCCEx_PLLSAI2_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003840:	e003      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	74fb      	strb	r3, [r7, #19]
      break;
 8003846:	e000      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003850:	4b52      	ldr	r3, [pc, #328]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003856:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385e:	494f      	ldr	r1, [pc, #316]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a0 	beq.w	80039ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	4a40      	ldr	r2, [pc, #256]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389e:	6593      	str	r3, [r2, #88]	; 0x58
 80038a0:	4b3e      	ldr	r3, [pc, #248]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b0:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3a      	ldr	r2, [pc, #232]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038bc:	f7fe f8e0 	bl	8001a80 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038c2:	e009      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c4:	f7fe f8dc 	bl	8001a80 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d902      	bls.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	74fb      	strb	r3, [r7, #19]
        break;
 80038d6:	e005      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038d8:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0ef      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d15c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ea:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01f      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	429a      	cmp	r2, r3
 8003906:	d019      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003908:	4b24      	ldr	r3, [pc, #144]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003914:	4b21      	ldr	r3, [pc, #132]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a1c      	ldr	r2, [pc, #112]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003934:	4a19      	ldr	r2, [pc, #100]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe f89b 	bl	8001a80 <HAL_GetTick>
 800394a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394c:	e00b      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe f897 	bl	8001a80 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d902      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	74fb      	strb	r3, [r7, #19]
            break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ec      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10c      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398a:	4904      	ldr	r1, [pc, #16]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003992:	e009      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	74bb      	strb	r3, [r7, #18]
 8003998:	e006      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a8:	7c7b      	ldrb	r3, [r7, #17]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ae:	4b9e      	ldr	r3, [pc, #632]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	4a9d      	ldr	r2, [pc, #628]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c6:	4b98      	ldr	r3, [pc, #608]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f023 0203 	bic.w	r2, r3, #3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	4994      	ldr	r1, [pc, #592]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e8:	4b8f      	ldr	r3, [pc, #572]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f023 020c 	bic.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	498c      	ldr	r1, [pc, #560]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a0a:	4b87      	ldr	r3, [pc, #540]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4983      	ldr	r1, [pc, #524]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a2c:	4b7e      	ldr	r3, [pc, #504]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	497b      	ldr	r1, [pc, #492]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a4e:	4b76      	ldr	r3, [pc, #472]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	4972      	ldr	r1, [pc, #456]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a70:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7e:	496a      	ldr	r1, [pc, #424]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a92:	4b65      	ldr	r3, [pc, #404]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	4961      	ldr	r1, [pc, #388]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ab4:	4b5c      	ldr	r3, [pc, #368]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	4959      	ldr	r1, [pc, #356]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad6:	4b54      	ldr	r3, [pc, #336]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae4:	4950      	ldr	r1, [pc, #320]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	4948      	ldr	r1, [pc, #288]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b1a:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	493f      	ldr	r1, [pc, #252]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d028      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4a:	4937      	ldr	r1, [pc, #220]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b5c:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a31      	ldr	r2, [pc, #196]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b66:	60d3      	str	r3, [r2, #12]
 8003b68:	e011      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f8c8 	bl	8003d10 <RCCEx_PLLSAI1_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d028      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b9a:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	491f      	ldr	r1, [pc, #124]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb8:	d106      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bba:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc4:	60d3      	str	r3, [r2, #12]
 8003bc6:	e011      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f899 	bl	8003d10 <RCCEx_PLLSAI1_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02b      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c06:	4908      	ldr	r1, [pc, #32]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c16:	d109      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4a02      	ldr	r2, [pc, #8]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c22:	60d3      	str	r3, [r2, #12]
 8003c24:	e014      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 f867 	bl	8003d10 <RCCEx_PLLSAI1_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d02f      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c5c:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c6a:	4928      	ldr	r1, [pc, #160]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f844 	bl	8003d10 <RCCEx_PLLSAI1_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d014      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	74bb      	strb	r3, [r7, #18]
 8003c96:	e011      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3320      	adds	r3, #32
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f925 	bl	8003ef8 <RCCEx_PLLSAI2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cb2:	7cfb      	ldrb	r3, [r7, #19]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cd6:	490d      	ldr	r1, [pc, #52]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cea:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cfa:	4904      	ldr	r1, [pc, #16]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d02:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40021000 	.word	0x40021000

08003d10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d1e:	4b75      	ldr	r3, [pc, #468]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d2a:	4b72      	ldr	r3, [pc, #456]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0203 	and.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d10d      	bne.n	8003d56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d42:	4b6c      	ldr	r3, [pc, #432]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
       ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d047      	beq.n	8003de6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	e044      	b.n	8003de6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d018      	beq.n	8003d96 <RCCEx_PLLSAI1_Config+0x86>
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d825      	bhi.n	8003db4 <RCCEx_PLLSAI1_Config+0xa4>
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d002      	beq.n	8003d72 <RCCEx_PLLSAI1_Config+0x62>
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d009      	beq.n	8003d84 <RCCEx_PLLSAI1_Config+0x74>
 8003d70:	e020      	b.n	8003db4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d72:	4b60      	ldr	r3, [pc, #384]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11d      	bne.n	8003dba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d82:	e01a      	b.n	8003dba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d84:	4b5b      	ldr	r3, [pc, #364]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d116      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e013      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d96:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003da2:	4b54      	ldr	r3, [pc, #336]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003db2:	e006      	b.n	8003dc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      break;
 8003db8:	e004      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	430b      	orrs	r3, r1
 8003de0:	4944      	ldr	r1, [pc, #272]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d17d      	bne.n	8003ee8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003dec:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a40      	ldr	r2, [pc, #256]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df8:	f7fd fe42 	bl	8001a80 <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003dfe:	e009      	b.n	8003e14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e00:	f7fd fe3e 	bl	8001a80 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d902      	bls.n	8003e14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	73fb      	strb	r3, [r7, #15]
        break;
 8003e12:	e005      	b.n	8003e20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e14:	4b37      	ldr	r3, [pc, #220]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ef      	bne.n	8003e00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d160      	bne.n	8003ee8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d111      	bne.n	8003e50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6892      	ldr	r2, [r2, #8]
 8003e3c:	0211      	lsls	r1, r2, #8
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68d2      	ldr	r2, [r2, #12]
 8003e42:	0912      	lsrs	r2, r2, #4
 8003e44:	0452      	lsls	r2, r2, #17
 8003e46:	430a      	orrs	r2, r1
 8003e48:	492a      	ldr	r1, [pc, #168]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	610b      	str	r3, [r1, #16]
 8003e4e:	e027      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d112      	bne.n	8003e7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e56:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6892      	ldr	r2, [r2, #8]
 8003e66:	0211      	lsls	r1, r2, #8
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6912      	ldr	r2, [r2, #16]
 8003e6c:	0852      	lsrs	r2, r2, #1
 8003e6e:	3a01      	subs	r2, #1
 8003e70:	0552      	lsls	r2, r2, #21
 8003e72:	430a      	orrs	r2, r1
 8003e74:	491f      	ldr	r1, [pc, #124]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	610b      	str	r3, [r1, #16]
 8003e7a:	e011      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	0211      	lsls	r1, r2, #8
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6952      	ldr	r2, [r2, #20]
 8003e92:	0852      	lsrs	r2, r2, #1
 8003e94:	3a01      	subs	r2, #1
 8003e96:	0652      	lsls	r2, r2, #25
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	4916      	ldr	r1, [pc, #88]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fd fde8 	bl	8001a80 <HAL_GetTick>
 8003eb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003eb2:	e009      	b.n	8003ec8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb4:	f7fd fde4 	bl	8001a80 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d902      	bls.n	8003ec8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec6:	e005      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ef      	beq.n	8003eb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f06:	4b6a      	ldr	r3, [pc, #424]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f12:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f003 0203 	and.w	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d10d      	bne.n	8003f3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
       ||
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f2a:	4b61      	ldr	r3, [pc, #388]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
       ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d047      	beq.n	8003fce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	e044      	b.n	8003fce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d018      	beq.n	8003f7e <RCCEx_PLLSAI2_Config+0x86>
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d825      	bhi.n	8003f9c <RCCEx_PLLSAI2_Config+0xa4>
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d002      	beq.n	8003f5a <RCCEx_PLLSAI2_Config+0x62>
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d009      	beq.n	8003f6c <RCCEx_PLLSAI2_Config+0x74>
 8003f58:	e020      	b.n	8003f9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f5a:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11d      	bne.n	8003fa2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6a:	e01a      	b.n	8003fa2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f6c:	4b50      	ldr	r3, [pc, #320]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d116      	bne.n	8003fa6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f7c:	e013      	b.n	8003fa6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f7e:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10f      	bne.n	8003faa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f8a:	4b49      	ldr	r3, [pc, #292]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f9a:	e006      	b.n	8003faa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa0:	e004      	b.n	8003fac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003faa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10d      	bne.n	8003fce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fb2:	4b3f      	ldr	r3, [pc, #252]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	4939      	ldr	r1, [pc, #228]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d167      	bne.n	80040a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003fd4:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a35      	ldr	r2, [pc, #212]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe0:	f7fd fd4e 	bl	8001a80 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003fe6:	e009      	b.n	8003ffc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fe8:	f7fd fd4a 	bl	8001a80 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d902      	bls.n	8003ffc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	73fb      	strb	r3, [r7, #15]
        break;
 8003ffa:	e005      	b.n	8004008 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ef      	bne.n	8003fe8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d14a      	bne.n	80040a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d111      	bne.n	8004038 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004014:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800401c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6892      	ldr	r2, [r2, #8]
 8004024:	0211      	lsls	r1, r2, #8
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68d2      	ldr	r2, [r2, #12]
 800402a:	0912      	lsrs	r2, r2, #4
 800402c:	0452      	lsls	r2, r2, #17
 800402e:	430a      	orrs	r2, r1
 8004030:	491f      	ldr	r1, [pc, #124]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004032:	4313      	orrs	r3, r2
 8004034:	614b      	str	r3, [r1, #20]
 8004036:	e011      	b.n	800405c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004040:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6892      	ldr	r2, [r2, #8]
 8004048:	0211      	lsls	r1, r2, #8
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6912      	ldr	r2, [r2, #16]
 800404e:	0852      	lsrs	r2, r2, #1
 8004050:	3a01      	subs	r2, #1
 8004052:	0652      	lsls	r2, r2, #25
 8004054:	430a      	orrs	r2, r1
 8004056:	4916      	ldr	r1, [pc, #88]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004058:	4313      	orrs	r3, r2
 800405a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fd fd0a 	bl	8001a80 <HAL_GetTick>
 800406c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800406e:	e009      	b.n	8004084 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004070:	f7fd fd06 	bl	8001a80 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d902      	bls.n	8004084 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	73fb      	strb	r3, [r7, #15]
          break;
 8004082:	e005      	b.n	8004090 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004084:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ef      	beq.n	8004070 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4904      	ldr	r1, [pc, #16]	; (80040b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000

080040b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e040      	b.n	8004148 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fd facc 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	; 0x24
 80040e0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f98c 	bl	8004410 <UART_SetConfig>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e022      	b.n	8004148 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fc0a 	bl	8004924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800411e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800412e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fc91 	bl	8004a68 <UART_CheckIdleState>
 8004146:	4603      	mov	r3, r0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	2b20      	cmp	r3, #32
 8004166:	f040 8081 	bne.w	800426c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_UART_Transmit+0x26>
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e079      	b.n	800426e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_UART_Transmit+0x38>
 8004184:	2302      	movs	r3, #2
 8004186:	e072      	b.n	800426e <HAL_UART_Transmit+0x11e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2221      	movs	r2, #33	; 0x21
 800419a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800419c:	f7fd fc70 	bl	8001a80 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ba:	d108      	bne.n	80041ce <HAL_UART_Transmit+0x7e>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d104      	bne.n	80041ce <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	e003      	b.n	80041d6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80041de:	e02d      	b.n	800423c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fc81 	bl	8004af2 <UART_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e039      	b.n	800426e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	881a      	ldrh	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800420c:	b292      	uxth	r2, r2
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	3302      	adds	r3, #2
 8004214:	61bb      	str	r3, [r7, #24]
 8004216:	e008      	b.n	800422a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	b292      	uxth	r2, r2
 8004222:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3301      	adds	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1cb      	bne.n	80041e0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fc4d 	bl	8004af2 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e005      	b.n	800426e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	e000      	b.n	800426e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
  }
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b08a      	sub	sp, #40	; 0x28
 800427a:	af02      	add	r7, sp, #8
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800428a:	2b20      	cmp	r3, #32
 800428c:	f040 80bb 	bne.w	8004406 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_UART_Receive+0x26>
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0b3      	b.n	8004408 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Receive+0x38>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0ac      	b.n	8004408 <HAL_UART_Receive+0x192>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2222      	movs	r2, #34	; 0x22
 80042c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042c2:	f7fd fbdd 	bl	8001a80 <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d10e      	bne.n	8004300 <HAL_UART_Receive+0x8a>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <HAL_UART_Receive+0x80>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f4:	e02d      	b.n	8004352 <HAL_UART_Receive+0xdc>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042fe:	e028      	b.n	8004352 <HAL_UART_Receive+0xdc>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10d      	bne.n	8004324 <HAL_UART_Receive+0xae>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d104      	bne.n	800431a <HAL_UART_Receive+0xa4>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	22ff      	movs	r2, #255	; 0xff
 8004314:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004318:	e01b      	b.n	8004352 <HAL_UART_Receive+0xdc>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	227f      	movs	r2, #127	; 0x7f
 800431e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004322:	e016      	b.n	8004352 <HAL_UART_Receive+0xdc>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800432c:	d10d      	bne.n	800434a <HAL_UART_Receive+0xd4>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <HAL_UART_Receive+0xca>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	227f      	movs	r2, #127	; 0x7f
 800433a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800433e:	e008      	b.n	8004352 <HAL_UART_Receive+0xdc>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	223f      	movs	r2, #63	; 0x3f
 8004344:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004348:	e003      	b.n	8004352 <HAL_UART_Receive+0xdc>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004358:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004362:	d108      	bne.n	8004376 <HAL_UART_Receive+0x100>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e003      	b.n	800437e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004386:	e033      	b.n	80043f0 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2200      	movs	r2, #0
 8004390:	2120      	movs	r1, #32
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fbad 	bl	8004af2 <UART_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e032      	b.n	8004408 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10c      	bne.n	80043c2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	8a7b      	ldrh	r3, [r7, #18]
 80043b2:	4013      	ands	r3, r2
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	3302      	adds	r3, #2
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e00d      	b.n	80043de <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	8a7b      	ldrh	r3, [r7, #18]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	4013      	ands	r3, r2
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	3301      	adds	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1c5      	bne.n	8004388 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3720      	adds	r7, #32
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004410:	b5b0      	push	{r4, r5, r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4313      	orrs	r3, r2
 8004432:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4bad      	ldr	r3, [pc, #692]	; (80046f0 <UART_SetConfig+0x2e0>)
 800443c:	4013      	ands	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	69f9      	ldr	r1, [r7, #28]
 8004444:	430b      	orrs	r3, r1
 8004446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4aa2      	ldr	r2, [pc, #648]	; (80046f4 <UART_SetConfig+0x2e4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	4313      	orrs	r3, r2
 8004476:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a99      	ldr	r2, [pc, #612]	; (80046f8 <UART_SetConfig+0x2e8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d121      	bne.n	80044da <UART_SetConfig+0xca>
 8004496:	4b99      	ldr	r3, [pc, #612]	; (80046fc <UART_SetConfig+0x2ec>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d817      	bhi.n	80044d4 <UART_SetConfig+0xc4>
 80044a4:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x9c>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044c9 	.word	0x080044c9
 80044b4:	080044c3 	.word	0x080044c3
 80044b8:	080044cf 	.word	0x080044cf
 80044bc:	2301      	movs	r3, #1
 80044be:	76fb      	strb	r3, [r7, #27]
 80044c0:	e0e7      	b.n	8004692 <UART_SetConfig+0x282>
 80044c2:	2302      	movs	r3, #2
 80044c4:	76fb      	strb	r3, [r7, #27]
 80044c6:	e0e4      	b.n	8004692 <UART_SetConfig+0x282>
 80044c8:	2304      	movs	r3, #4
 80044ca:	76fb      	strb	r3, [r7, #27]
 80044cc:	e0e1      	b.n	8004692 <UART_SetConfig+0x282>
 80044ce:	2308      	movs	r3, #8
 80044d0:	76fb      	strb	r3, [r7, #27]
 80044d2:	e0de      	b.n	8004692 <UART_SetConfig+0x282>
 80044d4:	2310      	movs	r3, #16
 80044d6:	76fb      	strb	r3, [r7, #27]
 80044d8:	e0db      	b.n	8004692 <UART_SetConfig+0x282>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a88      	ldr	r2, [pc, #544]	; (8004700 <UART_SetConfig+0x2f0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d132      	bne.n	800454a <UART_SetConfig+0x13a>
 80044e4:	4b85      	ldr	r3, [pc, #532]	; (80046fc <UART_SetConfig+0x2ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d828      	bhi.n	8004544 <UART_SetConfig+0x134>
 80044f2:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0xe8>)
 80044f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	08004545 	.word	0x08004545
 8004500:	08004545 	.word	0x08004545
 8004504:	08004545 	.word	0x08004545
 8004508:	08004539 	.word	0x08004539
 800450c:	08004545 	.word	0x08004545
 8004510:	08004545 	.word	0x08004545
 8004514:	08004545 	.word	0x08004545
 8004518:	08004533 	.word	0x08004533
 800451c:	08004545 	.word	0x08004545
 8004520:	08004545 	.word	0x08004545
 8004524:	08004545 	.word	0x08004545
 8004528:	0800453f 	.word	0x0800453f
 800452c:	2300      	movs	r3, #0
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	e0af      	b.n	8004692 <UART_SetConfig+0x282>
 8004532:	2302      	movs	r3, #2
 8004534:	76fb      	strb	r3, [r7, #27]
 8004536:	e0ac      	b.n	8004692 <UART_SetConfig+0x282>
 8004538:	2304      	movs	r3, #4
 800453a:	76fb      	strb	r3, [r7, #27]
 800453c:	e0a9      	b.n	8004692 <UART_SetConfig+0x282>
 800453e:	2308      	movs	r3, #8
 8004540:	76fb      	strb	r3, [r7, #27]
 8004542:	e0a6      	b.n	8004692 <UART_SetConfig+0x282>
 8004544:	2310      	movs	r3, #16
 8004546:	76fb      	strb	r3, [r7, #27]
 8004548:	e0a3      	b.n	8004692 <UART_SetConfig+0x282>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6d      	ldr	r2, [pc, #436]	; (8004704 <UART_SetConfig+0x2f4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d120      	bne.n	8004596 <UART_SetConfig+0x186>
 8004554:	4b69      	ldr	r3, [pc, #420]	; (80046fc <UART_SetConfig+0x2ec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800455e:	2b30      	cmp	r3, #48	; 0x30
 8004560:	d013      	beq.n	800458a <UART_SetConfig+0x17a>
 8004562:	2b30      	cmp	r3, #48	; 0x30
 8004564:	d814      	bhi.n	8004590 <UART_SetConfig+0x180>
 8004566:	2b20      	cmp	r3, #32
 8004568:	d009      	beq.n	800457e <UART_SetConfig+0x16e>
 800456a:	2b20      	cmp	r3, #32
 800456c:	d810      	bhi.n	8004590 <UART_SetConfig+0x180>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <UART_SetConfig+0x168>
 8004572:	2b10      	cmp	r3, #16
 8004574:	d006      	beq.n	8004584 <UART_SetConfig+0x174>
 8004576:	e00b      	b.n	8004590 <UART_SetConfig+0x180>
 8004578:	2300      	movs	r3, #0
 800457a:	76fb      	strb	r3, [r7, #27]
 800457c:	e089      	b.n	8004692 <UART_SetConfig+0x282>
 800457e:	2302      	movs	r3, #2
 8004580:	76fb      	strb	r3, [r7, #27]
 8004582:	e086      	b.n	8004692 <UART_SetConfig+0x282>
 8004584:	2304      	movs	r3, #4
 8004586:	76fb      	strb	r3, [r7, #27]
 8004588:	e083      	b.n	8004692 <UART_SetConfig+0x282>
 800458a:	2308      	movs	r3, #8
 800458c:	76fb      	strb	r3, [r7, #27]
 800458e:	e080      	b.n	8004692 <UART_SetConfig+0x282>
 8004590:	2310      	movs	r3, #16
 8004592:	76fb      	strb	r3, [r7, #27]
 8004594:	e07d      	b.n	8004692 <UART_SetConfig+0x282>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5b      	ldr	r2, [pc, #364]	; (8004708 <UART_SetConfig+0x2f8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d120      	bne.n	80045e2 <UART_SetConfig+0x1d2>
 80045a0:	4b56      	ldr	r3, [pc, #344]	; (80046fc <UART_SetConfig+0x2ec>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045aa:	2bc0      	cmp	r3, #192	; 0xc0
 80045ac:	d013      	beq.n	80045d6 <UART_SetConfig+0x1c6>
 80045ae:	2bc0      	cmp	r3, #192	; 0xc0
 80045b0:	d814      	bhi.n	80045dc <UART_SetConfig+0x1cc>
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d009      	beq.n	80045ca <UART_SetConfig+0x1ba>
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d810      	bhi.n	80045dc <UART_SetConfig+0x1cc>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <UART_SetConfig+0x1b4>
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d006      	beq.n	80045d0 <UART_SetConfig+0x1c0>
 80045c2:	e00b      	b.n	80045dc <UART_SetConfig+0x1cc>
 80045c4:	2300      	movs	r3, #0
 80045c6:	76fb      	strb	r3, [r7, #27]
 80045c8:	e063      	b.n	8004692 <UART_SetConfig+0x282>
 80045ca:	2302      	movs	r3, #2
 80045cc:	76fb      	strb	r3, [r7, #27]
 80045ce:	e060      	b.n	8004692 <UART_SetConfig+0x282>
 80045d0:	2304      	movs	r3, #4
 80045d2:	76fb      	strb	r3, [r7, #27]
 80045d4:	e05d      	b.n	8004692 <UART_SetConfig+0x282>
 80045d6:	2308      	movs	r3, #8
 80045d8:	76fb      	strb	r3, [r7, #27]
 80045da:	e05a      	b.n	8004692 <UART_SetConfig+0x282>
 80045dc:	2310      	movs	r3, #16
 80045de:	76fb      	strb	r3, [r7, #27]
 80045e0:	e057      	b.n	8004692 <UART_SetConfig+0x282>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a49      	ldr	r2, [pc, #292]	; (800470c <UART_SetConfig+0x2fc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d125      	bne.n	8004638 <UART_SetConfig+0x228>
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <UART_SetConfig+0x2ec>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fa:	d017      	beq.n	800462c <UART_SetConfig+0x21c>
 80045fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004600:	d817      	bhi.n	8004632 <UART_SetConfig+0x222>
 8004602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004606:	d00b      	beq.n	8004620 <UART_SetConfig+0x210>
 8004608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460c:	d811      	bhi.n	8004632 <UART_SetConfig+0x222>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <UART_SetConfig+0x20a>
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d006      	beq.n	8004626 <UART_SetConfig+0x216>
 8004618:	e00b      	b.n	8004632 <UART_SetConfig+0x222>
 800461a:	2300      	movs	r3, #0
 800461c:	76fb      	strb	r3, [r7, #27]
 800461e:	e038      	b.n	8004692 <UART_SetConfig+0x282>
 8004620:	2302      	movs	r3, #2
 8004622:	76fb      	strb	r3, [r7, #27]
 8004624:	e035      	b.n	8004692 <UART_SetConfig+0x282>
 8004626:	2304      	movs	r3, #4
 8004628:	76fb      	strb	r3, [r7, #27]
 800462a:	e032      	b.n	8004692 <UART_SetConfig+0x282>
 800462c:	2308      	movs	r3, #8
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e02f      	b.n	8004692 <UART_SetConfig+0x282>
 8004632:	2310      	movs	r3, #16
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e02c      	b.n	8004692 <UART_SetConfig+0x282>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <UART_SetConfig+0x2e4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d125      	bne.n	800468e <UART_SetConfig+0x27e>
 8004642:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <UART_SetConfig+0x2ec>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800464c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004650:	d017      	beq.n	8004682 <UART_SetConfig+0x272>
 8004652:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004656:	d817      	bhi.n	8004688 <UART_SetConfig+0x278>
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465c:	d00b      	beq.n	8004676 <UART_SetConfig+0x266>
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004662:	d811      	bhi.n	8004688 <UART_SetConfig+0x278>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <UART_SetConfig+0x260>
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466c:	d006      	beq.n	800467c <UART_SetConfig+0x26c>
 800466e:	e00b      	b.n	8004688 <UART_SetConfig+0x278>
 8004670:	2300      	movs	r3, #0
 8004672:	76fb      	strb	r3, [r7, #27]
 8004674:	e00d      	b.n	8004692 <UART_SetConfig+0x282>
 8004676:	2302      	movs	r3, #2
 8004678:	76fb      	strb	r3, [r7, #27]
 800467a:	e00a      	b.n	8004692 <UART_SetConfig+0x282>
 800467c:	2304      	movs	r3, #4
 800467e:	76fb      	strb	r3, [r7, #27]
 8004680:	e007      	b.n	8004692 <UART_SetConfig+0x282>
 8004682:	2308      	movs	r3, #8
 8004684:	76fb      	strb	r3, [r7, #27]
 8004686:	e004      	b.n	8004692 <UART_SetConfig+0x282>
 8004688:	2310      	movs	r3, #16
 800468a:	76fb      	strb	r3, [r7, #27]
 800468c:	e001      	b.n	8004692 <UART_SetConfig+0x282>
 800468e:	2310      	movs	r3, #16
 8004690:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <UART_SetConfig+0x2e4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	f040 8087 	bne.w	80047ac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800469e:	7efb      	ldrb	r3, [r7, #27]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d837      	bhi.n	8004714 <UART_SetConfig+0x304>
 80046a4:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0x29c>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046d1 	.word	0x080046d1
 80046b0:	08004715 	.word	0x08004715
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	08004715 	.word	0x08004715
 80046bc:	080046df 	.word	0x080046df
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004715 	.word	0x08004715
 80046c8:	08004715 	.word	0x08004715
 80046cc:	080046e7 	.word	0x080046e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d0:	f7fe ffa8 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 80046d4:	6178      	str	r0, [r7, #20]
        break;
 80046d6:	e022      	b.n	800471e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <UART_SetConfig+0x300>)
 80046da:	617b      	str	r3, [r7, #20]
        break;
 80046dc:	e01f      	b.n	800471e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fe ff09 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80046e2:	6178      	str	r0, [r7, #20]
        break;
 80046e4:	e01b      	b.n	800471e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ea:	617b      	str	r3, [r7, #20]
        break;
 80046ec:	e017      	b.n	800471e <UART_SetConfig+0x30e>
 80046ee:	bf00      	nop
 80046f0:	efff69f3 	.word	0xefff69f3
 80046f4:	40008000 	.word	0x40008000
 80046f8:	40013800 	.word	0x40013800
 80046fc:	40021000 	.word	0x40021000
 8004700:	40004400 	.word	0x40004400
 8004704:	40004800 	.word	0x40004800
 8004708:	40004c00 	.word	0x40004c00
 800470c:	40005000 	.word	0x40005000
 8004710:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	76bb      	strb	r3, [r7, #26]
        break;
 800471c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80f1 	beq.w	8004908 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d305      	bcc.n	8004742 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	429a      	cmp	r2, r3
 8004740:	d902      	bls.n	8004748 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	76bb      	strb	r3, [r7, #26]
 8004746:	e0df      	b.n	8004908 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4618      	mov	r0, r3
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	020b      	lsls	r3, r1, #8
 800475a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800475e:	0202      	lsls	r2, r0, #8
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	6849      	ldr	r1, [r1, #4]
 8004764:	0849      	lsrs	r1, r1, #1
 8004766:	4608      	mov	r0, r1
 8004768:	f04f 0100 	mov.w	r1, #0
 800476c:	1814      	adds	r4, r2, r0
 800476e:	eb43 0501 	adc.w	r5, r3, r1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	461a      	mov	r2, r3
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	4620      	mov	r0, r4
 800477e:	4629      	mov	r1, r5
 8004780:	f7fc fa82 	bl	8000c88 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4613      	mov	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004792:	d308      	bcc.n	80047a6 <UART_SetConfig+0x396>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d204      	bcs.n	80047a6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e0b0      	b.n	8004908 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	76bb      	strb	r3, [r7, #26]
 80047aa:	e0ad      	b.n	8004908 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b4:	d15c      	bne.n	8004870 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80047b6:	7efb      	ldrb	r3, [r7, #27]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d828      	bhi.n	800480e <UART_SetConfig+0x3fe>
 80047bc:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <UART_SetConfig+0x3b4>)
 80047be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c2:	bf00      	nop
 80047c4:	080047e9 	.word	0x080047e9
 80047c8:	080047f1 	.word	0x080047f1
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	0800480f 	.word	0x0800480f
 80047d4:	080047ff 	.word	0x080047ff
 80047d8:	0800480f 	.word	0x0800480f
 80047dc:	0800480f 	.word	0x0800480f
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	08004807 	.word	0x08004807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e8:	f7fe ff1c 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 80047ec:	6178      	str	r0, [r7, #20]
        break;
 80047ee:	e013      	b.n	8004818 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7fe ff2e 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 80047f4:	6178      	str	r0, [r7, #20]
        break;
 80047f6:	e00f      	b.n	8004818 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f8:	4b49      	ldr	r3, [pc, #292]	; (8004920 <UART_SetConfig+0x510>)
 80047fa:	617b      	str	r3, [r7, #20]
        break;
 80047fc:	e00c      	b.n	8004818 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fe:	f7fe fe79 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 8004802:	6178      	str	r0, [r7, #20]
        break;
 8004804:	e008      	b.n	8004818 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	617b      	str	r3, [r7, #20]
        break;
 800480c:	e004      	b.n	8004818 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	76bb      	strb	r3, [r7, #26]
        break;
 8004816:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d074      	beq.n	8004908 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	005a      	lsls	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	b29b      	uxth	r3, r3
 8004834:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b0f      	cmp	r3, #15
 800483a:	d916      	bls.n	800486a <UART_SetConfig+0x45a>
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004842:	d212      	bcs.n	800486a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f023 030f 	bic.w	r3, r3, #15
 800484c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	b29b      	uxth	r3, r3
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	b29a      	uxth	r2, r3
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	4313      	orrs	r3, r2
 800485e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	89fa      	ldrh	r2, [r7, #14]
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	e04e      	b.n	8004908 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	76bb      	strb	r3, [r7, #26]
 800486e:	e04b      	b.n	8004908 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004870:	7efb      	ldrb	r3, [r7, #27]
 8004872:	2b08      	cmp	r3, #8
 8004874:	d827      	bhi.n	80048c6 <UART_SetConfig+0x4b6>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <UART_SetConfig+0x46c>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
 8004888:	080048c7 	.word	0x080048c7
 800488c:	080048b7 	.word	0x080048b7
 8004890:	080048c7 	.word	0x080048c7
 8004894:	080048c7 	.word	0x080048c7
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048bf 	.word	0x080048bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a0:	f7fe fec0 	bl	8003624 <HAL_RCC_GetPCLK1Freq>
 80048a4:	6178      	str	r0, [r7, #20]
        break;
 80048a6:	e013      	b.n	80048d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a8:	f7fe fed2 	bl	8003650 <HAL_RCC_GetPCLK2Freq>
 80048ac:	6178      	str	r0, [r7, #20]
        break;
 80048ae:	e00f      	b.n	80048d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <UART_SetConfig+0x510>)
 80048b2:	617b      	str	r3, [r7, #20]
        break;
 80048b4:	e00c      	b.n	80048d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fe fe1d 	bl	80034f4 <HAL_RCC_GetSysClockFreq>
 80048ba:	6178      	str	r0, [r7, #20]
        break;
 80048bc:	e008      	b.n	80048d0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c2:	617b      	str	r3, [r7, #20]
        break;
 80048c4:	e004      	b.n	80048d0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	76bb      	strb	r3, [r7, #26]
        break;
 80048ce:	bf00      	nop
    }

    if (pclk != 0U)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	085a      	lsrs	r2, r3, #1
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	441a      	add	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b0f      	cmp	r3, #15
 80048f0:	d908      	bls.n	8004904 <UART_SetConfig+0x4f4>
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d204      	bcs.n	8004904 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	e001      	b.n	8004908 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004914:	7ebb      	ldrb	r3, [r7, #26]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bdb0      	pop	{r4, r5, r7, pc}
 800491e:	bf00      	nop
 8004920:	00f42400 	.word	0x00f42400

08004924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01a      	beq.n	8004a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d10a      	bne.n	8004a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a76:	f7fd f803 	bl	8001a80 <HAL_GetTick>
 8004a7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	d10e      	bne.n	8004aa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f82a 	bl	8004af2 <UART_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e020      	b.n	8004aea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d10e      	bne.n	8004ad4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f814 	bl	8004af2 <UART_WaitOnFlagUntilTimeout>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e00a      	b.n	8004aea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	4613      	mov	r3, r2
 8004b00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b02:	e05d      	b.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d059      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0c:	f7fc ffb8 	bl	8001a80 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d302      	bcc.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d11b      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b30:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e042      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02b      	beq.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	d123      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b90:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e00f      	b.n	8004be0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d092      	beq.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <atoi>:
 8004be8:	220a      	movs	r2, #10
 8004bea:	2100      	movs	r1, #0
 8004bec:	f001 bd86 	b.w	80066fc <strtol>

08004bf0 <__errno>:
 8004bf0:	4b01      	ldr	r3, [pc, #4]	; (8004bf8 <__errno+0x8>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	2000000c 	.word	0x2000000c

08004bfc <__libc_init_array>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4d0d      	ldr	r5, [pc, #52]	; (8004c34 <__libc_init_array+0x38>)
 8004c00:	4c0d      	ldr	r4, [pc, #52]	; (8004c38 <__libc_init_array+0x3c>)
 8004c02:	1b64      	subs	r4, r4, r5
 8004c04:	10a4      	asrs	r4, r4, #2
 8004c06:	2600      	movs	r6, #0
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	d109      	bne.n	8004c20 <__libc_init_array+0x24>
 8004c0c:	4d0b      	ldr	r5, [pc, #44]	; (8004c3c <__libc_init_array+0x40>)
 8004c0e:	4c0c      	ldr	r4, [pc, #48]	; (8004c40 <__libc_init_array+0x44>)
 8004c10:	f004 fc4e 	bl	80094b0 <_init>
 8004c14:	1b64      	subs	r4, r4, r5
 8004c16:	10a4      	asrs	r4, r4, #2
 8004c18:	2600      	movs	r6, #0
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d105      	bne.n	8004c2a <__libc_init_array+0x2e>
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c24:	4798      	blx	r3
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7ee      	b.n	8004c08 <__libc_init_array+0xc>
 8004c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2e:	4798      	blx	r3
 8004c30:	3601      	adds	r6, #1
 8004c32:	e7f2      	b.n	8004c1a <__libc_init_array+0x1e>
 8004c34:	08009a24 	.word	0x08009a24
 8004c38:	08009a24 	.word	0x08009a24
 8004c3c:	08009a24 	.word	0x08009a24
 8004c40:	08009a28 	.word	0x08009a28

08004c44 <memset>:
 8004c44:	4402      	add	r2, r0
 8004c46:	4603      	mov	r3, r0
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <memset+0xa>
 8004c4c:	4770      	bx	lr
 8004c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c52:	e7f9      	b.n	8004c48 <memset+0x4>

08004c54 <__cvt>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	ec55 4b10 	vmov	r4, r5, d0
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	460e      	mov	r6, r1
 8004c60:	4619      	mov	r1, r3
 8004c62:	462b      	mov	r3, r5
 8004c64:	bfbb      	ittet	lt
 8004c66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c6a:	461d      	movlt	r5, r3
 8004c6c:	2300      	movge	r3, #0
 8004c6e:	232d      	movlt	r3, #45	; 0x2d
 8004c70:	700b      	strb	r3, [r1, #0]
 8004c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c78:	4691      	mov	r9, r2
 8004c7a:	f023 0820 	bic.w	r8, r3, #32
 8004c7e:	bfbc      	itt	lt
 8004c80:	4622      	movlt	r2, r4
 8004c82:	4614      	movlt	r4, r2
 8004c84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c88:	d005      	beq.n	8004c96 <__cvt+0x42>
 8004c8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c8e:	d100      	bne.n	8004c92 <__cvt+0x3e>
 8004c90:	3601      	adds	r6, #1
 8004c92:	2102      	movs	r1, #2
 8004c94:	e000      	b.n	8004c98 <__cvt+0x44>
 8004c96:	2103      	movs	r1, #3
 8004c98:	ab03      	add	r3, sp, #12
 8004c9a:	9301      	str	r3, [sp, #4]
 8004c9c:	ab02      	add	r3, sp, #8
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	ec45 4b10 	vmov	d0, r4, r5
 8004ca4:	4653      	mov	r3, sl
 8004ca6:	4632      	mov	r2, r6
 8004ca8:	f001 fdbe 	bl	8006828 <_dtoa_r>
 8004cac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	d102      	bne.n	8004cba <__cvt+0x66>
 8004cb4:	f019 0f01 	tst.w	r9, #1
 8004cb8:	d022      	beq.n	8004d00 <__cvt+0xac>
 8004cba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cbe:	eb07 0906 	add.w	r9, r7, r6
 8004cc2:	d110      	bne.n	8004ce6 <__cvt+0x92>
 8004cc4:	783b      	ldrb	r3, [r7, #0]
 8004cc6:	2b30      	cmp	r3, #48	; 0x30
 8004cc8:	d10a      	bne.n	8004ce0 <__cvt+0x8c>
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4620      	mov	r0, r4
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fef9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cd6:	b918      	cbnz	r0, 8004ce0 <__cvt+0x8c>
 8004cd8:	f1c6 0601 	rsb	r6, r6, #1
 8004cdc:	f8ca 6000 	str.w	r6, [sl]
 8004ce0:	f8da 3000 	ldr.w	r3, [sl]
 8004ce4:	4499      	add	r9, r3
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4620      	mov	r0, r4
 8004cec:	4629      	mov	r1, r5
 8004cee:	f7fb feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cf2:	b108      	cbz	r0, 8004cf8 <__cvt+0xa4>
 8004cf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004cf8:	2230      	movs	r2, #48	; 0x30
 8004cfa:	9b03      	ldr	r3, [sp, #12]
 8004cfc:	454b      	cmp	r3, r9
 8004cfe:	d307      	bcc.n	8004d10 <__cvt+0xbc>
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d04:	1bdb      	subs	r3, r3, r7
 8004d06:	4638      	mov	r0, r7
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	b004      	add	sp, #16
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	1c59      	adds	r1, r3, #1
 8004d12:	9103      	str	r1, [sp, #12]
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e7f0      	b.n	8004cfa <__cvt+0xa6>

08004d18 <__exponent>:
 8004d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	bfb8      	it	lt
 8004d20:	4249      	neglt	r1, r1
 8004d22:	f803 2b02 	strb.w	r2, [r3], #2
 8004d26:	bfb4      	ite	lt
 8004d28:	222d      	movlt	r2, #45	; 0x2d
 8004d2a:	222b      	movge	r2, #43	; 0x2b
 8004d2c:	2909      	cmp	r1, #9
 8004d2e:	7042      	strb	r2, [r0, #1]
 8004d30:	dd2a      	ble.n	8004d88 <__exponent+0x70>
 8004d32:	f10d 0407 	add.w	r4, sp, #7
 8004d36:	46a4      	mov	ip, r4
 8004d38:	270a      	movs	r7, #10
 8004d3a:	46a6      	mov	lr, r4
 8004d3c:	460a      	mov	r2, r1
 8004d3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d42:	fb07 1516 	mls	r5, r7, r6, r1
 8004d46:	3530      	adds	r5, #48	; 0x30
 8004d48:	2a63      	cmp	r2, #99	; 0x63
 8004d4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d52:	4631      	mov	r1, r6
 8004d54:	dcf1      	bgt.n	8004d3a <__exponent+0x22>
 8004d56:	3130      	adds	r1, #48	; 0x30
 8004d58:	f1ae 0502 	sub.w	r5, lr, #2
 8004d5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d60:	1c44      	adds	r4, r0, #1
 8004d62:	4629      	mov	r1, r5
 8004d64:	4561      	cmp	r1, ip
 8004d66:	d30a      	bcc.n	8004d7e <__exponent+0x66>
 8004d68:	f10d 0209 	add.w	r2, sp, #9
 8004d6c:	eba2 020e 	sub.w	r2, r2, lr
 8004d70:	4565      	cmp	r5, ip
 8004d72:	bf88      	it	hi
 8004d74:	2200      	movhi	r2, #0
 8004d76:	4413      	add	r3, r2
 8004d78:	1a18      	subs	r0, r3, r0
 8004d7a:	b003      	add	sp, #12
 8004d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d86:	e7ed      	b.n	8004d64 <__exponent+0x4c>
 8004d88:	2330      	movs	r3, #48	; 0x30
 8004d8a:	3130      	adds	r1, #48	; 0x30
 8004d8c:	7083      	strb	r3, [r0, #2]
 8004d8e:	70c1      	strb	r1, [r0, #3]
 8004d90:	1d03      	adds	r3, r0, #4
 8004d92:	e7f1      	b.n	8004d78 <__exponent+0x60>

08004d94 <_printf_float>:
 8004d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d98:	ed2d 8b02 	vpush	{d8}
 8004d9c:	b08d      	sub	sp, #52	; 0x34
 8004d9e:	460c      	mov	r4, r1
 8004da0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004da4:	4616      	mov	r6, r2
 8004da6:	461f      	mov	r7, r3
 8004da8:	4605      	mov	r5, r0
 8004daa:	f002 fe99 	bl	8007ae0 <_localeconv_r>
 8004dae:	f8d0 a000 	ldr.w	sl, [r0]
 8004db2:	4650      	mov	r0, sl
 8004db4:	f7fb fa0c 	bl	80001d0 <strlen>
 8004db8:	2300      	movs	r3, #0
 8004dba:	930a      	str	r3, [sp, #40]	; 0x28
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	9305      	str	r3, [sp, #20]
 8004dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004dc8:	3307      	adds	r3, #7
 8004dca:	f023 0307 	bic.w	r3, r3, #7
 8004dce:	f103 0208 	add.w	r2, r3, #8
 8004dd2:	f8c8 2000 	str.w	r2, [r8]
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004de2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004de6:	9307      	str	r3, [sp, #28]
 8004de8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004dec:	ee08 0a10 	vmov	s16, r0
 8004df0:	4b9f      	ldr	r3, [pc, #636]	; (8005070 <_printf_float+0x2dc>)
 8004df2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004df6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfa:	f7fb fe97 	bl	8000b2c <__aeabi_dcmpun>
 8004dfe:	bb88      	cbnz	r0, 8004e64 <_printf_float+0xd0>
 8004e00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e04:	4b9a      	ldr	r3, [pc, #616]	; (8005070 <_printf_float+0x2dc>)
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	f7fb fe71 	bl	8000af0 <__aeabi_dcmple>
 8004e0e:	bb48      	cbnz	r0, 8004e64 <_printf_float+0xd0>
 8004e10:	2200      	movs	r2, #0
 8004e12:	2300      	movs	r3, #0
 8004e14:	4640      	mov	r0, r8
 8004e16:	4649      	mov	r1, r9
 8004e18:	f7fb fe60 	bl	8000adc <__aeabi_dcmplt>
 8004e1c:	b110      	cbz	r0, 8004e24 <_printf_float+0x90>
 8004e1e:	232d      	movs	r3, #45	; 0x2d
 8004e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e24:	4b93      	ldr	r3, [pc, #588]	; (8005074 <_printf_float+0x2e0>)
 8004e26:	4894      	ldr	r0, [pc, #592]	; (8005078 <_printf_float+0x2e4>)
 8004e28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004e2c:	bf94      	ite	ls
 8004e2e:	4698      	movls	r8, r3
 8004e30:	4680      	movhi	r8, r0
 8004e32:	2303      	movs	r3, #3
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	9b05      	ldr	r3, [sp, #20]
 8004e38:	f023 0204 	bic.w	r2, r3, #4
 8004e3c:	6022      	str	r2, [r4, #0]
 8004e3e:	f04f 0900 	mov.w	r9, #0
 8004e42:	9700      	str	r7, [sp, #0]
 8004e44:	4633      	mov	r3, r6
 8004e46:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 f9d8 	bl	8005200 <_printf_common>
 8004e50:	3001      	adds	r0, #1
 8004e52:	f040 8090 	bne.w	8004f76 <_printf_float+0x1e2>
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	b00d      	add	sp, #52	; 0x34
 8004e5c:	ecbd 8b02 	vpop	{d8}
 8004e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	4640      	mov	r0, r8
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	f7fb fe5e 	bl	8000b2c <__aeabi_dcmpun>
 8004e70:	b140      	cbz	r0, 8004e84 <_printf_float+0xf0>
 8004e72:	464b      	mov	r3, r9
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bfbc      	itt	lt
 8004e78:	232d      	movlt	r3, #45	; 0x2d
 8004e7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e7e:	487f      	ldr	r0, [pc, #508]	; (800507c <_printf_float+0x2e8>)
 8004e80:	4b7f      	ldr	r3, [pc, #508]	; (8005080 <_printf_float+0x2ec>)
 8004e82:	e7d1      	b.n	8004e28 <_printf_float+0x94>
 8004e84:	6863      	ldr	r3, [r4, #4]
 8004e86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e8a:	9206      	str	r2, [sp, #24]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	d13f      	bne.n	8004f10 <_printf_float+0x17c>
 8004e90:	2306      	movs	r3, #6
 8004e92:	6063      	str	r3, [r4, #4]
 8004e94:	9b05      	ldr	r3, [sp, #20]
 8004e96:	6861      	ldr	r1, [r4, #4]
 8004e98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	9303      	str	r3, [sp, #12]
 8004ea0:	ab0a      	add	r3, sp, #40	; 0x28
 8004ea2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ea6:	ab09      	add	r3, sp, #36	; 0x24
 8004ea8:	ec49 8b10 	vmov	d0, r8, r9
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	6022      	str	r2, [r4, #0]
 8004eb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f7ff fecd 	bl	8004c54 <__cvt>
 8004eba:	9b06      	ldr	r3, [sp, #24]
 8004ebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ebe:	2b47      	cmp	r3, #71	; 0x47
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	d108      	bne.n	8004ed6 <_printf_float+0x142>
 8004ec4:	1cc8      	adds	r0, r1, #3
 8004ec6:	db02      	blt.n	8004ece <_printf_float+0x13a>
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	dd41      	ble.n	8004f52 <_printf_float+0x1be>
 8004ece:	f1ab 0b02 	sub.w	fp, fp, #2
 8004ed2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ed6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004eda:	d820      	bhi.n	8004f1e <_printf_float+0x18a>
 8004edc:	3901      	subs	r1, #1
 8004ede:	465a      	mov	r2, fp
 8004ee0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ee4:	9109      	str	r1, [sp, #36]	; 0x24
 8004ee6:	f7ff ff17 	bl	8004d18 <__exponent>
 8004eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eec:	1813      	adds	r3, r2, r0
 8004eee:	2a01      	cmp	r2, #1
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	6123      	str	r3, [r4, #16]
 8004ef4:	dc02      	bgt.n	8004efc <_printf_float+0x168>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	07d2      	lsls	r2, r2, #31
 8004efa:	d501      	bpl.n	8004f00 <_printf_float+0x16c>
 8004efc:	3301      	adds	r3, #1
 8004efe:	6123      	str	r3, [r4, #16]
 8004f00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d09c      	beq.n	8004e42 <_printf_float+0xae>
 8004f08:	232d      	movs	r3, #45	; 0x2d
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0e:	e798      	b.n	8004e42 <_printf_float+0xae>
 8004f10:	9a06      	ldr	r2, [sp, #24]
 8004f12:	2a47      	cmp	r2, #71	; 0x47
 8004f14:	d1be      	bne.n	8004e94 <_printf_float+0x100>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1bc      	bne.n	8004e94 <_printf_float+0x100>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7b9      	b.n	8004e92 <_printf_float+0xfe>
 8004f1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004f22:	d118      	bne.n	8004f56 <_printf_float+0x1c2>
 8004f24:	2900      	cmp	r1, #0
 8004f26:	6863      	ldr	r3, [r4, #4]
 8004f28:	dd0b      	ble.n	8004f42 <_printf_float+0x1ae>
 8004f2a:	6121      	str	r1, [r4, #16]
 8004f2c:	b913      	cbnz	r3, 8004f34 <_printf_float+0x1a0>
 8004f2e:	6822      	ldr	r2, [r4, #0]
 8004f30:	07d0      	lsls	r0, r2, #31
 8004f32:	d502      	bpl.n	8004f3a <_printf_float+0x1a6>
 8004f34:	3301      	adds	r3, #1
 8004f36:	440b      	add	r3, r1
 8004f38:	6123      	str	r3, [r4, #16]
 8004f3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f3c:	f04f 0900 	mov.w	r9, #0
 8004f40:	e7de      	b.n	8004f00 <_printf_float+0x16c>
 8004f42:	b913      	cbnz	r3, 8004f4a <_printf_float+0x1b6>
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	07d2      	lsls	r2, r2, #31
 8004f48:	d501      	bpl.n	8004f4e <_printf_float+0x1ba>
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	e7f4      	b.n	8004f38 <_printf_float+0x1a4>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e7f2      	b.n	8004f38 <_printf_float+0x1a4>
 8004f52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	db05      	blt.n	8004f68 <_printf_float+0x1d4>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	6121      	str	r1, [r4, #16]
 8004f60:	07d8      	lsls	r0, r3, #31
 8004f62:	d5ea      	bpl.n	8004f3a <_printf_float+0x1a6>
 8004f64:	1c4b      	adds	r3, r1, #1
 8004f66:	e7e7      	b.n	8004f38 <_printf_float+0x1a4>
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	bfd4      	ite	le
 8004f6c:	f1c1 0202 	rsble	r2, r1, #2
 8004f70:	2201      	movgt	r2, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	e7e0      	b.n	8004f38 <_printf_float+0x1a4>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	055a      	lsls	r2, r3, #21
 8004f7a:	d407      	bmi.n	8004f8c <_printf_float+0x1f8>
 8004f7c:	6923      	ldr	r3, [r4, #16]
 8004f7e:	4642      	mov	r2, r8
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	d12c      	bne.n	8004fe4 <_printf_float+0x250>
 8004f8a:	e764      	b.n	8004e56 <_printf_float+0xc2>
 8004f8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f90:	f240 80e0 	bls.w	8005154 <_printf_float+0x3c0>
 8004f94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f7fb fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d034      	beq.n	800500e <_printf_float+0x27a>
 8004fa4:	4a37      	ldr	r2, [pc, #220]	; (8005084 <_printf_float+0x2f0>)
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4628      	mov	r0, r5
 8004fac:	47b8      	blx	r7
 8004fae:	3001      	adds	r0, #1
 8004fb0:	f43f af51 	beq.w	8004e56 <_printf_float+0xc2>
 8004fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	db02      	blt.n	8004fc2 <_printf_float+0x22e>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	07d8      	lsls	r0, r3, #31
 8004fc0:	d510      	bpl.n	8004fe4 <_printf_float+0x250>
 8004fc2:	ee18 3a10 	vmov	r3, s16
 8004fc6:	4652      	mov	r2, sl
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	f43f af41 	beq.w	8004e56 <_printf_float+0xc2>
 8004fd4:	f04f 0800 	mov.w	r8, #0
 8004fd8:	f104 091a 	add.w	r9, r4, #26
 8004fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	4543      	cmp	r3, r8
 8004fe2:	dc09      	bgt.n	8004ff8 <_printf_float+0x264>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	079b      	lsls	r3, r3, #30
 8004fe8:	f100 8105 	bmi.w	80051f6 <_printf_float+0x462>
 8004fec:	68e0      	ldr	r0, [r4, #12]
 8004fee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ff0:	4298      	cmp	r0, r3
 8004ff2:	bfb8      	it	lt
 8004ff4:	4618      	movlt	r0, r3
 8004ff6:	e730      	b.n	8004e5a <_printf_float+0xc6>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	464a      	mov	r2, r9
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	f43f af27 	beq.w	8004e56 <_printf_float+0xc2>
 8005008:	f108 0801 	add.w	r8, r8, #1
 800500c:	e7e6      	b.n	8004fdc <_printf_float+0x248>
 800500e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	dc39      	bgt.n	8005088 <_printf_float+0x2f4>
 8005014:	4a1b      	ldr	r2, [pc, #108]	; (8005084 <_printf_float+0x2f0>)
 8005016:	2301      	movs	r3, #1
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	f43f af19 	beq.w	8004e56 <_printf_float+0xc2>
 8005024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005028:	4313      	orrs	r3, r2
 800502a:	d102      	bne.n	8005032 <_printf_float+0x29e>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	07d9      	lsls	r1, r3, #31
 8005030:	d5d8      	bpl.n	8004fe4 <_printf_float+0x250>
 8005032:	ee18 3a10 	vmov	r3, s16
 8005036:	4652      	mov	r2, sl
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	f43f af09 	beq.w	8004e56 <_printf_float+0xc2>
 8005044:	f04f 0900 	mov.w	r9, #0
 8005048:	f104 0a1a 	add.w	sl, r4, #26
 800504c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504e:	425b      	negs	r3, r3
 8005050:	454b      	cmp	r3, r9
 8005052:	dc01      	bgt.n	8005058 <_printf_float+0x2c4>
 8005054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005056:	e792      	b.n	8004f7e <_printf_float+0x1ea>
 8005058:	2301      	movs	r3, #1
 800505a:	4652      	mov	r2, sl
 800505c:	4631      	mov	r1, r6
 800505e:	4628      	mov	r0, r5
 8005060:	47b8      	blx	r7
 8005062:	3001      	adds	r0, #1
 8005064:	f43f aef7 	beq.w	8004e56 <_printf_float+0xc2>
 8005068:	f109 0901 	add.w	r9, r9, #1
 800506c:	e7ee      	b.n	800504c <_printf_float+0x2b8>
 800506e:	bf00      	nop
 8005070:	7fefffff 	.word	0x7fefffff
 8005074:	0800956c 	.word	0x0800956c
 8005078:	08009570 	.word	0x08009570
 800507c:	08009578 	.word	0x08009578
 8005080:	08009574 	.word	0x08009574
 8005084:	0800957c 	.word	0x0800957c
 8005088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800508a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800508c:	429a      	cmp	r2, r3
 800508e:	bfa8      	it	ge
 8005090:	461a      	movge	r2, r3
 8005092:	2a00      	cmp	r2, #0
 8005094:	4691      	mov	r9, r2
 8005096:	dc37      	bgt.n	8005108 <_printf_float+0x374>
 8005098:	f04f 0b00 	mov.w	fp, #0
 800509c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050a0:	f104 021a 	add.w	r2, r4, #26
 80050a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	eba3 0309 	sub.w	r3, r3, r9
 80050ac:	455b      	cmp	r3, fp
 80050ae:	dc33      	bgt.n	8005118 <_printf_float+0x384>
 80050b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050b4:	429a      	cmp	r2, r3
 80050b6:	db3b      	blt.n	8005130 <_printf_float+0x39c>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	07da      	lsls	r2, r3, #31
 80050bc:	d438      	bmi.n	8005130 <_printf_float+0x39c>
 80050be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050c0:	9b05      	ldr	r3, [sp, #20]
 80050c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	eba2 0901 	sub.w	r9, r2, r1
 80050ca:	4599      	cmp	r9, r3
 80050cc:	bfa8      	it	ge
 80050ce:	4699      	movge	r9, r3
 80050d0:	f1b9 0f00 	cmp.w	r9, #0
 80050d4:	dc35      	bgt.n	8005142 <_printf_float+0x3ae>
 80050d6:	f04f 0800 	mov.w	r8, #0
 80050da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050de:	f104 0a1a 	add.w	sl, r4, #26
 80050e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	eba3 0309 	sub.w	r3, r3, r9
 80050ec:	4543      	cmp	r3, r8
 80050ee:	f77f af79 	ble.w	8004fe4 <_printf_float+0x250>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4652      	mov	r2, sl
 80050f6:	4631      	mov	r1, r6
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f aeaa 	beq.w	8004e56 <_printf_float+0xc2>
 8005102:	f108 0801 	add.w	r8, r8, #1
 8005106:	e7ec      	b.n	80050e2 <_printf_float+0x34e>
 8005108:	4613      	mov	r3, r2
 800510a:	4631      	mov	r1, r6
 800510c:	4642      	mov	r2, r8
 800510e:	4628      	mov	r0, r5
 8005110:	47b8      	blx	r7
 8005112:	3001      	adds	r0, #1
 8005114:	d1c0      	bne.n	8005098 <_printf_float+0x304>
 8005116:	e69e      	b.n	8004e56 <_printf_float+0xc2>
 8005118:	2301      	movs	r3, #1
 800511a:	4631      	mov	r1, r6
 800511c:	4628      	mov	r0, r5
 800511e:	9205      	str	r2, [sp, #20]
 8005120:	47b8      	blx	r7
 8005122:	3001      	adds	r0, #1
 8005124:	f43f ae97 	beq.w	8004e56 <_printf_float+0xc2>
 8005128:	9a05      	ldr	r2, [sp, #20]
 800512a:	f10b 0b01 	add.w	fp, fp, #1
 800512e:	e7b9      	b.n	80050a4 <_printf_float+0x310>
 8005130:	ee18 3a10 	vmov	r3, s16
 8005134:	4652      	mov	r2, sl
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	d1be      	bne.n	80050be <_printf_float+0x32a>
 8005140:	e689      	b.n	8004e56 <_printf_float+0xc2>
 8005142:	9a05      	ldr	r2, [sp, #20]
 8005144:	464b      	mov	r3, r9
 8005146:	4442      	add	r2, r8
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	d1c1      	bne.n	80050d6 <_printf_float+0x342>
 8005152:	e680      	b.n	8004e56 <_printf_float+0xc2>
 8005154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005156:	2a01      	cmp	r2, #1
 8005158:	dc01      	bgt.n	800515e <_printf_float+0x3ca>
 800515a:	07db      	lsls	r3, r3, #31
 800515c:	d538      	bpl.n	80051d0 <_printf_float+0x43c>
 800515e:	2301      	movs	r3, #1
 8005160:	4642      	mov	r2, r8
 8005162:	4631      	mov	r1, r6
 8005164:	4628      	mov	r0, r5
 8005166:	47b8      	blx	r7
 8005168:	3001      	adds	r0, #1
 800516a:	f43f ae74 	beq.w	8004e56 <_printf_float+0xc2>
 800516e:	ee18 3a10 	vmov	r3, s16
 8005172:	4652      	mov	r2, sl
 8005174:	4631      	mov	r1, r6
 8005176:	4628      	mov	r0, r5
 8005178:	47b8      	blx	r7
 800517a:	3001      	adds	r0, #1
 800517c:	f43f ae6b 	beq.w	8004e56 <_printf_float+0xc2>
 8005180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005184:	2200      	movs	r2, #0
 8005186:	2300      	movs	r3, #0
 8005188:	f7fb fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800518c:	b9d8      	cbnz	r0, 80051c6 <_printf_float+0x432>
 800518e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005190:	f108 0201 	add.w	r2, r8, #1
 8005194:	3b01      	subs	r3, #1
 8005196:	4631      	mov	r1, r6
 8005198:	4628      	mov	r0, r5
 800519a:	47b8      	blx	r7
 800519c:	3001      	adds	r0, #1
 800519e:	d10e      	bne.n	80051be <_printf_float+0x42a>
 80051a0:	e659      	b.n	8004e56 <_printf_float+0xc2>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4652      	mov	r2, sl
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f ae52 	beq.w	8004e56 <_printf_float+0xc2>
 80051b2:	f108 0801 	add.w	r8, r8, #1
 80051b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	4543      	cmp	r3, r8
 80051bc:	dcf1      	bgt.n	80051a2 <_printf_float+0x40e>
 80051be:	464b      	mov	r3, r9
 80051c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051c4:	e6dc      	b.n	8004f80 <_printf_float+0x1ec>
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	f104 0a1a 	add.w	sl, r4, #26
 80051ce:	e7f2      	b.n	80051b6 <_printf_float+0x422>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4642      	mov	r2, r8
 80051d4:	e7df      	b.n	8005196 <_printf_float+0x402>
 80051d6:	2301      	movs	r3, #1
 80051d8:	464a      	mov	r2, r9
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	f43f ae38 	beq.w	8004e56 <_printf_float+0xc2>
 80051e6:	f108 0801 	add.w	r8, r8, #1
 80051ea:	68e3      	ldr	r3, [r4, #12]
 80051ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ee:	1a5b      	subs	r3, r3, r1
 80051f0:	4543      	cmp	r3, r8
 80051f2:	dcf0      	bgt.n	80051d6 <_printf_float+0x442>
 80051f4:	e6fa      	b.n	8004fec <_printf_float+0x258>
 80051f6:	f04f 0800 	mov.w	r8, #0
 80051fa:	f104 0919 	add.w	r9, r4, #25
 80051fe:	e7f4      	b.n	80051ea <_printf_float+0x456>

08005200 <_printf_common>:
 8005200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	4616      	mov	r6, r2
 8005206:	4699      	mov	r9, r3
 8005208:	688a      	ldr	r2, [r1, #8]
 800520a:	690b      	ldr	r3, [r1, #16]
 800520c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005210:	4293      	cmp	r3, r2
 8005212:	bfb8      	it	lt
 8005214:	4613      	movlt	r3, r2
 8005216:	6033      	str	r3, [r6, #0]
 8005218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800521c:	4607      	mov	r7, r0
 800521e:	460c      	mov	r4, r1
 8005220:	b10a      	cbz	r2, 8005226 <_printf_common+0x26>
 8005222:	3301      	adds	r3, #1
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	0699      	lsls	r1, r3, #26
 800522a:	bf42      	ittt	mi
 800522c:	6833      	ldrmi	r3, [r6, #0]
 800522e:	3302      	addmi	r3, #2
 8005230:	6033      	strmi	r3, [r6, #0]
 8005232:	6825      	ldr	r5, [r4, #0]
 8005234:	f015 0506 	ands.w	r5, r5, #6
 8005238:	d106      	bne.n	8005248 <_printf_common+0x48>
 800523a:	f104 0a19 	add.w	sl, r4, #25
 800523e:	68e3      	ldr	r3, [r4, #12]
 8005240:	6832      	ldr	r2, [r6, #0]
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	42ab      	cmp	r3, r5
 8005246:	dc26      	bgt.n	8005296 <_printf_common+0x96>
 8005248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800524c:	1e13      	subs	r3, r2, #0
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	bf18      	it	ne
 8005252:	2301      	movne	r3, #1
 8005254:	0692      	lsls	r2, r2, #26
 8005256:	d42b      	bmi.n	80052b0 <_printf_common+0xb0>
 8005258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800525c:	4649      	mov	r1, r9
 800525e:	4638      	mov	r0, r7
 8005260:	47c0      	blx	r8
 8005262:	3001      	adds	r0, #1
 8005264:	d01e      	beq.n	80052a4 <_printf_common+0xa4>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	68e5      	ldr	r5, [r4, #12]
 800526a:	6832      	ldr	r2, [r6, #0]
 800526c:	f003 0306 	and.w	r3, r3, #6
 8005270:	2b04      	cmp	r3, #4
 8005272:	bf08      	it	eq
 8005274:	1aad      	subeq	r5, r5, r2
 8005276:	68a3      	ldr	r3, [r4, #8]
 8005278:	6922      	ldr	r2, [r4, #16]
 800527a:	bf0c      	ite	eq
 800527c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005280:	2500      	movne	r5, #0
 8005282:	4293      	cmp	r3, r2
 8005284:	bfc4      	itt	gt
 8005286:	1a9b      	subgt	r3, r3, r2
 8005288:	18ed      	addgt	r5, r5, r3
 800528a:	2600      	movs	r6, #0
 800528c:	341a      	adds	r4, #26
 800528e:	42b5      	cmp	r5, r6
 8005290:	d11a      	bne.n	80052c8 <_printf_common+0xc8>
 8005292:	2000      	movs	r0, #0
 8005294:	e008      	b.n	80052a8 <_printf_common+0xa8>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4649      	mov	r1, r9
 800529c:	4638      	mov	r0, r7
 800529e:	47c0      	blx	r8
 80052a0:	3001      	adds	r0, #1
 80052a2:	d103      	bne.n	80052ac <_printf_common+0xac>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ac:	3501      	adds	r5, #1
 80052ae:	e7c6      	b.n	800523e <_printf_common+0x3e>
 80052b0:	18e1      	adds	r1, r4, r3
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	2030      	movs	r0, #48	; 0x30
 80052b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ba:	4422      	add	r2, r4
 80052bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052c4:	3302      	adds	r3, #2
 80052c6:	e7c7      	b.n	8005258 <_printf_common+0x58>
 80052c8:	2301      	movs	r3, #1
 80052ca:	4622      	mov	r2, r4
 80052cc:	4649      	mov	r1, r9
 80052ce:	4638      	mov	r0, r7
 80052d0:	47c0      	blx	r8
 80052d2:	3001      	adds	r0, #1
 80052d4:	d0e6      	beq.n	80052a4 <_printf_common+0xa4>
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7d9      	b.n	800528e <_printf_common+0x8e>
	...

080052dc <_printf_i>:
 80052dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e0:	460c      	mov	r4, r1
 80052e2:	4691      	mov	r9, r2
 80052e4:	7e27      	ldrb	r7, [r4, #24]
 80052e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052e8:	2f78      	cmp	r7, #120	; 0x78
 80052ea:	4680      	mov	r8, r0
 80052ec:	469a      	mov	sl, r3
 80052ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f2:	d807      	bhi.n	8005304 <_printf_i+0x28>
 80052f4:	2f62      	cmp	r7, #98	; 0x62
 80052f6:	d80a      	bhi.n	800530e <_printf_i+0x32>
 80052f8:	2f00      	cmp	r7, #0
 80052fa:	f000 80d8 	beq.w	80054ae <_printf_i+0x1d2>
 80052fe:	2f58      	cmp	r7, #88	; 0x58
 8005300:	f000 80a3 	beq.w	800544a <_printf_i+0x16e>
 8005304:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800530c:	e03a      	b.n	8005384 <_printf_i+0xa8>
 800530e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005312:	2b15      	cmp	r3, #21
 8005314:	d8f6      	bhi.n	8005304 <_printf_i+0x28>
 8005316:	a001      	add	r0, pc, #4	; (adr r0, 800531c <_printf_i+0x40>)
 8005318:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800531c:	08005375 	.word	0x08005375
 8005320:	08005389 	.word	0x08005389
 8005324:	08005305 	.word	0x08005305
 8005328:	08005305 	.word	0x08005305
 800532c:	08005305 	.word	0x08005305
 8005330:	08005305 	.word	0x08005305
 8005334:	08005389 	.word	0x08005389
 8005338:	08005305 	.word	0x08005305
 800533c:	08005305 	.word	0x08005305
 8005340:	08005305 	.word	0x08005305
 8005344:	08005305 	.word	0x08005305
 8005348:	08005495 	.word	0x08005495
 800534c:	080053b9 	.word	0x080053b9
 8005350:	08005477 	.word	0x08005477
 8005354:	08005305 	.word	0x08005305
 8005358:	08005305 	.word	0x08005305
 800535c:	080054b7 	.word	0x080054b7
 8005360:	08005305 	.word	0x08005305
 8005364:	080053b9 	.word	0x080053b9
 8005368:	08005305 	.word	0x08005305
 800536c:	08005305 	.word	0x08005305
 8005370:	0800547f 	.word	0x0800547f
 8005374:	680b      	ldr	r3, [r1, #0]
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	600a      	str	r2, [r1, #0]
 800537c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005384:	2301      	movs	r3, #1
 8005386:	e0a3      	b.n	80054d0 <_printf_i+0x1f4>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	6808      	ldr	r0, [r1, #0]
 800538c:	062e      	lsls	r6, r5, #24
 800538e:	f100 0304 	add.w	r3, r0, #4
 8005392:	d50a      	bpl.n	80053aa <_printf_i+0xce>
 8005394:	6805      	ldr	r5, [r0, #0]
 8005396:	600b      	str	r3, [r1, #0]
 8005398:	2d00      	cmp	r5, #0
 800539a:	da03      	bge.n	80053a4 <_printf_i+0xc8>
 800539c:	232d      	movs	r3, #45	; 0x2d
 800539e:	426d      	negs	r5, r5
 80053a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a4:	485e      	ldr	r0, [pc, #376]	; (8005520 <_printf_i+0x244>)
 80053a6:	230a      	movs	r3, #10
 80053a8:	e019      	b.n	80053de <_printf_i+0x102>
 80053aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80053ae:	6805      	ldr	r5, [r0, #0]
 80053b0:	600b      	str	r3, [r1, #0]
 80053b2:	bf18      	it	ne
 80053b4:	b22d      	sxthne	r5, r5
 80053b6:	e7ef      	b.n	8005398 <_printf_i+0xbc>
 80053b8:	680b      	ldr	r3, [r1, #0]
 80053ba:	6825      	ldr	r5, [r4, #0]
 80053bc:	1d18      	adds	r0, r3, #4
 80053be:	6008      	str	r0, [r1, #0]
 80053c0:	0628      	lsls	r0, r5, #24
 80053c2:	d501      	bpl.n	80053c8 <_printf_i+0xec>
 80053c4:	681d      	ldr	r5, [r3, #0]
 80053c6:	e002      	b.n	80053ce <_printf_i+0xf2>
 80053c8:	0669      	lsls	r1, r5, #25
 80053ca:	d5fb      	bpl.n	80053c4 <_printf_i+0xe8>
 80053cc:	881d      	ldrh	r5, [r3, #0]
 80053ce:	4854      	ldr	r0, [pc, #336]	; (8005520 <_printf_i+0x244>)
 80053d0:	2f6f      	cmp	r7, #111	; 0x6f
 80053d2:	bf0c      	ite	eq
 80053d4:	2308      	moveq	r3, #8
 80053d6:	230a      	movne	r3, #10
 80053d8:	2100      	movs	r1, #0
 80053da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053de:	6866      	ldr	r6, [r4, #4]
 80053e0:	60a6      	str	r6, [r4, #8]
 80053e2:	2e00      	cmp	r6, #0
 80053e4:	bfa2      	ittt	ge
 80053e6:	6821      	ldrge	r1, [r4, #0]
 80053e8:	f021 0104 	bicge.w	r1, r1, #4
 80053ec:	6021      	strge	r1, [r4, #0]
 80053ee:	b90d      	cbnz	r5, 80053f4 <_printf_i+0x118>
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	d04d      	beq.n	8005490 <_printf_i+0x1b4>
 80053f4:	4616      	mov	r6, r2
 80053f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80053fa:	fb03 5711 	mls	r7, r3, r1, r5
 80053fe:	5dc7      	ldrb	r7, [r0, r7]
 8005400:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005404:	462f      	mov	r7, r5
 8005406:	42bb      	cmp	r3, r7
 8005408:	460d      	mov	r5, r1
 800540a:	d9f4      	bls.n	80053f6 <_printf_i+0x11a>
 800540c:	2b08      	cmp	r3, #8
 800540e:	d10b      	bne.n	8005428 <_printf_i+0x14c>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	07df      	lsls	r7, r3, #31
 8005414:	d508      	bpl.n	8005428 <_printf_i+0x14c>
 8005416:	6923      	ldr	r3, [r4, #16]
 8005418:	6861      	ldr	r1, [r4, #4]
 800541a:	4299      	cmp	r1, r3
 800541c:	bfde      	ittt	le
 800541e:	2330      	movle	r3, #48	; 0x30
 8005420:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005424:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005428:	1b92      	subs	r2, r2, r6
 800542a:	6122      	str	r2, [r4, #16]
 800542c:	f8cd a000 	str.w	sl, [sp]
 8005430:	464b      	mov	r3, r9
 8005432:	aa03      	add	r2, sp, #12
 8005434:	4621      	mov	r1, r4
 8005436:	4640      	mov	r0, r8
 8005438:	f7ff fee2 	bl	8005200 <_printf_common>
 800543c:	3001      	adds	r0, #1
 800543e:	d14c      	bne.n	80054da <_printf_i+0x1fe>
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	b004      	add	sp, #16
 8005446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800544a:	4835      	ldr	r0, [pc, #212]	; (8005520 <_printf_i+0x244>)
 800544c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	680e      	ldr	r6, [r1, #0]
 8005454:	061f      	lsls	r7, r3, #24
 8005456:	f856 5b04 	ldr.w	r5, [r6], #4
 800545a:	600e      	str	r6, [r1, #0]
 800545c:	d514      	bpl.n	8005488 <_printf_i+0x1ac>
 800545e:	07d9      	lsls	r1, r3, #31
 8005460:	bf44      	itt	mi
 8005462:	f043 0320 	orrmi.w	r3, r3, #32
 8005466:	6023      	strmi	r3, [r4, #0]
 8005468:	b91d      	cbnz	r5, 8005472 <_printf_i+0x196>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f023 0320 	bic.w	r3, r3, #32
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	2310      	movs	r3, #16
 8005474:	e7b0      	b.n	80053d8 <_printf_i+0xfc>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f043 0320 	orr.w	r3, r3, #32
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	2378      	movs	r3, #120	; 0x78
 8005480:	4828      	ldr	r0, [pc, #160]	; (8005524 <_printf_i+0x248>)
 8005482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005486:	e7e3      	b.n	8005450 <_printf_i+0x174>
 8005488:	065e      	lsls	r6, r3, #25
 800548a:	bf48      	it	mi
 800548c:	b2ad      	uxthmi	r5, r5
 800548e:	e7e6      	b.n	800545e <_printf_i+0x182>
 8005490:	4616      	mov	r6, r2
 8005492:	e7bb      	b.n	800540c <_printf_i+0x130>
 8005494:	680b      	ldr	r3, [r1, #0]
 8005496:	6826      	ldr	r6, [r4, #0]
 8005498:	6960      	ldr	r0, [r4, #20]
 800549a:	1d1d      	adds	r5, r3, #4
 800549c:	600d      	str	r5, [r1, #0]
 800549e:	0635      	lsls	r5, r6, #24
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	d501      	bpl.n	80054a8 <_printf_i+0x1cc>
 80054a4:	6018      	str	r0, [r3, #0]
 80054a6:	e002      	b.n	80054ae <_printf_i+0x1d2>
 80054a8:	0671      	lsls	r1, r6, #25
 80054aa:	d5fb      	bpl.n	80054a4 <_printf_i+0x1c8>
 80054ac:	8018      	strh	r0, [r3, #0]
 80054ae:	2300      	movs	r3, #0
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	4616      	mov	r6, r2
 80054b4:	e7ba      	b.n	800542c <_printf_i+0x150>
 80054b6:	680b      	ldr	r3, [r1, #0]
 80054b8:	1d1a      	adds	r2, r3, #4
 80054ba:	600a      	str	r2, [r1, #0]
 80054bc:	681e      	ldr	r6, [r3, #0]
 80054be:	6862      	ldr	r2, [r4, #4]
 80054c0:	2100      	movs	r1, #0
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7fa fe8c 	bl	80001e0 <memchr>
 80054c8:	b108      	cbz	r0, 80054ce <_printf_i+0x1f2>
 80054ca:	1b80      	subs	r0, r0, r6
 80054cc:	6060      	str	r0, [r4, #4]
 80054ce:	6863      	ldr	r3, [r4, #4]
 80054d0:	6123      	str	r3, [r4, #16]
 80054d2:	2300      	movs	r3, #0
 80054d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d8:	e7a8      	b.n	800542c <_printf_i+0x150>
 80054da:	6923      	ldr	r3, [r4, #16]
 80054dc:	4632      	mov	r2, r6
 80054de:	4649      	mov	r1, r9
 80054e0:	4640      	mov	r0, r8
 80054e2:	47d0      	blx	sl
 80054e4:	3001      	adds	r0, #1
 80054e6:	d0ab      	beq.n	8005440 <_printf_i+0x164>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	079b      	lsls	r3, r3, #30
 80054ec:	d413      	bmi.n	8005516 <_printf_i+0x23a>
 80054ee:	68e0      	ldr	r0, [r4, #12]
 80054f0:	9b03      	ldr	r3, [sp, #12]
 80054f2:	4298      	cmp	r0, r3
 80054f4:	bfb8      	it	lt
 80054f6:	4618      	movlt	r0, r3
 80054f8:	e7a4      	b.n	8005444 <_printf_i+0x168>
 80054fa:	2301      	movs	r3, #1
 80054fc:	4632      	mov	r2, r6
 80054fe:	4649      	mov	r1, r9
 8005500:	4640      	mov	r0, r8
 8005502:	47d0      	blx	sl
 8005504:	3001      	adds	r0, #1
 8005506:	d09b      	beq.n	8005440 <_printf_i+0x164>
 8005508:	3501      	adds	r5, #1
 800550a:	68e3      	ldr	r3, [r4, #12]
 800550c:	9903      	ldr	r1, [sp, #12]
 800550e:	1a5b      	subs	r3, r3, r1
 8005510:	42ab      	cmp	r3, r5
 8005512:	dcf2      	bgt.n	80054fa <_printf_i+0x21e>
 8005514:	e7eb      	b.n	80054ee <_printf_i+0x212>
 8005516:	2500      	movs	r5, #0
 8005518:	f104 0619 	add.w	r6, r4, #25
 800551c:	e7f5      	b.n	800550a <_printf_i+0x22e>
 800551e:	bf00      	nop
 8005520:	0800957e 	.word	0x0800957e
 8005524:	0800958f 	.word	0x0800958f

08005528 <_scanf_float>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	b087      	sub	sp, #28
 800552e:	4617      	mov	r7, r2
 8005530:	9303      	str	r3, [sp, #12]
 8005532:	688b      	ldr	r3, [r1, #8]
 8005534:	1e5a      	subs	r2, r3, #1
 8005536:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800553a:	bf83      	ittte	hi
 800553c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005540:	195b      	addhi	r3, r3, r5
 8005542:	9302      	strhi	r3, [sp, #8]
 8005544:	2300      	movls	r3, #0
 8005546:	bf86      	itte	hi
 8005548:	f240 135d 	movwhi	r3, #349	; 0x15d
 800554c:	608b      	strhi	r3, [r1, #8]
 800554e:	9302      	strls	r3, [sp, #8]
 8005550:	680b      	ldr	r3, [r1, #0]
 8005552:	468b      	mov	fp, r1
 8005554:	2500      	movs	r5, #0
 8005556:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800555a:	f84b 3b1c 	str.w	r3, [fp], #28
 800555e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005562:	4680      	mov	r8, r0
 8005564:	460c      	mov	r4, r1
 8005566:	465e      	mov	r6, fp
 8005568:	46aa      	mov	sl, r5
 800556a:	46a9      	mov	r9, r5
 800556c:	9501      	str	r5, [sp, #4]
 800556e:	68a2      	ldr	r2, [r4, #8]
 8005570:	b152      	cbz	r2, 8005588 <_scanf_float+0x60>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b4e      	cmp	r3, #78	; 0x4e
 8005578:	d864      	bhi.n	8005644 <_scanf_float+0x11c>
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d83c      	bhi.n	80055f8 <_scanf_float+0xd0>
 800557e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005582:	b2c8      	uxtb	r0, r1
 8005584:	280e      	cmp	r0, #14
 8005586:	d93a      	bls.n	80055fe <_scanf_float+0xd6>
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	d003      	beq.n	8005596 <_scanf_float+0x6e>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005594:	6023      	str	r3, [r4, #0]
 8005596:	f10a 3aff 	add.w	sl, sl, #4294967295
 800559a:	f1ba 0f01 	cmp.w	sl, #1
 800559e:	f200 8113 	bhi.w	80057c8 <_scanf_float+0x2a0>
 80055a2:	455e      	cmp	r6, fp
 80055a4:	f200 8105 	bhi.w	80057b2 <_scanf_float+0x28a>
 80055a8:	2501      	movs	r5, #1
 80055aa:	4628      	mov	r0, r5
 80055ac:	b007      	add	sp, #28
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80055b6:	2a0d      	cmp	r2, #13
 80055b8:	d8e6      	bhi.n	8005588 <_scanf_float+0x60>
 80055ba:	a101      	add	r1, pc, #4	; (adr r1, 80055c0 <_scanf_float+0x98>)
 80055bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80055c0:	080056ff 	.word	0x080056ff
 80055c4:	08005589 	.word	0x08005589
 80055c8:	08005589 	.word	0x08005589
 80055cc:	08005589 	.word	0x08005589
 80055d0:	0800575f 	.word	0x0800575f
 80055d4:	08005737 	.word	0x08005737
 80055d8:	08005589 	.word	0x08005589
 80055dc:	08005589 	.word	0x08005589
 80055e0:	0800570d 	.word	0x0800570d
 80055e4:	08005589 	.word	0x08005589
 80055e8:	08005589 	.word	0x08005589
 80055ec:	08005589 	.word	0x08005589
 80055f0:	08005589 	.word	0x08005589
 80055f4:	080056c5 	.word	0x080056c5
 80055f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80055fc:	e7db      	b.n	80055b6 <_scanf_float+0x8e>
 80055fe:	290e      	cmp	r1, #14
 8005600:	d8c2      	bhi.n	8005588 <_scanf_float+0x60>
 8005602:	a001      	add	r0, pc, #4	; (adr r0, 8005608 <_scanf_float+0xe0>)
 8005604:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005608:	080056b7 	.word	0x080056b7
 800560c:	08005589 	.word	0x08005589
 8005610:	080056b7 	.word	0x080056b7
 8005614:	0800574b 	.word	0x0800574b
 8005618:	08005589 	.word	0x08005589
 800561c:	08005665 	.word	0x08005665
 8005620:	080056a1 	.word	0x080056a1
 8005624:	080056a1 	.word	0x080056a1
 8005628:	080056a1 	.word	0x080056a1
 800562c:	080056a1 	.word	0x080056a1
 8005630:	080056a1 	.word	0x080056a1
 8005634:	080056a1 	.word	0x080056a1
 8005638:	080056a1 	.word	0x080056a1
 800563c:	080056a1 	.word	0x080056a1
 8005640:	080056a1 	.word	0x080056a1
 8005644:	2b6e      	cmp	r3, #110	; 0x6e
 8005646:	d809      	bhi.n	800565c <_scanf_float+0x134>
 8005648:	2b60      	cmp	r3, #96	; 0x60
 800564a:	d8b2      	bhi.n	80055b2 <_scanf_float+0x8a>
 800564c:	2b54      	cmp	r3, #84	; 0x54
 800564e:	d077      	beq.n	8005740 <_scanf_float+0x218>
 8005650:	2b59      	cmp	r3, #89	; 0x59
 8005652:	d199      	bne.n	8005588 <_scanf_float+0x60>
 8005654:	2d07      	cmp	r5, #7
 8005656:	d197      	bne.n	8005588 <_scanf_float+0x60>
 8005658:	2508      	movs	r5, #8
 800565a:	e029      	b.n	80056b0 <_scanf_float+0x188>
 800565c:	2b74      	cmp	r3, #116	; 0x74
 800565e:	d06f      	beq.n	8005740 <_scanf_float+0x218>
 8005660:	2b79      	cmp	r3, #121	; 0x79
 8005662:	e7f6      	b.n	8005652 <_scanf_float+0x12a>
 8005664:	6821      	ldr	r1, [r4, #0]
 8005666:	05c8      	lsls	r0, r1, #23
 8005668:	d51a      	bpl.n	80056a0 <_scanf_float+0x178>
 800566a:	9b02      	ldr	r3, [sp, #8]
 800566c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005670:	6021      	str	r1, [r4, #0]
 8005672:	f109 0901 	add.w	r9, r9, #1
 8005676:	b11b      	cbz	r3, 8005680 <_scanf_float+0x158>
 8005678:	3b01      	subs	r3, #1
 800567a:	3201      	adds	r2, #1
 800567c:	9302      	str	r3, [sp, #8]
 800567e:	60a2      	str	r2, [r4, #8]
 8005680:	68a3      	ldr	r3, [r4, #8]
 8005682:	3b01      	subs	r3, #1
 8005684:	60a3      	str	r3, [r4, #8]
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	3301      	adds	r3, #1
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	f340 8084 	ble.w	80057a0 <_scanf_float+0x278>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	e766      	b.n	800556e <_scanf_float+0x46>
 80056a0:	eb1a 0f05 	cmn.w	sl, r5
 80056a4:	f47f af70 	bne.w	8005588 <_scanf_float+0x60>
 80056a8:	6822      	ldr	r2, [r4, #0]
 80056aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	f806 3b01 	strb.w	r3, [r6], #1
 80056b4:	e7e4      	b.n	8005680 <_scanf_float+0x158>
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	0610      	lsls	r0, r2, #24
 80056ba:	f57f af65 	bpl.w	8005588 <_scanf_float+0x60>
 80056be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056c2:	e7f4      	b.n	80056ae <_scanf_float+0x186>
 80056c4:	f1ba 0f00 	cmp.w	sl, #0
 80056c8:	d10e      	bne.n	80056e8 <_scanf_float+0x1c0>
 80056ca:	f1b9 0f00 	cmp.w	r9, #0
 80056ce:	d10e      	bne.n	80056ee <_scanf_float+0x1c6>
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056da:	d108      	bne.n	80056ee <_scanf_float+0x1c6>
 80056dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056e0:	6022      	str	r2, [r4, #0]
 80056e2:	f04f 0a01 	mov.w	sl, #1
 80056e6:	e7e3      	b.n	80056b0 <_scanf_float+0x188>
 80056e8:	f1ba 0f02 	cmp.w	sl, #2
 80056ec:	d055      	beq.n	800579a <_scanf_float+0x272>
 80056ee:	2d01      	cmp	r5, #1
 80056f0:	d002      	beq.n	80056f8 <_scanf_float+0x1d0>
 80056f2:	2d04      	cmp	r5, #4
 80056f4:	f47f af48 	bne.w	8005588 <_scanf_float+0x60>
 80056f8:	3501      	adds	r5, #1
 80056fa:	b2ed      	uxtb	r5, r5
 80056fc:	e7d8      	b.n	80056b0 <_scanf_float+0x188>
 80056fe:	f1ba 0f01 	cmp.w	sl, #1
 8005702:	f47f af41 	bne.w	8005588 <_scanf_float+0x60>
 8005706:	f04f 0a02 	mov.w	sl, #2
 800570a:	e7d1      	b.n	80056b0 <_scanf_float+0x188>
 800570c:	b97d      	cbnz	r5, 800572e <_scanf_float+0x206>
 800570e:	f1b9 0f00 	cmp.w	r9, #0
 8005712:	f47f af3c 	bne.w	800558e <_scanf_float+0x66>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800571c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005720:	f47f af39 	bne.w	8005596 <_scanf_float+0x6e>
 8005724:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	2501      	movs	r5, #1
 800572c:	e7c0      	b.n	80056b0 <_scanf_float+0x188>
 800572e:	2d03      	cmp	r5, #3
 8005730:	d0e2      	beq.n	80056f8 <_scanf_float+0x1d0>
 8005732:	2d05      	cmp	r5, #5
 8005734:	e7de      	b.n	80056f4 <_scanf_float+0x1cc>
 8005736:	2d02      	cmp	r5, #2
 8005738:	f47f af26 	bne.w	8005588 <_scanf_float+0x60>
 800573c:	2503      	movs	r5, #3
 800573e:	e7b7      	b.n	80056b0 <_scanf_float+0x188>
 8005740:	2d06      	cmp	r5, #6
 8005742:	f47f af21 	bne.w	8005588 <_scanf_float+0x60>
 8005746:	2507      	movs	r5, #7
 8005748:	e7b2      	b.n	80056b0 <_scanf_float+0x188>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	0591      	lsls	r1, r2, #22
 800574e:	f57f af1b 	bpl.w	8005588 <_scanf_float+0x60>
 8005752:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005756:	6022      	str	r2, [r4, #0]
 8005758:	f8cd 9004 	str.w	r9, [sp, #4]
 800575c:	e7a8      	b.n	80056b0 <_scanf_float+0x188>
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005764:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005768:	d006      	beq.n	8005778 <_scanf_float+0x250>
 800576a:	0550      	lsls	r0, r2, #21
 800576c:	f57f af0c 	bpl.w	8005588 <_scanf_float+0x60>
 8005770:	f1b9 0f00 	cmp.w	r9, #0
 8005774:	f43f af0f 	beq.w	8005596 <_scanf_float+0x6e>
 8005778:	0591      	lsls	r1, r2, #22
 800577a:	bf58      	it	pl
 800577c:	9901      	ldrpl	r1, [sp, #4]
 800577e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005782:	bf58      	it	pl
 8005784:	eba9 0101 	subpl.w	r1, r9, r1
 8005788:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800578c:	bf58      	it	pl
 800578e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005792:	6022      	str	r2, [r4, #0]
 8005794:	f04f 0900 	mov.w	r9, #0
 8005798:	e78a      	b.n	80056b0 <_scanf_float+0x188>
 800579a:	f04f 0a03 	mov.w	sl, #3
 800579e:	e787      	b.n	80056b0 <_scanf_float+0x188>
 80057a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057a4:	4639      	mov	r1, r7
 80057a6:	4640      	mov	r0, r8
 80057a8:	4798      	blx	r3
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f43f aedf 	beq.w	800556e <_scanf_float+0x46>
 80057b0:	e6ea      	b.n	8005588 <_scanf_float+0x60>
 80057b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057ba:	463a      	mov	r2, r7
 80057bc:	4640      	mov	r0, r8
 80057be:	4798      	blx	r3
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	e6ec      	b.n	80055a2 <_scanf_float+0x7a>
 80057c8:	1e6b      	subs	r3, r5, #1
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d825      	bhi.n	800581a <_scanf_float+0x2f2>
 80057ce:	2d02      	cmp	r5, #2
 80057d0:	d836      	bhi.n	8005840 <_scanf_float+0x318>
 80057d2:	455e      	cmp	r6, fp
 80057d4:	f67f aee8 	bls.w	80055a8 <_scanf_float+0x80>
 80057d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057e0:	463a      	mov	r2, r7
 80057e2:	4640      	mov	r0, r8
 80057e4:	4798      	blx	r3
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	e7f1      	b.n	80057d2 <_scanf_float+0x2aa>
 80057ee:	9802      	ldr	r0, [sp, #8]
 80057f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80057f8:	9002      	str	r0, [sp, #8]
 80057fa:	463a      	mov	r2, r7
 80057fc:	4640      	mov	r0, r8
 80057fe:	4798      	blx	r3
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	3b01      	subs	r3, #1
 8005804:	6123      	str	r3, [r4, #16]
 8005806:	f10a 3aff 	add.w	sl, sl, #4294967295
 800580a:	fa5f fa8a 	uxtb.w	sl, sl
 800580e:	f1ba 0f02 	cmp.w	sl, #2
 8005812:	d1ec      	bne.n	80057ee <_scanf_float+0x2c6>
 8005814:	3d03      	subs	r5, #3
 8005816:	b2ed      	uxtb	r5, r5
 8005818:	1b76      	subs	r6, r6, r5
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	05da      	lsls	r2, r3, #23
 800581e:	d52f      	bpl.n	8005880 <_scanf_float+0x358>
 8005820:	055b      	lsls	r3, r3, #21
 8005822:	d510      	bpl.n	8005846 <_scanf_float+0x31e>
 8005824:	455e      	cmp	r6, fp
 8005826:	f67f aebf 	bls.w	80055a8 <_scanf_float+0x80>
 800582a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800582e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005832:	463a      	mov	r2, r7
 8005834:	4640      	mov	r0, r8
 8005836:	4798      	blx	r3
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	3b01      	subs	r3, #1
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	e7f1      	b.n	8005824 <_scanf_float+0x2fc>
 8005840:	46aa      	mov	sl, r5
 8005842:	9602      	str	r6, [sp, #8]
 8005844:	e7df      	b.n	8005806 <_scanf_float+0x2de>
 8005846:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800584a:	6923      	ldr	r3, [r4, #16]
 800584c:	2965      	cmp	r1, #101	; 0x65
 800584e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005852:	f106 35ff 	add.w	r5, r6, #4294967295
 8005856:	6123      	str	r3, [r4, #16]
 8005858:	d00c      	beq.n	8005874 <_scanf_float+0x34c>
 800585a:	2945      	cmp	r1, #69	; 0x45
 800585c:	d00a      	beq.n	8005874 <_scanf_float+0x34c>
 800585e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005862:	463a      	mov	r2, r7
 8005864:	4640      	mov	r0, r8
 8005866:	4798      	blx	r3
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800586e:	3b01      	subs	r3, #1
 8005870:	1eb5      	subs	r5, r6, #2
 8005872:	6123      	str	r3, [r4, #16]
 8005874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005878:	463a      	mov	r2, r7
 800587a:	4640      	mov	r0, r8
 800587c:	4798      	blx	r3
 800587e:	462e      	mov	r6, r5
 8005880:	6825      	ldr	r5, [r4, #0]
 8005882:	f015 0510 	ands.w	r5, r5, #16
 8005886:	d158      	bne.n	800593a <_scanf_float+0x412>
 8005888:	7035      	strb	r5, [r6, #0]
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	d11c      	bne.n	80058d0 <_scanf_float+0x3a8>
 8005896:	9b01      	ldr	r3, [sp, #4]
 8005898:	454b      	cmp	r3, r9
 800589a:	eba3 0209 	sub.w	r2, r3, r9
 800589e:	d124      	bne.n	80058ea <_scanf_float+0x3c2>
 80058a0:	2200      	movs	r2, #0
 80058a2:	4659      	mov	r1, fp
 80058a4:	4640      	mov	r0, r8
 80058a6:	f000 fe9d 	bl	80065e4 <_strtod_r>
 80058aa:	9b03      	ldr	r3, [sp, #12]
 80058ac:	6821      	ldr	r1, [r4, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f011 0f02 	tst.w	r1, #2
 80058b4:	ec57 6b10 	vmov	r6, r7, d0
 80058b8:	f103 0204 	add.w	r2, r3, #4
 80058bc:	d020      	beq.n	8005900 <_scanf_float+0x3d8>
 80058be:	9903      	ldr	r1, [sp, #12]
 80058c0:	600a      	str	r2, [r1, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	e9c3 6700 	strd	r6, r7, [r3]
 80058c8:	68e3      	ldr	r3, [r4, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60e3      	str	r3, [r4, #12]
 80058ce:	e66c      	b.n	80055aa <_scanf_float+0x82>
 80058d0:	9b04      	ldr	r3, [sp, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0e4      	beq.n	80058a0 <_scanf_float+0x378>
 80058d6:	9905      	ldr	r1, [sp, #20]
 80058d8:	230a      	movs	r3, #10
 80058da:	462a      	mov	r2, r5
 80058dc:	3101      	adds	r1, #1
 80058de:	4640      	mov	r0, r8
 80058e0:	f000 ff0a 	bl	80066f8 <_strtol_r>
 80058e4:	9b04      	ldr	r3, [sp, #16]
 80058e6:	9e05      	ldr	r6, [sp, #20]
 80058e8:	1ac2      	subs	r2, r0, r3
 80058ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80058ee:	429e      	cmp	r6, r3
 80058f0:	bf28      	it	cs
 80058f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80058f6:	4912      	ldr	r1, [pc, #72]	; (8005940 <_scanf_float+0x418>)
 80058f8:	4630      	mov	r0, r6
 80058fa:	f000 f82b 	bl	8005954 <siprintf>
 80058fe:	e7cf      	b.n	80058a0 <_scanf_float+0x378>
 8005900:	f011 0f04 	tst.w	r1, #4
 8005904:	9903      	ldr	r1, [sp, #12]
 8005906:	600a      	str	r2, [r1, #0]
 8005908:	d1db      	bne.n	80058c2 <_scanf_float+0x39a>
 800590a:	f8d3 8000 	ldr.w	r8, [r3]
 800590e:	ee10 2a10 	vmov	r2, s0
 8005912:	ee10 0a10 	vmov	r0, s0
 8005916:	463b      	mov	r3, r7
 8005918:	4639      	mov	r1, r7
 800591a:	f7fb f907 	bl	8000b2c <__aeabi_dcmpun>
 800591e:	b128      	cbz	r0, 800592c <_scanf_float+0x404>
 8005920:	4808      	ldr	r0, [pc, #32]	; (8005944 <_scanf_float+0x41c>)
 8005922:	f000 f811 	bl	8005948 <nanf>
 8005926:	ed88 0a00 	vstr	s0, [r8]
 800592a:	e7cd      	b.n	80058c8 <_scanf_float+0x3a0>
 800592c:	4630      	mov	r0, r6
 800592e:	4639      	mov	r1, r7
 8005930:	f7fb f95a 	bl	8000be8 <__aeabi_d2f>
 8005934:	f8c8 0000 	str.w	r0, [r8]
 8005938:	e7c6      	b.n	80058c8 <_scanf_float+0x3a0>
 800593a:	2500      	movs	r5, #0
 800593c:	e635      	b.n	80055aa <_scanf_float+0x82>
 800593e:	bf00      	nop
 8005940:	080095a0 	.word	0x080095a0
 8005944:	080099b8 	.word	0x080099b8

08005948 <nanf>:
 8005948:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005950 <nanf+0x8>
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	7fc00000 	.word	0x7fc00000

08005954 <siprintf>:
 8005954:	b40e      	push	{r1, r2, r3}
 8005956:	b500      	push	{lr}
 8005958:	b09c      	sub	sp, #112	; 0x70
 800595a:	ab1d      	add	r3, sp, #116	; 0x74
 800595c:	9002      	str	r0, [sp, #8]
 800595e:	9006      	str	r0, [sp, #24]
 8005960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005964:	4809      	ldr	r0, [pc, #36]	; (800598c <siprintf+0x38>)
 8005966:	9107      	str	r1, [sp, #28]
 8005968:	9104      	str	r1, [sp, #16]
 800596a:	4909      	ldr	r1, [pc, #36]	; (8005990 <siprintf+0x3c>)
 800596c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005970:	9105      	str	r1, [sp, #20]
 8005972:	6800      	ldr	r0, [r0, #0]
 8005974:	9301      	str	r3, [sp, #4]
 8005976:	a902      	add	r1, sp, #8
 8005978:	f002 feae 	bl	80086d8 <_svfiprintf_r>
 800597c:	9b02      	ldr	r3, [sp, #8]
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	b01c      	add	sp, #112	; 0x70
 8005984:	f85d eb04 	ldr.w	lr, [sp], #4
 8005988:	b003      	add	sp, #12
 800598a:	4770      	bx	lr
 800598c:	2000000c 	.word	0x2000000c
 8005990:	ffff0208 	.word	0xffff0208

08005994 <sulp>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	4604      	mov	r4, r0
 8005998:	460d      	mov	r5, r1
 800599a:	ec45 4b10 	vmov	d0, r4, r5
 800599e:	4616      	mov	r6, r2
 80059a0:	f002 fc36 	bl	8008210 <__ulp>
 80059a4:	ec51 0b10 	vmov	r0, r1, d0
 80059a8:	b17e      	cbz	r6, 80059ca <sulp+0x36>
 80059aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80059ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	dd09      	ble.n	80059ca <sulp+0x36>
 80059b6:	051b      	lsls	r3, r3, #20
 80059b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80059bc:	2400      	movs	r4, #0
 80059be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	f7fa fe17 	bl	80005f8 <__aeabi_dmul>
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	0000      	movs	r0, r0
	...

080059d0 <_strtod_l>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	b0a3      	sub	sp, #140	; 0x8c
 80059d6:	461f      	mov	r7, r3
 80059d8:	2300      	movs	r3, #0
 80059da:	931e      	str	r3, [sp, #120]	; 0x78
 80059dc:	4ba4      	ldr	r3, [pc, #656]	; (8005c70 <_strtod_l+0x2a0>)
 80059de:	9219      	str	r2, [sp, #100]	; 0x64
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	9307      	str	r3, [sp, #28]
 80059e4:	4604      	mov	r4, r0
 80059e6:	4618      	mov	r0, r3
 80059e8:	4688      	mov	r8, r1
 80059ea:	f7fa fbf1 	bl	80001d0 <strlen>
 80059ee:	f04f 0a00 	mov.w	sl, #0
 80059f2:	4605      	mov	r5, r0
 80059f4:	f04f 0b00 	mov.w	fp, #0
 80059f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80059fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059fe:	781a      	ldrb	r2, [r3, #0]
 8005a00:	2a2b      	cmp	r2, #43	; 0x2b
 8005a02:	d04c      	beq.n	8005a9e <_strtod_l+0xce>
 8005a04:	d839      	bhi.n	8005a7a <_strtod_l+0xaa>
 8005a06:	2a0d      	cmp	r2, #13
 8005a08:	d832      	bhi.n	8005a70 <_strtod_l+0xa0>
 8005a0a:	2a08      	cmp	r2, #8
 8005a0c:	d832      	bhi.n	8005a74 <_strtod_l+0xa4>
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d03c      	beq.n	8005a8c <_strtod_l+0xbc>
 8005a12:	2300      	movs	r3, #0
 8005a14:	930e      	str	r3, [sp, #56]	; 0x38
 8005a16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005a18:	7833      	ldrb	r3, [r6, #0]
 8005a1a:	2b30      	cmp	r3, #48	; 0x30
 8005a1c:	f040 80b4 	bne.w	8005b88 <_strtod_l+0x1b8>
 8005a20:	7873      	ldrb	r3, [r6, #1]
 8005a22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a26:	2b58      	cmp	r3, #88	; 0x58
 8005a28:	d16c      	bne.n	8005b04 <_strtod_l+0x134>
 8005a2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	ab1e      	add	r3, sp, #120	; 0x78
 8005a30:	9702      	str	r7, [sp, #8]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	4a8f      	ldr	r2, [pc, #572]	; (8005c74 <_strtod_l+0x2a4>)
 8005a36:	ab1f      	add	r3, sp, #124	; 0x7c
 8005a38:	a91d      	add	r1, sp, #116	; 0x74
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f001 fd48 	bl	80074d0 <__gethex>
 8005a40:	f010 0707 	ands.w	r7, r0, #7
 8005a44:	4605      	mov	r5, r0
 8005a46:	d005      	beq.n	8005a54 <_strtod_l+0x84>
 8005a48:	2f06      	cmp	r7, #6
 8005a4a:	d12a      	bne.n	8005aa2 <_strtod_l+0xd2>
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	2300      	movs	r3, #0
 8005a50:	961d      	str	r6, [sp, #116]	; 0x74
 8005a52:	930e      	str	r3, [sp, #56]	; 0x38
 8005a54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 8596 	bne.w	8006588 <_strtod_l+0xbb8>
 8005a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a5e:	b1db      	cbz	r3, 8005a98 <_strtod_l+0xc8>
 8005a60:	4652      	mov	r2, sl
 8005a62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a66:	ec43 2b10 	vmov	d0, r2, r3
 8005a6a:	b023      	add	sp, #140	; 0x8c
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	2a20      	cmp	r2, #32
 8005a72:	d1ce      	bne.n	8005a12 <_strtod_l+0x42>
 8005a74:	3301      	adds	r3, #1
 8005a76:	931d      	str	r3, [sp, #116]	; 0x74
 8005a78:	e7c0      	b.n	80059fc <_strtod_l+0x2c>
 8005a7a:	2a2d      	cmp	r2, #45	; 0x2d
 8005a7c:	d1c9      	bne.n	8005a12 <_strtod_l+0x42>
 8005a7e:	2201      	movs	r2, #1
 8005a80:	920e      	str	r2, [sp, #56]	; 0x38
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	921d      	str	r2, [sp, #116]	; 0x74
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1c4      	bne.n	8005a16 <_strtod_l+0x46>
 8005a8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8576 	bne.w	8006584 <_strtod_l+0xbb4>
 8005a98:	4652      	mov	r2, sl
 8005a9a:	465b      	mov	r3, fp
 8005a9c:	e7e3      	b.n	8005a66 <_strtod_l+0x96>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	e7ee      	b.n	8005a80 <_strtod_l+0xb0>
 8005aa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005aa4:	b13a      	cbz	r2, 8005ab6 <_strtod_l+0xe6>
 8005aa6:	2135      	movs	r1, #53	; 0x35
 8005aa8:	a820      	add	r0, sp, #128	; 0x80
 8005aaa:	f002 fcbc 	bl	8008426 <__copybits>
 8005aae:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f002 f881 	bl	8007bb8 <_Bfree>
 8005ab6:	3f01      	subs	r7, #1
 8005ab8:	2f05      	cmp	r7, #5
 8005aba:	d807      	bhi.n	8005acc <_strtod_l+0xfc>
 8005abc:	e8df f007 	tbb	[pc, r7]
 8005ac0:	1d180b0e 	.word	0x1d180b0e
 8005ac4:	030e      	.short	0x030e
 8005ac6:	f04f 0b00 	mov.w	fp, #0
 8005aca:	46da      	mov	sl, fp
 8005acc:	0728      	lsls	r0, r5, #28
 8005ace:	d5c1      	bpl.n	8005a54 <_strtod_l+0x84>
 8005ad0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005ad4:	e7be      	b.n	8005a54 <_strtod_l+0x84>
 8005ad6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005ada:	e7f7      	b.n	8005acc <_strtod_l+0xfc>
 8005adc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005ae0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005ae2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ae6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005aea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005aee:	e7ed      	b.n	8005acc <_strtod_l+0xfc>
 8005af0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005c78 <_strtod_l+0x2a8>
 8005af4:	f04f 0a00 	mov.w	sl, #0
 8005af8:	e7e8      	b.n	8005acc <_strtod_l+0xfc>
 8005afa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005afe:	f04f 3aff 	mov.w	sl, #4294967295
 8005b02:	e7e3      	b.n	8005acc <_strtod_l+0xfc>
 8005b04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	921d      	str	r2, [sp, #116]	; 0x74
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b30      	cmp	r3, #48	; 0x30
 8005b0e:	d0f9      	beq.n	8005b04 <_strtod_l+0x134>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d09f      	beq.n	8005a54 <_strtod_l+0x84>
 8005b14:	2301      	movs	r3, #1
 8005b16:	f04f 0900 	mov.w	r9, #0
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b20:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b24:	464f      	mov	r7, r9
 8005b26:	220a      	movs	r2, #10
 8005b28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005b2a:	7806      	ldrb	r6, [r0, #0]
 8005b2c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005b30:	b2d9      	uxtb	r1, r3
 8005b32:	2909      	cmp	r1, #9
 8005b34:	d92a      	bls.n	8005b8c <_strtod_l+0x1bc>
 8005b36:	9907      	ldr	r1, [sp, #28]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	f002 fee5 	bl	8008908 <strncmp>
 8005b3e:	b398      	cbz	r0, 8005ba8 <_strtod_l+0x1d8>
 8005b40:	2000      	movs	r0, #0
 8005b42:	4633      	mov	r3, r6
 8005b44:	463d      	mov	r5, r7
 8005b46:	9007      	str	r0, [sp, #28]
 8005b48:	4602      	mov	r2, r0
 8005b4a:	2b65      	cmp	r3, #101	; 0x65
 8005b4c:	d001      	beq.n	8005b52 <_strtod_l+0x182>
 8005b4e:	2b45      	cmp	r3, #69	; 0x45
 8005b50:	d118      	bne.n	8005b84 <_strtod_l+0x1b4>
 8005b52:	b91d      	cbnz	r5, 8005b5c <_strtod_l+0x18c>
 8005b54:	9b04      	ldr	r3, [sp, #16]
 8005b56:	4303      	orrs	r3, r0
 8005b58:	d098      	beq.n	8005a8c <_strtod_l+0xbc>
 8005b5a:	2500      	movs	r5, #0
 8005b5c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005b60:	f108 0301 	add.w	r3, r8, #1
 8005b64:	931d      	str	r3, [sp, #116]	; 0x74
 8005b66:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005b6a:	2b2b      	cmp	r3, #43	; 0x2b
 8005b6c:	d075      	beq.n	8005c5a <_strtod_l+0x28a>
 8005b6e:	2b2d      	cmp	r3, #45	; 0x2d
 8005b70:	d07b      	beq.n	8005c6a <_strtod_l+0x29a>
 8005b72:	f04f 0c00 	mov.w	ip, #0
 8005b76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005b7a:	2909      	cmp	r1, #9
 8005b7c:	f240 8082 	bls.w	8005c84 <_strtod_l+0x2b4>
 8005b80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005b84:	2600      	movs	r6, #0
 8005b86:	e09d      	b.n	8005cc4 <_strtod_l+0x2f4>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e7c4      	b.n	8005b16 <_strtod_l+0x146>
 8005b8c:	2f08      	cmp	r7, #8
 8005b8e:	bfd8      	it	le
 8005b90:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005b92:	f100 0001 	add.w	r0, r0, #1
 8005b96:	bfda      	itte	le
 8005b98:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b9c:	9309      	strle	r3, [sp, #36]	; 0x24
 8005b9e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005ba2:	3701      	adds	r7, #1
 8005ba4:	901d      	str	r0, [sp, #116]	; 0x74
 8005ba6:	e7bf      	b.n	8005b28 <_strtod_l+0x158>
 8005ba8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005baa:	195a      	adds	r2, r3, r5
 8005bac:	921d      	str	r2, [sp, #116]	; 0x74
 8005bae:	5d5b      	ldrb	r3, [r3, r5]
 8005bb0:	2f00      	cmp	r7, #0
 8005bb2:	d037      	beq.n	8005c24 <_strtod_l+0x254>
 8005bb4:	9007      	str	r0, [sp, #28]
 8005bb6:	463d      	mov	r5, r7
 8005bb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005bbc:	2a09      	cmp	r2, #9
 8005bbe:	d912      	bls.n	8005be6 <_strtod_l+0x216>
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	e7c2      	b.n	8005b4a <_strtod_l+0x17a>
 8005bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	921d      	str	r2, [sp, #116]	; 0x74
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	3001      	adds	r0, #1
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	d0f8      	beq.n	8005bc4 <_strtod_l+0x1f4>
 8005bd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005bd6:	2a08      	cmp	r2, #8
 8005bd8:	f200 84db 	bhi.w	8006592 <_strtod_l+0xbc2>
 8005bdc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005bde:	9007      	str	r0, [sp, #28]
 8005be0:	2000      	movs	r0, #0
 8005be2:	920a      	str	r2, [sp, #40]	; 0x28
 8005be4:	4605      	mov	r5, r0
 8005be6:	3b30      	subs	r3, #48	; 0x30
 8005be8:	f100 0201 	add.w	r2, r0, #1
 8005bec:	d014      	beq.n	8005c18 <_strtod_l+0x248>
 8005bee:	9907      	ldr	r1, [sp, #28]
 8005bf0:	4411      	add	r1, r2
 8005bf2:	9107      	str	r1, [sp, #28]
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	eb00 0e05 	add.w	lr, r0, r5
 8005bfa:	210a      	movs	r1, #10
 8005bfc:	4572      	cmp	r2, lr
 8005bfe:	d113      	bne.n	8005c28 <_strtod_l+0x258>
 8005c00:	182a      	adds	r2, r5, r0
 8005c02:	2a08      	cmp	r2, #8
 8005c04:	f105 0501 	add.w	r5, r5, #1
 8005c08:	4405      	add	r5, r0
 8005c0a:	dc1c      	bgt.n	8005c46 <_strtod_l+0x276>
 8005c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c0e:	220a      	movs	r2, #10
 8005c10:	fb02 3301 	mla	r3, r2, r1, r3
 8005c14:	9309      	str	r3, [sp, #36]	; 0x24
 8005c16:	2200      	movs	r2, #0
 8005c18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	911d      	str	r1, [sp, #116]	; 0x74
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	4610      	mov	r0, r2
 8005c22:	e7c9      	b.n	8005bb8 <_strtod_l+0x1e8>
 8005c24:	4638      	mov	r0, r7
 8005c26:	e7d2      	b.n	8005bce <_strtod_l+0x1fe>
 8005c28:	2a08      	cmp	r2, #8
 8005c2a:	dc04      	bgt.n	8005c36 <_strtod_l+0x266>
 8005c2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005c2e:	434e      	muls	r6, r1
 8005c30:	9609      	str	r6, [sp, #36]	; 0x24
 8005c32:	3201      	adds	r2, #1
 8005c34:	e7e2      	b.n	8005bfc <_strtod_l+0x22c>
 8005c36:	f102 0c01 	add.w	ip, r2, #1
 8005c3a:	f1bc 0f10 	cmp.w	ip, #16
 8005c3e:	bfd8      	it	le
 8005c40:	fb01 f909 	mulle.w	r9, r1, r9
 8005c44:	e7f5      	b.n	8005c32 <_strtod_l+0x262>
 8005c46:	2d10      	cmp	r5, #16
 8005c48:	bfdc      	itt	le
 8005c4a:	220a      	movle	r2, #10
 8005c4c:	fb02 3909 	mlale	r9, r2, r9, r3
 8005c50:	e7e1      	b.n	8005c16 <_strtod_l+0x246>
 8005c52:	2300      	movs	r3, #0
 8005c54:	9307      	str	r3, [sp, #28]
 8005c56:	2201      	movs	r2, #1
 8005c58:	e77c      	b.n	8005b54 <_strtod_l+0x184>
 8005c5a:	f04f 0c00 	mov.w	ip, #0
 8005c5e:	f108 0302 	add.w	r3, r8, #2
 8005c62:	931d      	str	r3, [sp, #116]	; 0x74
 8005c64:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005c68:	e785      	b.n	8005b76 <_strtod_l+0x1a6>
 8005c6a:	f04f 0c01 	mov.w	ip, #1
 8005c6e:	e7f6      	b.n	8005c5e <_strtod_l+0x28e>
 8005c70:	080097f8 	.word	0x080097f8
 8005c74:	080095a8 	.word	0x080095a8
 8005c78:	7ff00000 	.word	0x7ff00000
 8005c7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c7e:	1c59      	adds	r1, r3, #1
 8005c80:	911d      	str	r1, [sp, #116]	; 0x74
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b30      	cmp	r3, #48	; 0x30
 8005c86:	d0f9      	beq.n	8005c7c <_strtod_l+0x2ac>
 8005c88:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005c8c:	2908      	cmp	r1, #8
 8005c8e:	f63f af79 	bhi.w	8005b84 <_strtod_l+0x1b4>
 8005c92:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005c96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c98:	9308      	str	r3, [sp, #32]
 8005c9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c9c:	1c59      	adds	r1, r3, #1
 8005c9e:	911d      	str	r1, [sp, #116]	; 0x74
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005ca6:	2e09      	cmp	r6, #9
 8005ca8:	d937      	bls.n	8005d1a <_strtod_l+0x34a>
 8005caa:	9e08      	ldr	r6, [sp, #32]
 8005cac:	1b89      	subs	r1, r1, r6
 8005cae:	2908      	cmp	r1, #8
 8005cb0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005cb4:	dc02      	bgt.n	8005cbc <_strtod_l+0x2ec>
 8005cb6:	4576      	cmp	r6, lr
 8005cb8:	bfa8      	it	ge
 8005cba:	4676      	movge	r6, lr
 8005cbc:	f1bc 0f00 	cmp.w	ip, #0
 8005cc0:	d000      	beq.n	8005cc4 <_strtod_l+0x2f4>
 8005cc2:	4276      	negs	r6, r6
 8005cc4:	2d00      	cmp	r5, #0
 8005cc6:	d14f      	bne.n	8005d68 <_strtod_l+0x398>
 8005cc8:	9904      	ldr	r1, [sp, #16]
 8005cca:	4301      	orrs	r1, r0
 8005ccc:	f47f aec2 	bne.w	8005a54 <_strtod_l+0x84>
 8005cd0:	2a00      	cmp	r2, #0
 8005cd2:	f47f aedb 	bne.w	8005a8c <_strtod_l+0xbc>
 8005cd6:	2b69      	cmp	r3, #105	; 0x69
 8005cd8:	d027      	beq.n	8005d2a <_strtod_l+0x35a>
 8005cda:	dc24      	bgt.n	8005d26 <_strtod_l+0x356>
 8005cdc:	2b49      	cmp	r3, #73	; 0x49
 8005cde:	d024      	beq.n	8005d2a <_strtod_l+0x35a>
 8005ce0:	2b4e      	cmp	r3, #78	; 0x4e
 8005ce2:	f47f aed3 	bne.w	8005a8c <_strtod_l+0xbc>
 8005ce6:	499e      	ldr	r1, [pc, #632]	; (8005f60 <_strtod_l+0x590>)
 8005ce8:	a81d      	add	r0, sp, #116	; 0x74
 8005cea:	f001 fe49 	bl	8007980 <__match>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f aecc 	beq.w	8005a8c <_strtod_l+0xbc>
 8005cf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b28      	cmp	r3, #40	; 0x28
 8005cfa:	d12d      	bne.n	8005d58 <_strtod_l+0x388>
 8005cfc:	4999      	ldr	r1, [pc, #612]	; (8005f64 <_strtod_l+0x594>)
 8005cfe:	aa20      	add	r2, sp, #128	; 0x80
 8005d00:	a81d      	add	r0, sp, #116	; 0x74
 8005d02:	f001 fe51 	bl	80079a8 <__hexnan>
 8005d06:	2805      	cmp	r0, #5
 8005d08:	d126      	bne.n	8005d58 <_strtod_l+0x388>
 8005d0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d0c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005d10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005d14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005d18:	e69c      	b.n	8005a54 <_strtod_l+0x84>
 8005d1a:	210a      	movs	r1, #10
 8005d1c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005d20:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005d24:	e7b9      	b.n	8005c9a <_strtod_l+0x2ca>
 8005d26:	2b6e      	cmp	r3, #110	; 0x6e
 8005d28:	e7db      	b.n	8005ce2 <_strtod_l+0x312>
 8005d2a:	498f      	ldr	r1, [pc, #572]	; (8005f68 <_strtod_l+0x598>)
 8005d2c:	a81d      	add	r0, sp, #116	; 0x74
 8005d2e:	f001 fe27 	bl	8007980 <__match>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f43f aeaa 	beq.w	8005a8c <_strtod_l+0xbc>
 8005d38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d3a:	498c      	ldr	r1, [pc, #560]	; (8005f6c <_strtod_l+0x59c>)
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	a81d      	add	r0, sp, #116	; 0x74
 8005d40:	931d      	str	r3, [sp, #116]	; 0x74
 8005d42:	f001 fe1d 	bl	8007980 <__match>
 8005d46:	b910      	cbnz	r0, 8005d4e <_strtod_l+0x37e>
 8005d48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	931d      	str	r3, [sp, #116]	; 0x74
 8005d4e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005f7c <_strtod_l+0x5ac>
 8005d52:	f04f 0a00 	mov.w	sl, #0
 8005d56:	e67d      	b.n	8005a54 <_strtod_l+0x84>
 8005d58:	4885      	ldr	r0, [pc, #532]	; (8005f70 <_strtod_l+0x5a0>)
 8005d5a:	f002 fdbd 	bl	80088d8 <nan>
 8005d5e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005d62:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005d66:	e675      	b.n	8005a54 <_strtod_l+0x84>
 8005d68:	9b07      	ldr	r3, [sp, #28]
 8005d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d6c:	1af3      	subs	r3, r6, r3
 8005d6e:	2f00      	cmp	r7, #0
 8005d70:	bf08      	it	eq
 8005d72:	462f      	moveq	r7, r5
 8005d74:	2d10      	cmp	r5, #16
 8005d76:	9308      	str	r3, [sp, #32]
 8005d78:	46a8      	mov	r8, r5
 8005d7a:	bfa8      	it	ge
 8005d7c:	f04f 0810 	movge.w	r8, #16
 8005d80:	f7fa fbc0 	bl	8000504 <__aeabi_ui2d>
 8005d84:	2d09      	cmp	r5, #9
 8005d86:	4682      	mov	sl, r0
 8005d88:	468b      	mov	fp, r1
 8005d8a:	dd13      	ble.n	8005db4 <_strtod_l+0x3e4>
 8005d8c:	4b79      	ldr	r3, [pc, #484]	; (8005f74 <_strtod_l+0x5a4>)
 8005d8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d96:	f7fa fc2f 	bl	80005f8 <__aeabi_dmul>
 8005d9a:	4682      	mov	sl, r0
 8005d9c:	4648      	mov	r0, r9
 8005d9e:	468b      	mov	fp, r1
 8005da0:	f7fa fbb0 	bl	8000504 <__aeabi_ui2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4650      	mov	r0, sl
 8005daa:	4659      	mov	r1, fp
 8005dac:	f7fa fa6e 	bl	800028c <__adddf3>
 8005db0:	4682      	mov	sl, r0
 8005db2:	468b      	mov	fp, r1
 8005db4:	2d0f      	cmp	r5, #15
 8005db6:	dc38      	bgt.n	8005e2a <_strtod_l+0x45a>
 8005db8:	9b08      	ldr	r3, [sp, #32]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f43f ae4a 	beq.w	8005a54 <_strtod_l+0x84>
 8005dc0:	dd24      	ble.n	8005e0c <_strtod_l+0x43c>
 8005dc2:	2b16      	cmp	r3, #22
 8005dc4:	dc0b      	bgt.n	8005dde <_strtod_l+0x40e>
 8005dc6:	4d6b      	ldr	r5, [pc, #428]	; (8005f74 <_strtod_l+0x5a4>)
 8005dc8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005dcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	465b      	mov	r3, fp
 8005dd4:	f7fa fc10 	bl	80005f8 <__aeabi_dmul>
 8005dd8:	4682      	mov	sl, r0
 8005dda:	468b      	mov	fp, r1
 8005ddc:	e63a      	b.n	8005a54 <_strtod_l+0x84>
 8005dde:	9a08      	ldr	r2, [sp, #32]
 8005de0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005de4:	4293      	cmp	r3, r2
 8005de6:	db20      	blt.n	8005e2a <_strtod_l+0x45a>
 8005de8:	4c62      	ldr	r4, [pc, #392]	; (8005f74 <_strtod_l+0x5a4>)
 8005dea:	f1c5 050f 	rsb	r5, r5, #15
 8005dee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005df2:	4652      	mov	r2, sl
 8005df4:	465b      	mov	r3, fp
 8005df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dfa:	f7fa fbfd 	bl	80005f8 <__aeabi_dmul>
 8005dfe:	9b08      	ldr	r3, [sp, #32]
 8005e00:	1b5d      	subs	r5, r3, r5
 8005e02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005e06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e0a:	e7e3      	b.n	8005dd4 <_strtod_l+0x404>
 8005e0c:	9b08      	ldr	r3, [sp, #32]
 8005e0e:	3316      	adds	r3, #22
 8005e10:	db0b      	blt.n	8005e2a <_strtod_l+0x45a>
 8005e12:	9b07      	ldr	r3, [sp, #28]
 8005e14:	4a57      	ldr	r2, [pc, #348]	; (8005f74 <_strtod_l+0x5a4>)
 8005e16:	1b9e      	subs	r6, r3, r6
 8005e18:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005e1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	f7fa fd12 	bl	800084c <__aeabi_ddiv>
 8005e28:	e7d6      	b.n	8005dd8 <_strtod_l+0x408>
 8005e2a:	9b08      	ldr	r3, [sp, #32]
 8005e2c:	eba5 0808 	sub.w	r8, r5, r8
 8005e30:	4498      	add	r8, r3
 8005e32:	f1b8 0f00 	cmp.w	r8, #0
 8005e36:	dd71      	ble.n	8005f1c <_strtod_l+0x54c>
 8005e38:	f018 030f 	ands.w	r3, r8, #15
 8005e3c:	d00a      	beq.n	8005e54 <_strtod_l+0x484>
 8005e3e:	494d      	ldr	r1, [pc, #308]	; (8005f74 <_strtod_l+0x5a4>)
 8005e40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e44:	4652      	mov	r2, sl
 8005e46:	465b      	mov	r3, fp
 8005e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e4c:	f7fa fbd4 	bl	80005f8 <__aeabi_dmul>
 8005e50:	4682      	mov	sl, r0
 8005e52:	468b      	mov	fp, r1
 8005e54:	f038 080f 	bics.w	r8, r8, #15
 8005e58:	d04d      	beq.n	8005ef6 <_strtod_l+0x526>
 8005e5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005e5e:	dd22      	ble.n	8005ea6 <_strtod_l+0x4d6>
 8005e60:	2500      	movs	r5, #0
 8005e62:	462e      	mov	r6, r5
 8005e64:	9509      	str	r5, [sp, #36]	; 0x24
 8005e66:	9507      	str	r5, [sp, #28]
 8005e68:	2322      	movs	r3, #34	; 0x22
 8005e6a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005f7c <_strtod_l+0x5ac>
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	f04f 0a00 	mov.w	sl, #0
 8005e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f43f adec 	beq.w	8005a54 <_strtod_l+0x84>
 8005e7c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f001 fe9a 	bl	8007bb8 <_Bfree>
 8005e84:	9907      	ldr	r1, [sp, #28]
 8005e86:	4620      	mov	r0, r4
 8005e88:	f001 fe96 	bl	8007bb8 <_Bfree>
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f001 fe92 	bl	8007bb8 <_Bfree>
 8005e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e96:	4620      	mov	r0, r4
 8005e98:	f001 fe8e 	bl	8007bb8 <_Bfree>
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f001 fe8a 	bl	8007bb8 <_Bfree>
 8005ea4:	e5d6      	b.n	8005a54 <_strtod_l+0x84>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005eac:	4650      	mov	r0, sl
 8005eae:	4659      	mov	r1, fp
 8005eb0:	4699      	mov	r9, r3
 8005eb2:	f1b8 0f01 	cmp.w	r8, #1
 8005eb6:	dc21      	bgt.n	8005efc <_strtod_l+0x52c>
 8005eb8:	b10b      	cbz	r3, 8005ebe <_strtod_l+0x4ee>
 8005eba:	4682      	mov	sl, r0
 8005ebc:	468b      	mov	fp, r1
 8005ebe:	4b2e      	ldr	r3, [pc, #184]	; (8005f78 <_strtod_l+0x5a8>)
 8005ec0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005ec4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005ec8:	4652      	mov	r2, sl
 8005eca:	465b      	mov	r3, fp
 8005ecc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005ed0:	f7fa fb92 	bl	80005f8 <__aeabi_dmul>
 8005ed4:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <_strtod_l+0x5ac>)
 8005ed6:	460a      	mov	r2, r1
 8005ed8:	400b      	ands	r3, r1
 8005eda:	4929      	ldr	r1, [pc, #164]	; (8005f80 <_strtod_l+0x5b0>)
 8005edc:	428b      	cmp	r3, r1
 8005ede:	4682      	mov	sl, r0
 8005ee0:	d8be      	bhi.n	8005e60 <_strtod_l+0x490>
 8005ee2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ee6:	428b      	cmp	r3, r1
 8005ee8:	bf86      	itte	hi
 8005eea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005f84 <_strtod_l+0x5b4>
 8005eee:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ef2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9304      	str	r3, [sp, #16]
 8005efa:	e081      	b.n	8006000 <_strtod_l+0x630>
 8005efc:	f018 0f01 	tst.w	r8, #1
 8005f00:	d007      	beq.n	8005f12 <_strtod_l+0x542>
 8005f02:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <_strtod_l+0x5a8>)
 8005f04:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa fb74 	bl	80005f8 <__aeabi_dmul>
 8005f10:	2301      	movs	r3, #1
 8005f12:	f109 0901 	add.w	r9, r9, #1
 8005f16:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f1a:	e7ca      	b.n	8005eb2 <_strtod_l+0x4e2>
 8005f1c:	d0eb      	beq.n	8005ef6 <_strtod_l+0x526>
 8005f1e:	f1c8 0800 	rsb	r8, r8, #0
 8005f22:	f018 020f 	ands.w	r2, r8, #15
 8005f26:	d00a      	beq.n	8005f3e <_strtod_l+0x56e>
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <_strtod_l+0x5a4>)
 8005f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f2e:	4650      	mov	r0, sl
 8005f30:	4659      	mov	r1, fp
 8005f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f36:	f7fa fc89 	bl	800084c <__aeabi_ddiv>
 8005f3a:	4682      	mov	sl, r0
 8005f3c:	468b      	mov	fp, r1
 8005f3e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005f42:	d0d8      	beq.n	8005ef6 <_strtod_l+0x526>
 8005f44:	f1b8 0f1f 	cmp.w	r8, #31
 8005f48:	dd1e      	ble.n	8005f88 <_strtod_l+0x5b8>
 8005f4a:	2500      	movs	r5, #0
 8005f4c:	462e      	mov	r6, r5
 8005f4e:	9509      	str	r5, [sp, #36]	; 0x24
 8005f50:	9507      	str	r5, [sp, #28]
 8005f52:	2322      	movs	r3, #34	; 0x22
 8005f54:	f04f 0a00 	mov.w	sl, #0
 8005f58:	f04f 0b00 	mov.w	fp, #0
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	e789      	b.n	8005e74 <_strtod_l+0x4a4>
 8005f60:	08009579 	.word	0x08009579
 8005f64:	080095bc 	.word	0x080095bc
 8005f68:	08009571 	.word	0x08009571
 8005f6c:	080096fc 	.word	0x080096fc
 8005f70:	080099b8 	.word	0x080099b8
 8005f74:	08009898 	.word	0x08009898
 8005f78:	08009870 	.word	0x08009870
 8005f7c:	7ff00000 	.word	0x7ff00000
 8005f80:	7ca00000 	.word	0x7ca00000
 8005f84:	7fefffff 	.word	0x7fefffff
 8005f88:	f018 0310 	ands.w	r3, r8, #16
 8005f8c:	bf18      	it	ne
 8005f8e:	236a      	movne	r3, #106	; 0x6a
 8005f90:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006348 <_strtod_l+0x978>
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	4650      	mov	r0, sl
 8005f98:	4659      	mov	r1, fp
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f018 0f01 	tst.w	r8, #1
 8005fa0:	d004      	beq.n	8005fac <_strtod_l+0x5dc>
 8005fa2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005fa6:	f7fa fb27 	bl	80005f8 <__aeabi_dmul>
 8005faa:	2301      	movs	r3, #1
 8005fac:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005fb0:	f109 0908 	add.w	r9, r9, #8
 8005fb4:	d1f2      	bne.n	8005f9c <_strtod_l+0x5cc>
 8005fb6:	b10b      	cbz	r3, 8005fbc <_strtod_l+0x5ec>
 8005fb8:	4682      	mov	sl, r0
 8005fba:	468b      	mov	fp, r1
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	b1bb      	cbz	r3, 8005ff0 <_strtod_l+0x620>
 8005fc0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005fc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	4659      	mov	r1, fp
 8005fcc:	dd10      	ble.n	8005ff0 <_strtod_l+0x620>
 8005fce:	2b1f      	cmp	r3, #31
 8005fd0:	f340 8128 	ble.w	8006224 <_strtod_l+0x854>
 8005fd4:	2b34      	cmp	r3, #52	; 0x34
 8005fd6:	bfde      	ittt	le
 8005fd8:	3b20      	suble	r3, #32
 8005fda:	f04f 32ff 	movle.w	r2, #4294967295
 8005fde:	fa02 f303 	lslle.w	r3, r2, r3
 8005fe2:	f04f 0a00 	mov.w	sl, #0
 8005fe6:	bfcc      	ite	gt
 8005fe8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005fec:	ea03 0b01 	andle.w	fp, r3, r1
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	4659      	mov	r1, fp
 8005ff8:	f7fa fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d1a4      	bne.n	8005f4a <_strtod_l+0x57a>
 8006000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006006:	462b      	mov	r3, r5
 8006008:	463a      	mov	r2, r7
 800600a:	4620      	mov	r0, r4
 800600c:	f001 fe40 	bl	8007c90 <__s2b>
 8006010:	9009      	str	r0, [sp, #36]	; 0x24
 8006012:	2800      	cmp	r0, #0
 8006014:	f43f af24 	beq.w	8005e60 <_strtod_l+0x490>
 8006018:	9b07      	ldr	r3, [sp, #28]
 800601a:	1b9e      	subs	r6, r3, r6
 800601c:	9b08      	ldr	r3, [sp, #32]
 800601e:	2b00      	cmp	r3, #0
 8006020:	bfb4      	ite	lt
 8006022:	4633      	movlt	r3, r6
 8006024:	2300      	movge	r3, #0
 8006026:	9310      	str	r3, [sp, #64]	; 0x40
 8006028:	9b08      	ldr	r3, [sp, #32]
 800602a:	2500      	movs	r5, #0
 800602c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006030:	9318      	str	r3, [sp, #96]	; 0x60
 8006032:	462e      	mov	r6, r5
 8006034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006036:	4620      	mov	r0, r4
 8006038:	6859      	ldr	r1, [r3, #4]
 800603a:	f001 fd7d 	bl	8007b38 <_Balloc>
 800603e:	9007      	str	r0, [sp, #28]
 8006040:	2800      	cmp	r0, #0
 8006042:	f43f af11 	beq.w	8005e68 <_strtod_l+0x498>
 8006046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	3202      	adds	r2, #2
 800604c:	f103 010c 	add.w	r1, r3, #12
 8006050:	0092      	lsls	r2, r2, #2
 8006052:	300c      	adds	r0, #12
 8006054:	f001 fd62 	bl	8007b1c <memcpy>
 8006058:	ec4b ab10 	vmov	d0, sl, fp
 800605c:	aa20      	add	r2, sp, #128	; 0x80
 800605e:	a91f      	add	r1, sp, #124	; 0x7c
 8006060:	4620      	mov	r0, r4
 8006062:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006066:	f002 f94f 	bl	8008308 <__d2b>
 800606a:	901e      	str	r0, [sp, #120]	; 0x78
 800606c:	2800      	cmp	r0, #0
 800606e:	f43f aefb 	beq.w	8005e68 <_strtod_l+0x498>
 8006072:	2101      	movs	r1, #1
 8006074:	4620      	mov	r0, r4
 8006076:	f001 fea5 	bl	8007dc4 <__i2b>
 800607a:	4606      	mov	r6, r0
 800607c:	2800      	cmp	r0, #0
 800607e:	f43f aef3 	beq.w	8005e68 <_strtod_l+0x498>
 8006082:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006084:	9904      	ldr	r1, [sp, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	bfab      	itete	ge
 800608a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800608c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800608e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006090:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006094:	bfac      	ite	ge
 8006096:	eb03 0902 	addge.w	r9, r3, r2
 800609a:	1ad7      	sublt	r7, r2, r3
 800609c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800609e:	eba3 0801 	sub.w	r8, r3, r1
 80060a2:	4490      	add	r8, r2
 80060a4:	4ba3      	ldr	r3, [pc, #652]	; (8006334 <_strtod_l+0x964>)
 80060a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80060aa:	4598      	cmp	r8, r3
 80060ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060b0:	f280 80cc 	bge.w	800624c <_strtod_l+0x87c>
 80060b4:	eba3 0308 	sub.w	r3, r3, r8
 80060b8:	2b1f      	cmp	r3, #31
 80060ba:	eba2 0203 	sub.w	r2, r2, r3
 80060be:	f04f 0101 	mov.w	r1, #1
 80060c2:	f300 80b6 	bgt.w	8006232 <_strtod_l+0x862>
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	9311      	str	r3, [sp, #68]	; 0x44
 80060cc:	2300      	movs	r3, #0
 80060ce:	930c      	str	r3, [sp, #48]	; 0x30
 80060d0:	eb09 0802 	add.w	r8, r9, r2
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	45c1      	cmp	r9, r8
 80060d8:	4417      	add	r7, r2
 80060da:	441f      	add	r7, r3
 80060dc:	464b      	mov	r3, r9
 80060de:	bfa8      	it	ge
 80060e0:	4643      	movge	r3, r8
 80060e2:	42bb      	cmp	r3, r7
 80060e4:	bfa8      	it	ge
 80060e6:	463b      	movge	r3, r7
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bfc2      	ittt	gt
 80060ec:	eba8 0803 	subgt.w	r8, r8, r3
 80060f0:	1aff      	subgt	r7, r7, r3
 80060f2:	eba9 0903 	subgt.w	r9, r9, r3
 80060f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dd17      	ble.n	800612c <_strtod_l+0x75c>
 80060fc:	4631      	mov	r1, r6
 80060fe:	461a      	mov	r2, r3
 8006100:	4620      	mov	r0, r4
 8006102:	f001 ff1b 	bl	8007f3c <__pow5mult>
 8006106:	4606      	mov	r6, r0
 8006108:	2800      	cmp	r0, #0
 800610a:	f43f aead 	beq.w	8005e68 <_strtod_l+0x498>
 800610e:	4601      	mov	r1, r0
 8006110:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006112:	4620      	mov	r0, r4
 8006114:	f001 fe6c 	bl	8007df0 <__multiply>
 8006118:	900f      	str	r0, [sp, #60]	; 0x3c
 800611a:	2800      	cmp	r0, #0
 800611c:	f43f aea4 	beq.w	8005e68 <_strtod_l+0x498>
 8006120:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006122:	4620      	mov	r0, r4
 8006124:	f001 fd48 	bl	8007bb8 <_Bfree>
 8006128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800612a:	931e      	str	r3, [sp, #120]	; 0x78
 800612c:	f1b8 0f00 	cmp.w	r8, #0
 8006130:	f300 8091 	bgt.w	8006256 <_strtod_l+0x886>
 8006134:	9b08      	ldr	r3, [sp, #32]
 8006136:	2b00      	cmp	r3, #0
 8006138:	dd08      	ble.n	800614c <_strtod_l+0x77c>
 800613a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800613c:	9907      	ldr	r1, [sp, #28]
 800613e:	4620      	mov	r0, r4
 8006140:	f001 fefc 	bl	8007f3c <__pow5mult>
 8006144:	9007      	str	r0, [sp, #28]
 8006146:	2800      	cmp	r0, #0
 8006148:	f43f ae8e 	beq.w	8005e68 <_strtod_l+0x498>
 800614c:	2f00      	cmp	r7, #0
 800614e:	dd08      	ble.n	8006162 <_strtod_l+0x792>
 8006150:	9907      	ldr	r1, [sp, #28]
 8006152:	463a      	mov	r2, r7
 8006154:	4620      	mov	r0, r4
 8006156:	f001 ff4b 	bl	8007ff0 <__lshift>
 800615a:	9007      	str	r0, [sp, #28]
 800615c:	2800      	cmp	r0, #0
 800615e:	f43f ae83 	beq.w	8005e68 <_strtod_l+0x498>
 8006162:	f1b9 0f00 	cmp.w	r9, #0
 8006166:	dd08      	ble.n	800617a <_strtod_l+0x7aa>
 8006168:	4631      	mov	r1, r6
 800616a:	464a      	mov	r2, r9
 800616c:	4620      	mov	r0, r4
 800616e:	f001 ff3f 	bl	8007ff0 <__lshift>
 8006172:	4606      	mov	r6, r0
 8006174:	2800      	cmp	r0, #0
 8006176:	f43f ae77 	beq.w	8005e68 <_strtod_l+0x498>
 800617a:	9a07      	ldr	r2, [sp, #28]
 800617c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800617e:	4620      	mov	r0, r4
 8006180:	f001 ffbe 	bl	8008100 <__mdiff>
 8006184:	4605      	mov	r5, r0
 8006186:	2800      	cmp	r0, #0
 8006188:	f43f ae6e 	beq.w	8005e68 <_strtod_l+0x498>
 800618c:	68c3      	ldr	r3, [r0, #12]
 800618e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006190:	2300      	movs	r3, #0
 8006192:	60c3      	str	r3, [r0, #12]
 8006194:	4631      	mov	r1, r6
 8006196:	f001 ff97 	bl	80080c8 <__mcmp>
 800619a:	2800      	cmp	r0, #0
 800619c:	da65      	bge.n	800626a <_strtod_l+0x89a>
 800619e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061a0:	ea53 030a 	orrs.w	r3, r3, sl
 80061a4:	f040 8087 	bne.w	80062b6 <_strtod_l+0x8e6>
 80061a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 8082 	bne.w	80062b6 <_strtod_l+0x8e6>
 80061b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061b6:	0d1b      	lsrs	r3, r3, #20
 80061b8:	051b      	lsls	r3, r3, #20
 80061ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80061be:	d97a      	bls.n	80062b6 <_strtod_l+0x8e6>
 80061c0:	696b      	ldr	r3, [r5, #20]
 80061c2:	b913      	cbnz	r3, 80061ca <_strtod_l+0x7fa>
 80061c4:	692b      	ldr	r3, [r5, #16]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	dd75      	ble.n	80062b6 <_strtod_l+0x8e6>
 80061ca:	4629      	mov	r1, r5
 80061cc:	2201      	movs	r2, #1
 80061ce:	4620      	mov	r0, r4
 80061d0:	f001 ff0e 	bl	8007ff0 <__lshift>
 80061d4:	4631      	mov	r1, r6
 80061d6:	4605      	mov	r5, r0
 80061d8:	f001 ff76 	bl	80080c8 <__mcmp>
 80061dc:	2800      	cmp	r0, #0
 80061de:	dd6a      	ble.n	80062b6 <_strtod_l+0x8e6>
 80061e0:	9904      	ldr	r1, [sp, #16]
 80061e2:	4a55      	ldr	r2, [pc, #340]	; (8006338 <_strtod_l+0x968>)
 80061e4:	465b      	mov	r3, fp
 80061e6:	2900      	cmp	r1, #0
 80061e8:	f000 8085 	beq.w	80062f6 <_strtod_l+0x926>
 80061ec:	ea02 010b 	and.w	r1, r2, fp
 80061f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80061f4:	dc7f      	bgt.n	80062f6 <_strtod_l+0x926>
 80061f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80061fa:	f77f aeaa 	ble.w	8005f52 <_strtod_l+0x582>
 80061fe:	4a4f      	ldr	r2, [pc, #316]	; (800633c <_strtod_l+0x96c>)
 8006200:	2300      	movs	r3, #0
 8006202:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006206:	4650      	mov	r0, sl
 8006208:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800620c:	4659      	mov	r1, fp
 800620e:	f7fa f9f3 	bl	80005f8 <__aeabi_dmul>
 8006212:	460b      	mov	r3, r1
 8006214:	4303      	orrs	r3, r0
 8006216:	bf08      	it	eq
 8006218:	2322      	moveq	r3, #34	; 0x22
 800621a:	4682      	mov	sl, r0
 800621c:	468b      	mov	fp, r1
 800621e:	bf08      	it	eq
 8006220:	6023      	streq	r3, [r4, #0]
 8006222:	e62b      	b.n	8005e7c <_strtod_l+0x4ac>
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	ea03 0a0a 	and.w	sl, r3, sl
 8006230:	e6de      	b.n	8005ff0 <_strtod_l+0x620>
 8006232:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006236:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800623a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800623e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006242:	fa01 f308 	lsl.w	r3, r1, r8
 8006246:	930c      	str	r3, [sp, #48]	; 0x30
 8006248:	9111      	str	r1, [sp, #68]	; 0x44
 800624a:	e741      	b.n	80060d0 <_strtod_l+0x700>
 800624c:	2300      	movs	r3, #0
 800624e:	930c      	str	r3, [sp, #48]	; 0x30
 8006250:	2301      	movs	r3, #1
 8006252:	9311      	str	r3, [sp, #68]	; 0x44
 8006254:	e73c      	b.n	80060d0 <_strtod_l+0x700>
 8006256:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006258:	4642      	mov	r2, r8
 800625a:	4620      	mov	r0, r4
 800625c:	f001 fec8 	bl	8007ff0 <__lshift>
 8006260:	901e      	str	r0, [sp, #120]	; 0x78
 8006262:	2800      	cmp	r0, #0
 8006264:	f47f af66 	bne.w	8006134 <_strtod_l+0x764>
 8006268:	e5fe      	b.n	8005e68 <_strtod_l+0x498>
 800626a:	465f      	mov	r7, fp
 800626c:	d16e      	bne.n	800634c <_strtod_l+0x97c>
 800626e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006274:	b342      	cbz	r2, 80062c8 <_strtod_l+0x8f8>
 8006276:	4a32      	ldr	r2, [pc, #200]	; (8006340 <_strtod_l+0x970>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d128      	bne.n	80062ce <_strtod_l+0x8fe>
 800627c:	9b04      	ldr	r3, [sp, #16]
 800627e:	4650      	mov	r0, sl
 8006280:	b1eb      	cbz	r3, 80062be <_strtod_l+0x8ee>
 8006282:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <_strtod_l+0x968>)
 8006284:	403a      	ands	r2, r7
 8006286:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800628a:	f04f 31ff 	mov.w	r1, #4294967295
 800628e:	d819      	bhi.n	80062c4 <_strtod_l+0x8f4>
 8006290:	0d12      	lsrs	r2, r2, #20
 8006292:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006296:	fa01 f303 	lsl.w	r3, r1, r3
 800629a:	4298      	cmp	r0, r3
 800629c:	d117      	bne.n	80062ce <_strtod_l+0x8fe>
 800629e:	4b29      	ldr	r3, [pc, #164]	; (8006344 <_strtod_l+0x974>)
 80062a0:	429f      	cmp	r7, r3
 80062a2:	d102      	bne.n	80062aa <_strtod_l+0x8da>
 80062a4:	3001      	adds	r0, #1
 80062a6:	f43f addf 	beq.w	8005e68 <_strtod_l+0x498>
 80062aa:	4b23      	ldr	r3, [pc, #140]	; (8006338 <_strtod_l+0x968>)
 80062ac:	403b      	ands	r3, r7
 80062ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80062b2:	f04f 0a00 	mov.w	sl, #0
 80062b6:	9b04      	ldr	r3, [sp, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1a0      	bne.n	80061fe <_strtod_l+0x82e>
 80062bc:	e5de      	b.n	8005e7c <_strtod_l+0x4ac>
 80062be:	f04f 33ff 	mov.w	r3, #4294967295
 80062c2:	e7ea      	b.n	800629a <_strtod_l+0x8ca>
 80062c4:	460b      	mov	r3, r1
 80062c6:	e7e8      	b.n	800629a <_strtod_l+0x8ca>
 80062c8:	ea53 030a 	orrs.w	r3, r3, sl
 80062cc:	d088      	beq.n	80061e0 <_strtod_l+0x810>
 80062ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062d0:	b1db      	cbz	r3, 800630a <_strtod_l+0x93a>
 80062d2:	423b      	tst	r3, r7
 80062d4:	d0ef      	beq.n	80062b6 <_strtod_l+0x8e6>
 80062d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062d8:	9a04      	ldr	r2, [sp, #16]
 80062da:	4650      	mov	r0, sl
 80062dc:	4659      	mov	r1, fp
 80062de:	b1c3      	cbz	r3, 8006312 <_strtod_l+0x942>
 80062e0:	f7ff fb58 	bl	8005994 <sulp>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062ec:	f7f9 ffce 	bl	800028c <__adddf3>
 80062f0:	4682      	mov	sl, r0
 80062f2:	468b      	mov	fp, r1
 80062f4:	e7df      	b.n	80062b6 <_strtod_l+0x8e6>
 80062f6:	4013      	ands	r3, r2
 80062f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80062fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006300:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006304:	f04f 3aff 	mov.w	sl, #4294967295
 8006308:	e7d5      	b.n	80062b6 <_strtod_l+0x8e6>
 800630a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800630c:	ea13 0f0a 	tst.w	r3, sl
 8006310:	e7e0      	b.n	80062d4 <_strtod_l+0x904>
 8006312:	f7ff fb3f 	bl	8005994 <sulp>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800631e:	f7f9 ffb3 	bl	8000288 <__aeabi_dsub>
 8006322:	2200      	movs	r2, #0
 8006324:	2300      	movs	r3, #0
 8006326:	4682      	mov	sl, r0
 8006328:	468b      	mov	fp, r1
 800632a:	f7fa fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800632e:	2800      	cmp	r0, #0
 8006330:	d0c1      	beq.n	80062b6 <_strtod_l+0x8e6>
 8006332:	e60e      	b.n	8005f52 <_strtod_l+0x582>
 8006334:	fffffc02 	.word	0xfffffc02
 8006338:	7ff00000 	.word	0x7ff00000
 800633c:	39500000 	.word	0x39500000
 8006340:	000fffff 	.word	0x000fffff
 8006344:	7fefffff 	.word	0x7fefffff
 8006348:	080095d0 	.word	0x080095d0
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	f002 f836 	bl	80083c0 <__ratio>
 8006354:	ec59 8b10 	vmov	r8, r9, d0
 8006358:	ee10 0a10 	vmov	r0, s0
 800635c:	2200      	movs	r2, #0
 800635e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006362:	4649      	mov	r1, r9
 8006364:	f7fa fbc4 	bl	8000af0 <__aeabi_dcmple>
 8006368:	2800      	cmp	r0, #0
 800636a:	d07c      	beq.n	8006466 <_strtod_l+0xa96>
 800636c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d04c      	beq.n	800640c <_strtod_l+0xa3c>
 8006372:	4b95      	ldr	r3, [pc, #596]	; (80065c8 <_strtod_l+0xbf8>)
 8006374:	2200      	movs	r2, #0
 8006376:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800637a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80065c8 <_strtod_l+0xbf8>
 800637e:	f04f 0800 	mov.w	r8, #0
 8006382:	4b92      	ldr	r3, [pc, #584]	; (80065cc <_strtod_l+0xbfc>)
 8006384:	403b      	ands	r3, r7
 8006386:	9311      	str	r3, [sp, #68]	; 0x44
 8006388:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800638a:	4b91      	ldr	r3, [pc, #580]	; (80065d0 <_strtod_l+0xc00>)
 800638c:	429a      	cmp	r2, r3
 800638e:	f040 80b2 	bne.w	80064f6 <_strtod_l+0xb26>
 8006392:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800639a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800639e:	ec4b ab10 	vmov	d0, sl, fp
 80063a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80063a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80063aa:	f001 ff31 	bl	8008210 <__ulp>
 80063ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063b2:	ec53 2b10 	vmov	r2, r3, d0
 80063b6:	f7fa f91f 	bl	80005f8 <__aeabi_dmul>
 80063ba:	4652      	mov	r2, sl
 80063bc:	465b      	mov	r3, fp
 80063be:	f7f9 ff65 	bl	800028c <__adddf3>
 80063c2:	460b      	mov	r3, r1
 80063c4:	4981      	ldr	r1, [pc, #516]	; (80065cc <_strtod_l+0xbfc>)
 80063c6:	4a83      	ldr	r2, [pc, #524]	; (80065d4 <_strtod_l+0xc04>)
 80063c8:	4019      	ands	r1, r3
 80063ca:	4291      	cmp	r1, r2
 80063cc:	4682      	mov	sl, r0
 80063ce:	d95e      	bls.n	800648e <_strtod_l+0xabe>
 80063d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d103      	bne.n	80063e2 <_strtod_l+0xa12>
 80063da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063dc:	3301      	adds	r3, #1
 80063de:	f43f ad43 	beq.w	8005e68 <_strtod_l+0x498>
 80063e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80065e0 <_strtod_l+0xc10>
 80063e6:	f04f 3aff 	mov.w	sl, #4294967295
 80063ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 80063ec:	4620      	mov	r0, r4
 80063ee:	f001 fbe3 	bl	8007bb8 <_Bfree>
 80063f2:	9907      	ldr	r1, [sp, #28]
 80063f4:	4620      	mov	r0, r4
 80063f6:	f001 fbdf 	bl	8007bb8 <_Bfree>
 80063fa:	4631      	mov	r1, r6
 80063fc:	4620      	mov	r0, r4
 80063fe:	f001 fbdb 	bl	8007bb8 <_Bfree>
 8006402:	4629      	mov	r1, r5
 8006404:	4620      	mov	r0, r4
 8006406:	f001 fbd7 	bl	8007bb8 <_Bfree>
 800640a:	e613      	b.n	8006034 <_strtod_l+0x664>
 800640c:	f1ba 0f00 	cmp.w	sl, #0
 8006410:	d11b      	bne.n	800644a <_strtod_l+0xa7a>
 8006412:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006416:	b9f3      	cbnz	r3, 8006456 <_strtod_l+0xa86>
 8006418:	4b6b      	ldr	r3, [pc, #428]	; (80065c8 <_strtod_l+0xbf8>)
 800641a:	2200      	movs	r2, #0
 800641c:	4640      	mov	r0, r8
 800641e:	4649      	mov	r1, r9
 8006420:	f7fa fb5c 	bl	8000adc <__aeabi_dcmplt>
 8006424:	b9d0      	cbnz	r0, 800645c <_strtod_l+0xa8c>
 8006426:	4640      	mov	r0, r8
 8006428:	4649      	mov	r1, r9
 800642a:	4b6b      	ldr	r3, [pc, #428]	; (80065d8 <_strtod_l+0xc08>)
 800642c:	2200      	movs	r2, #0
 800642e:	f7fa f8e3 	bl	80005f8 <__aeabi_dmul>
 8006432:	4680      	mov	r8, r0
 8006434:	4689      	mov	r9, r1
 8006436:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800643a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800643e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006440:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006444:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006448:	e79b      	b.n	8006382 <_strtod_l+0x9b2>
 800644a:	f1ba 0f01 	cmp.w	sl, #1
 800644e:	d102      	bne.n	8006456 <_strtod_l+0xa86>
 8006450:	2f00      	cmp	r7, #0
 8006452:	f43f ad7e 	beq.w	8005f52 <_strtod_l+0x582>
 8006456:	4b61      	ldr	r3, [pc, #388]	; (80065dc <_strtod_l+0xc0c>)
 8006458:	2200      	movs	r2, #0
 800645a:	e78c      	b.n	8006376 <_strtod_l+0x9a6>
 800645c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80065d8 <_strtod_l+0xc08>
 8006460:	f04f 0800 	mov.w	r8, #0
 8006464:	e7e7      	b.n	8006436 <_strtod_l+0xa66>
 8006466:	4b5c      	ldr	r3, [pc, #368]	; (80065d8 <_strtod_l+0xc08>)
 8006468:	4640      	mov	r0, r8
 800646a:	4649      	mov	r1, r9
 800646c:	2200      	movs	r2, #0
 800646e:	f7fa f8c3 	bl	80005f8 <__aeabi_dmul>
 8006472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006474:	4680      	mov	r8, r0
 8006476:	4689      	mov	r9, r1
 8006478:	b933      	cbnz	r3, 8006488 <_strtod_l+0xab8>
 800647a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800647e:	9012      	str	r0, [sp, #72]	; 0x48
 8006480:	9313      	str	r3, [sp, #76]	; 0x4c
 8006482:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006486:	e7dd      	b.n	8006444 <_strtod_l+0xa74>
 8006488:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800648c:	e7f9      	b.n	8006482 <_strtod_l+0xab2>
 800648e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006492:	9b04      	ldr	r3, [sp, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1a8      	bne.n	80063ea <_strtod_l+0xa1a>
 8006498:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800649c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800649e:	0d1b      	lsrs	r3, r3, #20
 80064a0:	051b      	lsls	r3, r3, #20
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d1a1      	bne.n	80063ea <_strtod_l+0xa1a>
 80064a6:	4640      	mov	r0, r8
 80064a8:	4649      	mov	r1, r9
 80064aa:	f7fa fc05 	bl	8000cb8 <__aeabi_d2lz>
 80064ae:	f7fa f875 	bl	800059c <__aeabi_l2d>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7f9 fee5 	bl	8000288 <__aeabi_dsub>
 80064be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064c4:	ea43 030a 	orr.w	r3, r3, sl
 80064c8:	4313      	orrs	r3, r2
 80064ca:	4680      	mov	r8, r0
 80064cc:	4689      	mov	r9, r1
 80064ce:	d053      	beq.n	8006578 <_strtod_l+0xba8>
 80064d0:	a335      	add	r3, pc, #212	; (adr r3, 80065a8 <_strtod_l+0xbd8>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7fa fb01 	bl	8000adc <__aeabi_dcmplt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	f47f acce 	bne.w	8005e7c <_strtod_l+0x4ac>
 80064e0:	a333      	add	r3, pc, #204	; (adr r3, 80065b0 <_strtod_l+0xbe0>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	4640      	mov	r0, r8
 80064e8:	4649      	mov	r1, r9
 80064ea:	f7fa fb15 	bl	8000b18 <__aeabi_dcmpgt>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f43f af7b 	beq.w	80063ea <_strtod_l+0xa1a>
 80064f4:	e4c2      	b.n	8005e7c <_strtod_l+0x4ac>
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	b333      	cbz	r3, 8006548 <_strtod_l+0xb78>
 80064fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006500:	d822      	bhi.n	8006548 <_strtod_l+0xb78>
 8006502:	a32d      	add	r3, pc, #180	; (adr r3, 80065b8 <_strtod_l+0xbe8>)
 8006504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006508:	4640      	mov	r0, r8
 800650a:	4649      	mov	r1, r9
 800650c:	f7fa faf0 	bl	8000af0 <__aeabi_dcmple>
 8006510:	b1a0      	cbz	r0, 800653c <_strtod_l+0xb6c>
 8006512:	4649      	mov	r1, r9
 8006514:	4640      	mov	r0, r8
 8006516:	f7fa fb47 	bl	8000ba8 <__aeabi_d2uiz>
 800651a:	2801      	cmp	r0, #1
 800651c:	bf38      	it	cc
 800651e:	2001      	movcc	r0, #1
 8006520:	f7f9 fff0 	bl	8000504 <__aeabi_ui2d>
 8006524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006526:	4680      	mov	r8, r0
 8006528:	4689      	mov	r9, r1
 800652a:	bb13      	cbnz	r3, 8006572 <_strtod_l+0xba2>
 800652c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006530:	9014      	str	r0, [sp, #80]	; 0x50
 8006532:	9315      	str	r3, [sp, #84]	; 0x54
 8006534:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006538:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800653c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800653e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006540:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006544:	1a9b      	subs	r3, r3, r2
 8006546:	930d      	str	r3, [sp, #52]	; 0x34
 8006548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800654c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006550:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006554:	f001 fe5c 	bl	8008210 <__ulp>
 8006558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800655c:	ec53 2b10 	vmov	r2, r3, d0
 8006560:	f7fa f84a 	bl	80005f8 <__aeabi_dmul>
 8006564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006568:	f7f9 fe90 	bl	800028c <__adddf3>
 800656c:	4682      	mov	sl, r0
 800656e:	468b      	mov	fp, r1
 8006570:	e78f      	b.n	8006492 <_strtod_l+0xac2>
 8006572:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006576:	e7dd      	b.n	8006534 <_strtod_l+0xb64>
 8006578:	a311      	add	r3, pc, #68	; (adr r3, 80065c0 <_strtod_l+0xbf0>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa faad 	bl	8000adc <__aeabi_dcmplt>
 8006582:	e7b4      	b.n	80064ee <_strtod_l+0xb1e>
 8006584:	2300      	movs	r3, #0
 8006586:	930e      	str	r3, [sp, #56]	; 0x38
 8006588:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800658a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	f7ff ba65 	b.w	8005a5c <_strtod_l+0x8c>
 8006592:	2b65      	cmp	r3, #101	; 0x65
 8006594:	f43f ab5d 	beq.w	8005c52 <_strtod_l+0x282>
 8006598:	2b45      	cmp	r3, #69	; 0x45
 800659a:	f43f ab5a 	beq.w	8005c52 <_strtod_l+0x282>
 800659e:	2201      	movs	r2, #1
 80065a0:	f7ff bb92 	b.w	8005cc8 <_strtod_l+0x2f8>
 80065a4:	f3af 8000 	nop.w
 80065a8:	94a03595 	.word	0x94a03595
 80065ac:	3fdfffff 	.word	0x3fdfffff
 80065b0:	35afe535 	.word	0x35afe535
 80065b4:	3fe00000 	.word	0x3fe00000
 80065b8:	ffc00000 	.word	0xffc00000
 80065bc:	41dfffff 	.word	0x41dfffff
 80065c0:	94a03595 	.word	0x94a03595
 80065c4:	3fcfffff 	.word	0x3fcfffff
 80065c8:	3ff00000 	.word	0x3ff00000
 80065cc:	7ff00000 	.word	0x7ff00000
 80065d0:	7fe00000 	.word	0x7fe00000
 80065d4:	7c9fffff 	.word	0x7c9fffff
 80065d8:	3fe00000 	.word	0x3fe00000
 80065dc:	bff00000 	.word	0xbff00000
 80065e0:	7fefffff 	.word	0x7fefffff

080065e4 <_strtod_r>:
 80065e4:	4b01      	ldr	r3, [pc, #4]	; (80065ec <_strtod_r+0x8>)
 80065e6:	f7ff b9f3 	b.w	80059d0 <_strtod_l>
 80065ea:	bf00      	nop
 80065ec:	20000074 	.word	0x20000074

080065f0 <_strtol_l.isra.0>:
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f6:	d001      	beq.n	80065fc <_strtol_l.isra.0+0xc>
 80065f8:	2b24      	cmp	r3, #36	; 0x24
 80065fa:	d906      	bls.n	800660a <_strtol_l.isra.0+0x1a>
 80065fc:	f7fe faf8 	bl	8004bf0 <__errno>
 8006600:	2316      	movs	r3, #22
 8006602:	6003      	str	r3, [r0, #0]
 8006604:	2000      	movs	r0, #0
 8006606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660a:	4f3a      	ldr	r7, [pc, #232]	; (80066f4 <_strtol_l.isra.0+0x104>)
 800660c:	468e      	mov	lr, r1
 800660e:	4676      	mov	r6, lr
 8006610:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006614:	5de5      	ldrb	r5, [r4, r7]
 8006616:	f015 0508 	ands.w	r5, r5, #8
 800661a:	d1f8      	bne.n	800660e <_strtol_l.isra.0+0x1e>
 800661c:	2c2d      	cmp	r4, #45	; 0x2d
 800661e:	d134      	bne.n	800668a <_strtol_l.isra.0+0x9a>
 8006620:	f89e 4000 	ldrb.w	r4, [lr]
 8006624:	f04f 0801 	mov.w	r8, #1
 8006628:	f106 0e02 	add.w	lr, r6, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d05c      	beq.n	80066ea <_strtol_l.isra.0+0xfa>
 8006630:	2b10      	cmp	r3, #16
 8006632:	d10c      	bne.n	800664e <_strtol_l.isra.0+0x5e>
 8006634:	2c30      	cmp	r4, #48	; 0x30
 8006636:	d10a      	bne.n	800664e <_strtol_l.isra.0+0x5e>
 8006638:	f89e 4000 	ldrb.w	r4, [lr]
 800663c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006640:	2c58      	cmp	r4, #88	; 0x58
 8006642:	d14d      	bne.n	80066e0 <_strtol_l.isra.0+0xf0>
 8006644:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006648:	2310      	movs	r3, #16
 800664a:	f10e 0e02 	add.w	lr, lr, #2
 800664e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006652:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006656:	2600      	movs	r6, #0
 8006658:	fbbc f9f3 	udiv	r9, ip, r3
 800665c:	4635      	mov	r5, r6
 800665e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006662:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006666:	2f09      	cmp	r7, #9
 8006668:	d818      	bhi.n	800669c <_strtol_l.isra.0+0xac>
 800666a:	463c      	mov	r4, r7
 800666c:	42a3      	cmp	r3, r4
 800666e:	dd24      	ble.n	80066ba <_strtol_l.isra.0+0xca>
 8006670:	2e00      	cmp	r6, #0
 8006672:	db1f      	blt.n	80066b4 <_strtol_l.isra.0+0xc4>
 8006674:	45a9      	cmp	r9, r5
 8006676:	d31d      	bcc.n	80066b4 <_strtol_l.isra.0+0xc4>
 8006678:	d101      	bne.n	800667e <_strtol_l.isra.0+0x8e>
 800667a:	45a2      	cmp	sl, r4
 800667c:	db1a      	blt.n	80066b4 <_strtol_l.isra.0+0xc4>
 800667e:	fb05 4503 	mla	r5, r5, r3, r4
 8006682:	2601      	movs	r6, #1
 8006684:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006688:	e7eb      	b.n	8006662 <_strtol_l.isra.0+0x72>
 800668a:	2c2b      	cmp	r4, #43	; 0x2b
 800668c:	bf08      	it	eq
 800668e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006692:	46a8      	mov	r8, r5
 8006694:	bf08      	it	eq
 8006696:	f106 0e02 	addeq.w	lr, r6, #2
 800669a:	e7c7      	b.n	800662c <_strtol_l.isra.0+0x3c>
 800669c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80066a0:	2f19      	cmp	r7, #25
 80066a2:	d801      	bhi.n	80066a8 <_strtol_l.isra.0+0xb8>
 80066a4:	3c37      	subs	r4, #55	; 0x37
 80066a6:	e7e1      	b.n	800666c <_strtol_l.isra.0+0x7c>
 80066a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80066ac:	2f19      	cmp	r7, #25
 80066ae:	d804      	bhi.n	80066ba <_strtol_l.isra.0+0xca>
 80066b0:	3c57      	subs	r4, #87	; 0x57
 80066b2:	e7db      	b.n	800666c <_strtol_l.isra.0+0x7c>
 80066b4:	f04f 36ff 	mov.w	r6, #4294967295
 80066b8:	e7e4      	b.n	8006684 <_strtol_l.isra.0+0x94>
 80066ba:	2e00      	cmp	r6, #0
 80066bc:	da05      	bge.n	80066ca <_strtol_l.isra.0+0xda>
 80066be:	2322      	movs	r3, #34	; 0x22
 80066c0:	6003      	str	r3, [r0, #0]
 80066c2:	4665      	mov	r5, ip
 80066c4:	b942      	cbnz	r2, 80066d8 <_strtol_l.isra.0+0xe8>
 80066c6:	4628      	mov	r0, r5
 80066c8:	e79d      	b.n	8006606 <_strtol_l.isra.0+0x16>
 80066ca:	f1b8 0f00 	cmp.w	r8, #0
 80066ce:	d000      	beq.n	80066d2 <_strtol_l.isra.0+0xe2>
 80066d0:	426d      	negs	r5, r5
 80066d2:	2a00      	cmp	r2, #0
 80066d4:	d0f7      	beq.n	80066c6 <_strtol_l.isra.0+0xd6>
 80066d6:	b10e      	cbz	r6, 80066dc <_strtol_l.isra.0+0xec>
 80066d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80066dc:	6011      	str	r1, [r2, #0]
 80066de:	e7f2      	b.n	80066c6 <_strtol_l.isra.0+0xd6>
 80066e0:	2430      	movs	r4, #48	; 0x30
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1b3      	bne.n	800664e <_strtol_l.isra.0+0x5e>
 80066e6:	2308      	movs	r3, #8
 80066e8:	e7b1      	b.n	800664e <_strtol_l.isra.0+0x5e>
 80066ea:	2c30      	cmp	r4, #48	; 0x30
 80066ec:	d0a4      	beq.n	8006638 <_strtol_l.isra.0+0x48>
 80066ee:	230a      	movs	r3, #10
 80066f0:	e7ad      	b.n	800664e <_strtol_l.isra.0+0x5e>
 80066f2:	bf00      	nop
 80066f4:	080095f9 	.word	0x080095f9

080066f8 <_strtol_r>:
 80066f8:	f7ff bf7a 	b.w	80065f0 <_strtol_l.isra.0>

080066fc <strtol>:
 80066fc:	4613      	mov	r3, r2
 80066fe:	460a      	mov	r2, r1
 8006700:	4601      	mov	r1, r0
 8006702:	4802      	ldr	r0, [pc, #8]	; (800670c <strtol+0x10>)
 8006704:	6800      	ldr	r0, [r0, #0]
 8006706:	f7ff bf73 	b.w	80065f0 <_strtol_l.isra.0>
 800670a:	bf00      	nop
 800670c:	2000000c 	.word	0x2000000c

08006710 <quorem>:
 8006710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006714:	6903      	ldr	r3, [r0, #16]
 8006716:	690c      	ldr	r4, [r1, #16]
 8006718:	42a3      	cmp	r3, r4
 800671a:	4607      	mov	r7, r0
 800671c:	f2c0 8081 	blt.w	8006822 <quorem+0x112>
 8006720:	3c01      	subs	r4, #1
 8006722:	f101 0814 	add.w	r8, r1, #20
 8006726:	f100 0514 	add.w	r5, r0, #20
 800672a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800672e:	9301      	str	r3, [sp, #4]
 8006730:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006738:	3301      	adds	r3, #1
 800673a:	429a      	cmp	r2, r3
 800673c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006744:	fbb2 f6f3 	udiv	r6, r2, r3
 8006748:	d331      	bcc.n	80067ae <quorem+0x9e>
 800674a:	f04f 0e00 	mov.w	lr, #0
 800674e:	4640      	mov	r0, r8
 8006750:	46ac      	mov	ip, r5
 8006752:	46f2      	mov	sl, lr
 8006754:	f850 2b04 	ldr.w	r2, [r0], #4
 8006758:	b293      	uxth	r3, r2
 800675a:	fb06 e303 	mla	r3, r6, r3, lr
 800675e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006762:	b29b      	uxth	r3, r3
 8006764:	ebaa 0303 	sub.w	r3, sl, r3
 8006768:	0c12      	lsrs	r2, r2, #16
 800676a:	f8dc a000 	ldr.w	sl, [ip]
 800676e:	fb06 e202 	mla	r2, r6, r2, lr
 8006772:	fa13 f38a 	uxtah	r3, r3, sl
 8006776:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800677a:	fa1f fa82 	uxth.w	sl, r2
 800677e:	f8dc 2000 	ldr.w	r2, [ip]
 8006782:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006786:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800678a:	b29b      	uxth	r3, r3
 800678c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006790:	4581      	cmp	r9, r0
 8006792:	f84c 3b04 	str.w	r3, [ip], #4
 8006796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800679a:	d2db      	bcs.n	8006754 <quorem+0x44>
 800679c:	f855 300b 	ldr.w	r3, [r5, fp]
 80067a0:	b92b      	cbnz	r3, 80067ae <quorem+0x9e>
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	3b04      	subs	r3, #4
 80067a6:	429d      	cmp	r5, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	d32e      	bcc.n	800680a <quorem+0xfa>
 80067ac:	613c      	str	r4, [r7, #16]
 80067ae:	4638      	mov	r0, r7
 80067b0:	f001 fc8a 	bl	80080c8 <__mcmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	db24      	blt.n	8006802 <quorem+0xf2>
 80067b8:	3601      	adds	r6, #1
 80067ba:	4628      	mov	r0, r5
 80067bc:	f04f 0c00 	mov.w	ip, #0
 80067c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80067c4:	f8d0 e000 	ldr.w	lr, [r0]
 80067c8:	b293      	uxth	r3, r2
 80067ca:	ebac 0303 	sub.w	r3, ip, r3
 80067ce:	0c12      	lsrs	r2, r2, #16
 80067d0:	fa13 f38e 	uxtah	r3, r3, lr
 80067d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067dc:	b29b      	uxth	r3, r3
 80067de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067e2:	45c1      	cmp	r9, r8
 80067e4:	f840 3b04 	str.w	r3, [r0], #4
 80067e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067ec:	d2e8      	bcs.n	80067c0 <quorem+0xb0>
 80067ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067f6:	b922      	cbnz	r2, 8006802 <quorem+0xf2>
 80067f8:	3b04      	subs	r3, #4
 80067fa:	429d      	cmp	r5, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	d30a      	bcc.n	8006816 <quorem+0x106>
 8006800:	613c      	str	r4, [r7, #16]
 8006802:	4630      	mov	r0, r6
 8006804:	b003      	add	sp, #12
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	3b04      	subs	r3, #4
 800680e:	2a00      	cmp	r2, #0
 8006810:	d1cc      	bne.n	80067ac <quorem+0x9c>
 8006812:	3c01      	subs	r4, #1
 8006814:	e7c7      	b.n	80067a6 <quorem+0x96>
 8006816:	6812      	ldr	r2, [r2, #0]
 8006818:	3b04      	subs	r3, #4
 800681a:	2a00      	cmp	r2, #0
 800681c:	d1f0      	bne.n	8006800 <quorem+0xf0>
 800681e:	3c01      	subs	r4, #1
 8006820:	e7eb      	b.n	80067fa <quorem+0xea>
 8006822:	2000      	movs	r0, #0
 8006824:	e7ee      	b.n	8006804 <quorem+0xf4>
	...

08006828 <_dtoa_r>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	ed2d 8b02 	vpush	{d8}
 8006830:	ec57 6b10 	vmov	r6, r7, d0
 8006834:	b095      	sub	sp, #84	; 0x54
 8006836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006838:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800683c:	9105      	str	r1, [sp, #20]
 800683e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006842:	4604      	mov	r4, r0
 8006844:	9209      	str	r2, [sp, #36]	; 0x24
 8006846:	930f      	str	r3, [sp, #60]	; 0x3c
 8006848:	b975      	cbnz	r5, 8006868 <_dtoa_r+0x40>
 800684a:	2010      	movs	r0, #16
 800684c:	f001 f94c 	bl	8007ae8 <malloc>
 8006850:	4602      	mov	r2, r0
 8006852:	6260      	str	r0, [r4, #36]	; 0x24
 8006854:	b920      	cbnz	r0, 8006860 <_dtoa_r+0x38>
 8006856:	4bb2      	ldr	r3, [pc, #712]	; (8006b20 <_dtoa_r+0x2f8>)
 8006858:	21ea      	movs	r1, #234	; 0xea
 800685a:	48b2      	ldr	r0, [pc, #712]	; (8006b24 <_dtoa_r+0x2fc>)
 800685c:	f002 f874 	bl	8008948 <__assert_func>
 8006860:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006864:	6005      	str	r5, [r0, #0]
 8006866:	60c5      	str	r5, [r0, #12]
 8006868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800686a:	6819      	ldr	r1, [r3, #0]
 800686c:	b151      	cbz	r1, 8006884 <_dtoa_r+0x5c>
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	604a      	str	r2, [r1, #4]
 8006872:	2301      	movs	r3, #1
 8006874:	4093      	lsls	r3, r2
 8006876:	608b      	str	r3, [r1, #8]
 8006878:	4620      	mov	r0, r4
 800687a:	f001 f99d 	bl	8007bb8 <_Bfree>
 800687e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	1e3b      	subs	r3, r7, #0
 8006886:	bfb9      	ittee	lt
 8006888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800688c:	9303      	strlt	r3, [sp, #12]
 800688e:	2300      	movge	r3, #0
 8006890:	f8c8 3000 	strge.w	r3, [r8]
 8006894:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006898:	4ba3      	ldr	r3, [pc, #652]	; (8006b28 <_dtoa_r+0x300>)
 800689a:	bfbc      	itt	lt
 800689c:	2201      	movlt	r2, #1
 800689e:	f8c8 2000 	strlt.w	r2, [r8]
 80068a2:	ea33 0309 	bics.w	r3, r3, r9
 80068a6:	d11b      	bne.n	80068e0 <_dtoa_r+0xb8>
 80068a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068b4:	4333      	orrs	r3, r6
 80068b6:	f000 857a 	beq.w	80073ae <_dtoa_r+0xb86>
 80068ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068bc:	b963      	cbnz	r3, 80068d8 <_dtoa_r+0xb0>
 80068be:	4b9b      	ldr	r3, [pc, #620]	; (8006b2c <_dtoa_r+0x304>)
 80068c0:	e024      	b.n	800690c <_dtoa_r+0xe4>
 80068c2:	4b9b      	ldr	r3, [pc, #620]	; (8006b30 <_dtoa_r+0x308>)
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	9800      	ldr	r0, [sp, #0]
 80068ce:	b015      	add	sp, #84	; 0x54
 80068d0:	ecbd 8b02 	vpop	{d8}
 80068d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d8:	4b94      	ldr	r3, [pc, #592]	; (8006b2c <_dtoa_r+0x304>)
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	3303      	adds	r3, #3
 80068de:	e7f3      	b.n	80068c8 <_dtoa_r+0xa0>
 80068e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068e4:	2200      	movs	r2, #0
 80068e6:	ec51 0b17 	vmov	r0, r1, d7
 80068ea:	2300      	movs	r3, #0
 80068ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80068f0:	f7fa f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f4:	4680      	mov	r8, r0
 80068f6:	b158      	cbz	r0, 8006910 <_dtoa_r+0xe8>
 80068f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80068fa:	2301      	movs	r3, #1
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 8551 	beq.w	80073a8 <_dtoa_r+0xb80>
 8006906:	488b      	ldr	r0, [pc, #556]	; (8006b34 <_dtoa_r+0x30c>)
 8006908:	6018      	str	r0, [r3, #0]
 800690a:	1e43      	subs	r3, r0, #1
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	e7dd      	b.n	80068cc <_dtoa_r+0xa4>
 8006910:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006914:	aa12      	add	r2, sp, #72	; 0x48
 8006916:	a913      	add	r1, sp, #76	; 0x4c
 8006918:	4620      	mov	r0, r4
 800691a:	f001 fcf5 	bl	8008308 <__d2b>
 800691e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006922:	4683      	mov	fp, r0
 8006924:	2d00      	cmp	r5, #0
 8006926:	d07c      	beq.n	8006a22 <_dtoa_r+0x1fa>
 8006928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800692a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800692e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006932:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006936:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800693a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800693e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006942:	4b7d      	ldr	r3, [pc, #500]	; (8006b38 <_dtoa_r+0x310>)
 8006944:	2200      	movs	r2, #0
 8006946:	4630      	mov	r0, r6
 8006948:	4639      	mov	r1, r7
 800694a:	f7f9 fc9d 	bl	8000288 <__aeabi_dsub>
 800694e:	a36e      	add	r3, pc, #440	; (adr r3, 8006b08 <_dtoa_r+0x2e0>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7f9 fe50 	bl	80005f8 <__aeabi_dmul>
 8006958:	a36d      	add	r3, pc, #436	; (adr r3, 8006b10 <_dtoa_r+0x2e8>)
 800695a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695e:	f7f9 fc95 	bl	800028c <__adddf3>
 8006962:	4606      	mov	r6, r0
 8006964:	4628      	mov	r0, r5
 8006966:	460f      	mov	r7, r1
 8006968:	f7f9 fddc 	bl	8000524 <__aeabi_i2d>
 800696c:	a36a      	add	r3, pc, #424	; (adr r3, 8006b18 <_dtoa_r+0x2f0>)
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f7f9 fe41 	bl	80005f8 <__aeabi_dmul>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4630      	mov	r0, r6
 800697c:	4639      	mov	r1, r7
 800697e:	f7f9 fc85 	bl	800028c <__adddf3>
 8006982:	4606      	mov	r6, r0
 8006984:	460f      	mov	r7, r1
 8006986:	f7fa f8e7 	bl	8000b58 <__aeabi_d2iz>
 800698a:	2200      	movs	r2, #0
 800698c:	4682      	mov	sl, r0
 800698e:	2300      	movs	r3, #0
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7fa f8a2 	bl	8000adc <__aeabi_dcmplt>
 8006998:	b148      	cbz	r0, 80069ae <_dtoa_r+0x186>
 800699a:	4650      	mov	r0, sl
 800699c:	f7f9 fdc2 	bl	8000524 <__aeabi_i2d>
 80069a0:	4632      	mov	r2, r6
 80069a2:	463b      	mov	r3, r7
 80069a4:	f7fa f890 	bl	8000ac8 <__aeabi_dcmpeq>
 80069a8:	b908      	cbnz	r0, 80069ae <_dtoa_r+0x186>
 80069aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ae:	f1ba 0f16 	cmp.w	sl, #22
 80069b2:	d854      	bhi.n	8006a5e <_dtoa_r+0x236>
 80069b4:	4b61      	ldr	r3, [pc, #388]	; (8006b3c <_dtoa_r+0x314>)
 80069b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069c2:	f7fa f88b 	bl	8000adc <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d04b      	beq.n	8006a62 <_dtoa_r+0x23a>
 80069ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069ce:	2300      	movs	r3, #0
 80069d0:	930e      	str	r3, [sp, #56]	; 0x38
 80069d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069d4:	1b5d      	subs	r5, r3, r5
 80069d6:	1e6b      	subs	r3, r5, #1
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	bf43      	ittte	mi
 80069dc:	2300      	movmi	r3, #0
 80069de:	f1c5 0801 	rsbmi	r8, r5, #1
 80069e2:	9304      	strmi	r3, [sp, #16]
 80069e4:	f04f 0800 	movpl.w	r8, #0
 80069e8:	f1ba 0f00 	cmp.w	sl, #0
 80069ec:	db3b      	blt.n	8006a66 <_dtoa_r+0x23e>
 80069ee:	9b04      	ldr	r3, [sp, #16]
 80069f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80069f4:	4453      	add	r3, sl
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	2300      	movs	r3, #0
 80069fa:	9306      	str	r3, [sp, #24]
 80069fc:	9b05      	ldr	r3, [sp, #20]
 80069fe:	2b09      	cmp	r3, #9
 8006a00:	d869      	bhi.n	8006ad6 <_dtoa_r+0x2ae>
 8006a02:	2b05      	cmp	r3, #5
 8006a04:	bfc4      	itt	gt
 8006a06:	3b04      	subgt	r3, #4
 8006a08:	9305      	strgt	r3, [sp, #20]
 8006a0a:	9b05      	ldr	r3, [sp, #20]
 8006a0c:	f1a3 0302 	sub.w	r3, r3, #2
 8006a10:	bfcc      	ite	gt
 8006a12:	2500      	movgt	r5, #0
 8006a14:	2501      	movle	r5, #1
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d869      	bhi.n	8006aee <_dtoa_r+0x2c6>
 8006a1a:	e8df f003 	tbb	[pc, r3]
 8006a1e:	4e2c      	.short	0x4e2c
 8006a20:	5a4c      	.short	0x5a4c
 8006a22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006a26:	441d      	add	r5, r3
 8006a28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	bfc1      	itttt	gt
 8006a30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006a38:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a40:	bfda      	itte	le
 8006a42:	f1c3 0320 	rsble	r3, r3, #32
 8006a46:	fa06 f003 	lslle.w	r0, r6, r3
 8006a4a:	4318      	orrgt	r0, r3
 8006a4c:	f7f9 fd5a 	bl	8000504 <__aeabi_ui2d>
 8006a50:	2301      	movs	r3, #1
 8006a52:	4606      	mov	r6, r0
 8006a54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a58:	3d01      	subs	r5, #1
 8006a5a:	9310      	str	r3, [sp, #64]	; 0x40
 8006a5c:	e771      	b.n	8006942 <_dtoa_r+0x11a>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7b6      	b.n	80069d0 <_dtoa_r+0x1a8>
 8006a62:	900e      	str	r0, [sp, #56]	; 0x38
 8006a64:	e7b5      	b.n	80069d2 <_dtoa_r+0x1aa>
 8006a66:	f1ca 0300 	rsb	r3, sl, #0
 8006a6a:	9306      	str	r3, [sp, #24]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	eba8 080a 	sub.w	r8, r8, sl
 8006a72:	930d      	str	r3, [sp, #52]	; 0x34
 8006a74:	e7c2      	b.n	80069fc <_dtoa_r+0x1d4>
 8006a76:	2300      	movs	r3, #0
 8006a78:	9308      	str	r3, [sp, #32]
 8006a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc39      	bgt.n	8006af4 <_dtoa_r+0x2cc>
 8006a80:	f04f 0901 	mov.w	r9, #1
 8006a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a88:	464b      	mov	r3, r9
 8006a8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a90:	2200      	movs	r2, #0
 8006a92:	6042      	str	r2, [r0, #4]
 8006a94:	2204      	movs	r2, #4
 8006a96:	f102 0614 	add.w	r6, r2, #20
 8006a9a:	429e      	cmp	r6, r3
 8006a9c:	6841      	ldr	r1, [r0, #4]
 8006a9e:	d92f      	bls.n	8006b00 <_dtoa_r+0x2d8>
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f001 f849 	bl	8007b38 <_Balloc>
 8006aa6:	9000      	str	r0, [sp, #0]
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d14b      	bne.n	8006b44 <_dtoa_r+0x31c>
 8006aac:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <_dtoa_r+0x318>)
 8006aae:	4602      	mov	r2, r0
 8006ab0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ab4:	e6d1      	b.n	800685a <_dtoa_r+0x32>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e7de      	b.n	8006a78 <_dtoa_r+0x250>
 8006aba:	2300      	movs	r3, #0
 8006abc:	9308      	str	r3, [sp, #32]
 8006abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac0:	eb0a 0903 	add.w	r9, sl, r3
 8006ac4:	f109 0301 	add.w	r3, r9, #1
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	bfb8      	it	lt
 8006ace:	2301      	movlt	r3, #1
 8006ad0:	e7dd      	b.n	8006a8e <_dtoa_r+0x266>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e7f2      	b.n	8006abc <_dtoa_r+0x294>
 8006ad6:	2501      	movs	r5, #1
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9305      	str	r3, [sp, #20]
 8006adc:	9508      	str	r5, [sp, #32]
 8006ade:	f04f 39ff 	mov.w	r9, #4294967295
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ae8:	2312      	movs	r3, #18
 8006aea:	9209      	str	r2, [sp, #36]	; 0x24
 8006aec:	e7cf      	b.n	8006a8e <_dtoa_r+0x266>
 8006aee:	2301      	movs	r3, #1
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	e7f4      	b.n	8006ade <_dtoa_r+0x2b6>
 8006af4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006afc:	464b      	mov	r3, r9
 8006afe:	e7c6      	b.n	8006a8e <_dtoa_r+0x266>
 8006b00:	3101      	adds	r1, #1
 8006b02:	6041      	str	r1, [r0, #4]
 8006b04:	0052      	lsls	r2, r2, #1
 8006b06:	e7c6      	b.n	8006a96 <_dtoa_r+0x26e>
 8006b08:	636f4361 	.word	0x636f4361
 8006b0c:	3fd287a7 	.word	0x3fd287a7
 8006b10:	8b60c8b3 	.word	0x8b60c8b3
 8006b14:	3fc68a28 	.word	0x3fc68a28
 8006b18:	509f79fb 	.word	0x509f79fb
 8006b1c:	3fd34413 	.word	0x3fd34413
 8006b20:	08009706 	.word	0x08009706
 8006b24:	0800971d 	.word	0x0800971d
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	08009702 	.word	0x08009702
 8006b30:	080096f9 	.word	0x080096f9
 8006b34:	0800957d 	.word	0x0800957d
 8006b38:	3ff80000 	.word	0x3ff80000
 8006b3c:	08009898 	.word	0x08009898
 8006b40:	0800977c 	.word	0x0800977c
 8006b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b46:	9a00      	ldr	r2, [sp, #0]
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	2b0e      	cmp	r3, #14
 8006b4e:	f200 80ad 	bhi.w	8006cac <_dtoa_r+0x484>
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	f000 80aa 	beq.w	8006cac <_dtoa_r+0x484>
 8006b58:	f1ba 0f00 	cmp.w	sl, #0
 8006b5c:	dd36      	ble.n	8006bcc <_dtoa_r+0x3a4>
 8006b5e:	4ac3      	ldr	r2, [pc, #780]	; (8006e6c <_dtoa_r+0x644>)
 8006b60:	f00a 030f 	and.w	r3, sl, #15
 8006b64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b68:	ed93 7b00 	vldr	d7, [r3]
 8006b6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006b74:	eeb0 8a47 	vmov.f32	s16, s14
 8006b78:	eef0 8a67 	vmov.f32	s17, s15
 8006b7c:	d016      	beq.n	8006bac <_dtoa_r+0x384>
 8006b7e:	4bbc      	ldr	r3, [pc, #752]	; (8006e70 <_dtoa_r+0x648>)
 8006b80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b88:	f7f9 fe60 	bl	800084c <__aeabi_ddiv>
 8006b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b90:	f007 070f 	and.w	r7, r7, #15
 8006b94:	2503      	movs	r5, #3
 8006b96:	4eb6      	ldr	r6, [pc, #728]	; (8006e70 <_dtoa_r+0x648>)
 8006b98:	b957      	cbnz	r7, 8006bb0 <_dtoa_r+0x388>
 8006b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b9e:	ec53 2b18 	vmov	r2, r3, d8
 8006ba2:	f7f9 fe53 	bl	800084c <__aeabi_ddiv>
 8006ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006baa:	e029      	b.n	8006c00 <_dtoa_r+0x3d8>
 8006bac:	2502      	movs	r5, #2
 8006bae:	e7f2      	b.n	8006b96 <_dtoa_r+0x36e>
 8006bb0:	07f9      	lsls	r1, r7, #31
 8006bb2:	d508      	bpl.n	8006bc6 <_dtoa_r+0x39e>
 8006bb4:	ec51 0b18 	vmov	r0, r1, d8
 8006bb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bbc:	f7f9 fd1c 	bl	80005f8 <__aeabi_dmul>
 8006bc0:	ec41 0b18 	vmov	d8, r0, r1
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	107f      	asrs	r7, r7, #1
 8006bc8:	3608      	adds	r6, #8
 8006bca:	e7e5      	b.n	8006b98 <_dtoa_r+0x370>
 8006bcc:	f000 80a6 	beq.w	8006d1c <_dtoa_r+0x4f4>
 8006bd0:	f1ca 0600 	rsb	r6, sl, #0
 8006bd4:	4ba5      	ldr	r3, [pc, #660]	; (8006e6c <_dtoa_r+0x644>)
 8006bd6:	4fa6      	ldr	r7, [pc, #664]	; (8006e70 <_dtoa_r+0x648>)
 8006bd8:	f006 020f 	and.w	r2, r6, #15
 8006bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf0:	1136      	asrs	r6, r6, #4
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	2502      	movs	r5, #2
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	f040 8085 	bne.w	8006d06 <_dtoa_r+0x4de>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1d2      	bne.n	8006ba6 <_dtoa_r+0x37e>
 8006c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 808c 	beq.w	8006d20 <_dtoa_r+0x4f8>
 8006c08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c0c:	4b99      	ldr	r3, [pc, #612]	; (8006e74 <_dtoa_r+0x64c>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 ff62 	bl	8000adc <__aeabi_dcmplt>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	f000 8081 	beq.w	8006d20 <_dtoa_r+0x4f8>
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d07d      	beq.n	8006d20 <_dtoa_r+0x4f8>
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	dd3c      	ble.n	8006ca4 <_dtoa_r+0x47c>
 8006c2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c2e:	9307      	str	r3, [sp, #28]
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b91      	ldr	r3, [pc, #580]	; (8006e78 <_dtoa_r+0x650>)
 8006c34:	4630      	mov	r0, r6
 8006c36:	4639      	mov	r1, r7
 8006c38:	f7f9 fcde 	bl	80005f8 <__aeabi_dmul>
 8006c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c40:	3501      	adds	r5, #1
 8006c42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006c46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7f9 fc6a 	bl	8000524 <__aeabi_i2d>
 8006c50:	4632      	mov	r2, r6
 8006c52:	463b      	mov	r3, r7
 8006c54:	f7f9 fcd0 	bl	80005f8 <__aeabi_dmul>
 8006c58:	4b88      	ldr	r3, [pc, #544]	; (8006e7c <_dtoa_r+0x654>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f7f9 fb16 	bl	800028c <__adddf3>
 8006c60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d15c      	bne.n	8006d2a <_dtoa_r+0x502>
 8006c70:	4b83      	ldr	r3, [pc, #524]	; (8006e80 <_dtoa_r+0x658>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 fb06 	bl	8000288 <__aeabi_dsub>
 8006c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c80:	4606      	mov	r6, r0
 8006c82:	460f      	mov	r7, r1
 8006c84:	f7f9 ff48 	bl	8000b18 <__aeabi_dcmpgt>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f040 8296 	bne.w	80071ba <_dtoa_r+0x992>
 8006c8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006c92:	4630      	mov	r0, r6
 8006c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c98:	4639      	mov	r1, r7
 8006c9a:	f7f9 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f040 8288 	bne.w	80071b4 <_dtoa_r+0x98c>
 8006ca4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f2c0 8158 	blt.w	8006f64 <_dtoa_r+0x73c>
 8006cb4:	f1ba 0f0e 	cmp.w	sl, #14
 8006cb8:	f300 8154 	bgt.w	8006f64 <_dtoa_r+0x73c>
 8006cbc:	4b6b      	ldr	r3, [pc, #428]	; (8006e6c <_dtoa_r+0x644>)
 8006cbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f280 80e3 	bge.w	8006e94 <_dtoa_r+0x66c>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f300 80df 	bgt.w	8006e94 <_dtoa_r+0x66c>
 8006cd6:	f040 826d 	bne.w	80071b4 <_dtoa_r+0x98c>
 8006cda:	4b69      	ldr	r3, [pc, #420]	; (8006e80 <_dtoa_r+0x658>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	f7f9 fc89 	bl	80005f8 <__aeabi_dmul>
 8006ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cea:	f7f9 ff0b 	bl	8000b04 <__aeabi_dcmpge>
 8006cee:	9e01      	ldr	r6, [sp, #4]
 8006cf0:	4637      	mov	r7, r6
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f040 8243 	bne.w	800717e <_dtoa_r+0x956>
 8006cf8:	9d00      	ldr	r5, [sp, #0]
 8006cfa:	2331      	movs	r3, #49	; 0x31
 8006cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8006d00:	f10a 0a01 	add.w	sl, sl, #1
 8006d04:	e23f      	b.n	8007186 <_dtoa_r+0x95e>
 8006d06:	07f2      	lsls	r2, r6, #31
 8006d08:	d505      	bpl.n	8006d16 <_dtoa_r+0x4ee>
 8006d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0e:	f7f9 fc73 	bl	80005f8 <__aeabi_dmul>
 8006d12:	3501      	adds	r5, #1
 8006d14:	2301      	movs	r3, #1
 8006d16:	1076      	asrs	r6, r6, #1
 8006d18:	3708      	adds	r7, #8
 8006d1a:	e76c      	b.n	8006bf6 <_dtoa_r+0x3ce>
 8006d1c:	2502      	movs	r5, #2
 8006d1e:	e76f      	b.n	8006c00 <_dtoa_r+0x3d8>
 8006d20:	9b01      	ldr	r3, [sp, #4]
 8006d22:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d26:	930c      	str	r3, [sp, #48]	; 0x30
 8006d28:	e78d      	b.n	8006c46 <_dtoa_r+0x41e>
 8006d2a:	9900      	ldr	r1, [sp, #0]
 8006d2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d30:	4b4e      	ldr	r3, [pc, #312]	; (8006e6c <_dtoa_r+0x644>)
 8006d32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d36:	4401      	add	r1, r0
 8006d38:	9102      	str	r1, [sp, #8]
 8006d3a:	9908      	ldr	r1, [sp, #32]
 8006d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8006d40:	eef0 8a67 	vmov.f32	s17, s15
 8006d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d045      	beq.n	8006ddc <_dtoa_r+0x5b4>
 8006d50:	494c      	ldr	r1, [pc, #304]	; (8006e84 <_dtoa_r+0x65c>)
 8006d52:	2000      	movs	r0, #0
 8006d54:	f7f9 fd7a 	bl	800084c <__aeabi_ddiv>
 8006d58:	ec53 2b18 	vmov	r2, r3, d8
 8006d5c:	f7f9 fa94 	bl	8000288 <__aeabi_dsub>
 8006d60:	9d00      	ldr	r5, [sp, #0]
 8006d62:	ec41 0b18 	vmov	d8, r0, r1
 8006d66:	4639      	mov	r1, r7
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7f9 fef5 	bl	8000b58 <__aeabi_d2iz>
 8006d6e:	900c      	str	r0, [sp, #48]	; 0x30
 8006d70:	f7f9 fbd8 	bl	8000524 <__aeabi_i2d>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4630      	mov	r0, r6
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	f7f9 fa84 	bl	8000288 <__aeabi_dsub>
 8006d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d82:	3330      	adds	r3, #48	; 0x30
 8006d84:	f805 3b01 	strb.w	r3, [r5], #1
 8006d88:	ec53 2b18 	vmov	r2, r3, d8
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	460f      	mov	r7, r1
 8006d90:	f7f9 fea4 	bl	8000adc <__aeabi_dcmplt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d165      	bne.n	8006e64 <_dtoa_r+0x63c>
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	4935      	ldr	r1, [pc, #212]	; (8006e74 <_dtoa_r+0x64c>)
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f7f9 fa72 	bl	8000288 <__aeabi_dsub>
 8006da4:	ec53 2b18 	vmov	r2, r3, d8
 8006da8:	f7f9 fe98 	bl	8000adc <__aeabi_dcmplt>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	f040 80b9 	bne.w	8006f24 <_dtoa_r+0x6fc>
 8006db2:	9b02      	ldr	r3, [sp, #8]
 8006db4:	429d      	cmp	r5, r3
 8006db6:	f43f af75 	beq.w	8006ca4 <_dtoa_r+0x47c>
 8006dba:	4b2f      	ldr	r3, [pc, #188]	; (8006e78 <_dtoa_r+0x650>)
 8006dbc:	ec51 0b18 	vmov	r0, r1, d8
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f7f9 fc19 	bl	80005f8 <__aeabi_dmul>
 8006dc6:	4b2c      	ldr	r3, [pc, #176]	; (8006e78 <_dtoa_r+0x650>)
 8006dc8:	ec41 0b18 	vmov	d8, r0, r1
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	f7f9 fc11 	bl	80005f8 <__aeabi_dmul>
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	e7c4      	b.n	8006d66 <_dtoa_r+0x53e>
 8006ddc:	ec51 0b17 	vmov	r0, r1, d7
 8006de0:	f7f9 fc0a 	bl	80005f8 <__aeabi_dmul>
 8006de4:	9b02      	ldr	r3, [sp, #8]
 8006de6:	9d00      	ldr	r5, [sp, #0]
 8006de8:	930c      	str	r3, [sp, #48]	; 0x30
 8006dea:	ec41 0b18 	vmov	d8, r0, r1
 8006dee:	4639      	mov	r1, r7
 8006df0:	4630      	mov	r0, r6
 8006df2:	f7f9 feb1 	bl	8000b58 <__aeabi_d2iz>
 8006df6:	9011      	str	r0, [sp, #68]	; 0x44
 8006df8:	f7f9 fb94 	bl	8000524 <__aeabi_i2d>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4630      	mov	r0, r6
 8006e02:	4639      	mov	r1, r7
 8006e04:	f7f9 fa40 	bl	8000288 <__aeabi_dsub>
 8006e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e0a:	3330      	adds	r3, #48	; 0x30
 8006e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	429d      	cmp	r5, r3
 8006e14:	4606      	mov	r6, r0
 8006e16:	460f      	mov	r7, r1
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	d134      	bne.n	8006e88 <_dtoa_r+0x660>
 8006e1e:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <_dtoa_r+0x65c>)
 8006e20:	ec51 0b18 	vmov	r0, r1, d8
 8006e24:	f7f9 fa32 	bl	800028c <__adddf3>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fe72 	bl	8000b18 <__aeabi_dcmpgt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d175      	bne.n	8006f24 <_dtoa_r+0x6fc>
 8006e38:	ec53 2b18 	vmov	r2, r3, d8
 8006e3c:	4911      	ldr	r1, [pc, #68]	; (8006e84 <_dtoa_r+0x65c>)
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f7f9 fa22 	bl	8000288 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fe46 	bl	8000adc <__aeabi_dcmplt>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f43f af27 	beq.w	8006ca4 <_dtoa_r+0x47c>
 8006e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e58:	1e6b      	subs	r3, r5, #1
 8006e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e60:	2b30      	cmp	r3, #48	; 0x30
 8006e62:	d0f8      	beq.n	8006e56 <_dtoa_r+0x62e>
 8006e64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e68:	e04a      	b.n	8006f00 <_dtoa_r+0x6d8>
 8006e6a:	bf00      	nop
 8006e6c:	08009898 	.word	0x08009898
 8006e70:	08009870 	.word	0x08009870
 8006e74:	3ff00000 	.word	0x3ff00000
 8006e78:	40240000 	.word	0x40240000
 8006e7c:	401c0000 	.word	0x401c0000
 8006e80:	40140000 	.word	0x40140000
 8006e84:	3fe00000 	.word	0x3fe00000
 8006e88:	4baf      	ldr	r3, [pc, #700]	; (8007148 <_dtoa_r+0x920>)
 8006e8a:	f7f9 fbb5 	bl	80005f8 <__aeabi_dmul>
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	e7ac      	b.n	8006dee <_dtoa_r+0x5c6>
 8006e94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006e98:	9d00      	ldr	r5, [sp, #0]
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	f7f9 fcd3 	bl	800084c <__aeabi_ddiv>
 8006ea6:	f7f9 fe57 	bl	8000b58 <__aeabi_d2iz>
 8006eaa:	9002      	str	r0, [sp, #8]
 8006eac:	f7f9 fb3a 	bl	8000524 <__aeabi_i2d>
 8006eb0:	4642      	mov	r2, r8
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	f7f9 fba0 	bl	80005f8 <__aeabi_dmul>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 f9e2 	bl	8000288 <__aeabi_dsub>
 8006ec4:	9e02      	ldr	r6, [sp, #8]
 8006ec6:	9f01      	ldr	r7, [sp, #4]
 8006ec8:	3630      	adds	r6, #48	; 0x30
 8006eca:	f805 6b01 	strb.w	r6, [r5], #1
 8006ece:	9e00      	ldr	r6, [sp, #0]
 8006ed0:	1bae      	subs	r6, r5, r6
 8006ed2:	42b7      	cmp	r7, r6
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	d137      	bne.n	8006f4a <_dtoa_r+0x722>
 8006eda:	f7f9 f9d7 	bl	800028c <__adddf3>
 8006ede:	4642      	mov	r2, r8
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460f      	mov	r7, r1
 8006ee6:	f7f9 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8006eea:	b9c8      	cbnz	r0, 8006f20 <_dtoa_r+0x6f8>
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	4639      	mov	r1, r7
 8006ef4:	f7f9 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ef8:	b110      	cbz	r0, 8006f00 <_dtoa_r+0x6d8>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	07d9      	lsls	r1, r3, #31
 8006efe:	d40f      	bmi.n	8006f20 <_dtoa_r+0x6f8>
 8006f00:	4620      	mov	r0, r4
 8006f02:	4659      	mov	r1, fp
 8006f04:	f000 fe58 	bl	8007bb8 <_Bfree>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	702b      	strb	r3, [r5, #0]
 8006f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f0e:	f10a 0001 	add.w	r0, sl, #1
 8006f12:	6018      	str	r0, [r3, #0]
 8006f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f43f acd8 	beq.w	80068cc <_dtoa_r+0xa4>
 8006f1c:	601d      	str	r5, [r3, #0]
 8006f1e:	e4d5      	b.n	80068cc <_dtoa_r+0xa4>
 8006f20:	f8cd a01c 	str.w	sl, [sp, #28]
 8006f24:	462b      	mov	r3, r5
 8006f26:	461d      	mov	r5, r3
 8006f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f2c:	2a39      	cmp	r2, #57	; 0x39
 8006f2e:	d108      	bne.n	8006f42 <_dtoa_r+0x71a>
 8006f30:	9a00      	ldr	r2, [sp, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d1f7      	bne.n	8006f26 <_dtoa_r+0x6fe>
 8006f36:	9a07      	ldr	r2, [sp, #28]
 8006f38:	9900      	ldr	r1, [sp, #0]
 8006f3a:	3201      	adds	r2, #1
 8006f3c:	9207      	str	r2, [sp, #28]
 8006f3e:	2230      	movs	r2, #48	; 0x30
 8006f40:	700a      	strb	r2, [r1, #0]
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	3201      	adds	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e78c      	b.n	8006e64 <_dtoa_r+0x63c>
 8006f4a:	4b7f      	ldr	r3, [pc, #508]	; (8007148 <_dtoa_r+0x920>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f7f9 fb53 	bl	80005f8 <__aeabi_dmul>
 8006f52:	2200      	movs	r2, #0
 8006f54:	2300      	movs	r3, #0
 8006f56:	4606      	mov	r6, r0
 8006f58:	460f      	mov	r7, r1
 8006f5a:	f7f9 fdb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d09b      	beq.n	8006e9a <_dtoa_r+0x672>
 8006f62:	e7cd      	b.n	8006f00 <_dtoa_r+0x6d8>
 8006f64:	9a08      	ldr	r2, [sp, #32]
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	f000 80c4 	beq.w	80070f4 <_dtoa_r+0x8cc>
 8006f6c:	9a05      	ldr	r2, [sp, #20]
 8006f6e:	2a01      	cmp	r2, #1
 8006f70:	f300 80a8 	bgt.w	80070c4 <_dtoa_r+0x89c>
 8006f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	f000 80a0 	beq.w	80070bc <_dtoa_r+0x894>
 8006f7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f80:	9e06      	ldr	r6, [sp, #24]
 8006f82:	4645      	mov	r5, r8
 8006f84:	9a04      	ldr	r2, [sp, #16]
 8006f86:	2101      	movs	r1, #1
 8006f88:	441a      	add	r2, r3
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	4498      	add	r8, r3
 8006f8e:	9204      	str	r2, [sp, #16]
 8006f90:	f000 ff18 	bl	8007dc4 <__i2b>
 8006f94:	4607      	mov	r7, r0
 8006f96:	2d00      	cmp	r5, #0
 8006f98:	dd0b      	ble.n	8006fb2 <_dtoa_r+0x78a>
 8006f9a:	9b04      	ldr	r3, [sp, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dd08      	ble.n	8006fb2 <_dtoa_r+0x78a>
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	9a04      	ldr	r2, [sp, #16]
 8006fa4:	bfa8      	it	ge
 8006fa6:	462b      	movge	r3, r5
 8006fa8:	eba8 0803 	sub.w	r8, r8, r3
 8006fac:	1aed      	subs	r5, r5, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	9b06      	ldr	r3, [sp, #24]
 8006fb4:	b1fb      	cbz	r3, 8006ff6 <_dtoa_r+0x7ce>
 8006fb6:	9b08      	ldr	r3, [sp, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 809f 	beq.w	80070fc <_dtoa_r+0x8d4>
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	dd11      	ble.n	8006fe6 <_dtoa_r+0x7be>
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 ffb8 	bl	8007f3c <__pow5mult>
 8006fcc:	465a      	mov	r2, fp
 8006fce:	4601      	mov	r1, r0
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 ff0c 	bl	8007df0 <__multiply>
 8006fd8:	4659      	mov	r1, fp
 8006fda:	9007      	str	r0, [sp, #28]
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fdeb 	bl	8007bb8 <_Bfree>
 8006fe2:	9b07      	ldr	r3, [sp, #28]
 8006fe4:	469b      	mov	fp, r3
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	1b9a      	subs	r2, r3, r6
 8006fea:	d004      	beq.n	8006ff6 <_dtoa_r+0x7ce>
 8006fec:	4659      	mov	r1, fp
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 ffa4 	bl	8007f3c <__pow5mult>
 8006ff4:	4683      	mov	fp, r0
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f000 fee3 	bl	8007dc4 <__i2b>
 8006ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007000:	2b00      	cmp	r3, #0
 8007002:	4606      	mov	r6, r0
 8007004:	dd7c      	ble.n	8007100 <_dtoa_r+0x8d8>
 8007006:	461a      	mov	r2, r3
 8007008:	4601      	mov	r1, r0
 800700a:	4620      	mov	r0, r4
 800700c:	f000 ff96 	bl	8007f3c <__pow5mult>
 8007010:	9b05      	ldr	r3, [sp, #20]
 8007012:	2b01      	cmp	r3, #1
 8007014:	4606      	mov	r6, r0
 8007016:	dd76      	ble.n	8007106 <_dtoa_r+0x8de>
 8007018:	2300      	movs	r3, #0
 800701a:	9306      	str	r3, [sp, #24]
 800701c:	6933      	ldr	r3, [r6, #16]
 800701e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007022:	6918      	ldr	r0, [r3, #16]
 8007024:	f000 fe7e 	bl	8007d24 <__hi0bits>
 8007028:	f1c0 0020 	rsb	r0, r0, #32
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	4418      	add	r0, r3
 8007030:	f010 001f 	ands.w	r0, r0, #31
 8007034:	f000 8086 	beq.w	8007144 <_dtoa_r+0x91c>
 8007038:	f1c0 0320 	rsb	r3, r0, #32
 800703c:	2b04      	cmp	r3, #4
 800703e:	dd7f      	ble.n	8007140 <_dtoa_r+0x918>
 8007040:	f1c0 001c 	rsb	r0, r0, #28
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	4403      	add	r3, r0
 8007048:	4480      	add	r8, r0
 800704a:	4405      	add	r5, r0
 800704c:	9304      	str	r3, [sp, #16]
 800704e:	f1b8 0f00 	cmp.w	r8, #0
 8007052:	dd05      	ble.n	8007060 <_dtoa_r+0x838>
 8007054:	4659      	mov	r1, fp
 8007056:	4642      	mov	r2, r8
 8007058:	4620      	mov	r0, r4
 800705a:	f000 ffc9 	bl	8007ff0 <__lshift>
 800705e:	4683      	mov	fp, r0
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	dd05      	ble.n	8007072 <_dtoa_r+0x84a>
 8007066:	4631      	mov	r1, r6
 8007068:	461a      	mov	r2, r3
 800706a:	4620      	mov	r0, r4
 800706c:	f000 ffc0 	bl	8007ff0 <__lshift>
 8007070:	4606      	mov	r6, r0
 8007072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d069      	beq.n	800714c <_dtoa_r+0x924>
 8007078:	4631      	mov	r1, r6
 800707a:	4658      	mov	r0, fp
 800707c:	f001 f824 	bl	80080c8 <__mcmp>
 8007080:	2800      	cmp	r0, #0
 8007082:	da63      	bge.n	800714c <_dtoa_r+0x924>
 8007084:	2300      	movs	r3, #0
 8007086:	4659      	mov	r1, fp
 8007088:	220a      	movs	r2, #10
 800708a:	4620      	mov	r0, r4
 800708c:	f000 fdb6 	bl	8007bfc <__multadd>
 8007090:	9b08      	ldr	r3, [sp, #32]
 8007092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007096:	4683      	mov	fp, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 818f 	beq.w	80073bc <_dtoa_r+0xb94>
 800709e:	4639      	mov	r1, r7
 80070a0:	2300      	movs	r3, #0
 80070a2:	220a      	movs	r2, #10
 80070a4:	4620      	mov	r0, r4
 80070a6:	f000 fda9 	bl	8007bfc <__multadd>
 80070aa:	f1b9 0f00 	cmp.w	r9, #0
 80070ae:	4607      	mov	r7, r0
 80070b0:	f300 808e 	bgt.w	80071d0 <_dtoa_r+0x9a8>
 80070b4:	9b05      	ldr	r3, [sp, #20]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	dc50      	bgt.n	800715c <_dtoa_r+0x934>
 80070ba:	e089      	b.n	80071d0 <_dtoa_r+0x9a8>
 80070bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070c2:	e75d      	b.n	8006f80 <_dtoa_r+0x758>
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	1e5e      	subs	r6, r3, #1
 80070c8:	9b06      	ldr	r3, [sp, #24]
 80070ca:	42b3      	cmp	r3, r6
 80070cc:	bfbf      	itttt	lt
 80070ce:	9b06      	ldrlt	r3, [sp, #24]
 80070d0:	9606      	strlt	r6, [sp, #24]
 80070d2:	1af2      	sublt	r2, r6, r3
 80070d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80070d6:	bfb6      	itet	lt
 80070d8:	189b      	addlt	r3, r3, r2
 80070da:	1b9e      	subge	r6, r3, r6
 80070dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	bfb8      	it	lt
 80070e2:	2600      	movlt	r6, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	bfb5      	itete	lt
 80070e8:	eba8 0503 	sublt.w	r5, r8, r3
 80070ec:	9b01      	ldrge	r3, [sp, #4]
 80070ee:	2300      	movlt	r3, #0
 80070f0:	4645      	movge	r5, r8
 80070f2:	e747      	b.n	8006f84 <_dtoa_r+0x75c>
 80070f4:	9e06      	ldr	r6, [sp, #24]
 80070f6:	9f08      	ldr	r7, [sp, #32]
 80070f8:	4645      	mov	r5, r8
 80070fa:	e74c      	b.n	8006f96 <_dtoa_r+0x76e>
 80070fc:	9a06      	ldr	r2, [sp, #24]
 80070fe:	e775      	b.n	8006fec <_dtoa_r+0x7c4>
 8007100:	9b05      	ldr	r3, [sp, #20]
 8007102:	2b01      	cmp	r3, #1
 8007104:	dc18      	bgt.n	8007138 <_dtoa_r+0x910>
 8007106:	9b02      	ldr	r3, [sp, #8]
 8007108:	b9b3      	cbnz	r3, 8007138 <_dtoa_r+0x910>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007110:	b9a3      	cbnz	r3, 800713c <_dtoa_r+0x914>
 8007112:	9b03      	ldr	r3, [sp, #12]
 8007114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007118:	0d1b      	lsrs	r3, r3, #20
 800711a:	051b      	lsls	r3, r3, #20
 800711c:	b12b      	cbz	r3, 800712a <_dtoa_r+0x902>
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	3301      	adds	r3, #1
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	f108 0801 	add.w	r8, r8, #1
 8007128:	2301      	movs	r3, #1
 800712a:	9306      	str	r3, [sp, #24]
 800712c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800712e:	2b00      	cmp	r3, #0
 8007130:	f47f af74 	bne.w	800701c <_dtoa_r+0x7f4>
 8007134:	2001      	movs	r0, #1
 8007136:	e779      	b.n	800702c <_dtoa_r+0x804>
 8007138:	2300      	movs	r3, #0
 800713a:	e7f6      	b.n	800712a <_dtoa_r+0x902>
 800713c:	9b02      	ldr	r3, [sp, #8]
 800713e:	e7f4      	b.n	800712a <_dtoa_r+0x902>
 8007140:	d085      	beq.n	800704e <_dtoa_r+0x826>
 8007142:	4618      	mov	r0, r3
 8007144:	301c      	adds	r0, #28
 8007146:	e77d      	b.n	8007044 <_dtoa_r+0x81c>
 8007148:	40240000 	.word	0x40240000
 800714c:	9b01      	ldr	r3, [sp, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	dc38      	bgt.n	80071c4 <_dtoa_r+0x99c>
 8007152:	9b05      	ldr	r3, [sp, #20]
 8007154:	2b02      	cmp	r3, #2
 8007156:	dd35      	ble.n	80071c4 <_dtoa_r+0x99c>
 8007158:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800715c:	f1b9 0f00 	cmp.w	r9, #0
 8007160:	d10d      	bne.n	800717e <_dtoa_r+0x956>
 8007162:	4631      	mov	r1, r6
 8007164:	464b      	mov	r3, r9
 8007166:	2205      	movs	r2, #5
 8007168:	4620      	mov	r0, r4
 800716a:	f000 fd47 	bl	8007bfc <__multadd>
 800716e:	4601      	mov	r1, r0
 8007170:	4606      	mov	r6, r0
 8007172:	4658      	mov	r0, fp
 8007174:	f000 ffa8 	bl	80080c8 <__mcmp>
 8007178:	2800      	cmp	r0, #0
 800717a:	f73f adbd 	bgt.w	8006cf8 <_dtoa_r+0x4d0>
 800717e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007180:	9d00      	ldr	r5, [sp, #0]
 8007182:	ea6f 0a03 	mvn.w	sl, r3
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	4631      	mov	r1, r6
 800718c:	4620      	mov	r0, r4
 800718e:	f000 fd13 	bl	8007bb8 <_Bfree>
 8007192:	2f00      	cmp	r7, #0
 8007194:	f43f aeb4 	beq.w	8006f00 <_dtoa_r+0x6d8>
 8007198:	f1b8 0f00 	cmp.w	r8, #0
 800719c:	d005      	beq.n	80071aa <_dtoa_r+0x982>
 800719e:	45b8      	cmp	r8, r7
 80071a0:	d003      	beq.n	80071aa <_dtoa_r+0x982>
 80071a2:	4641      	mov	r1, r8
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fd07 	bl	8007bb8 <_Bfree>
 80071aa:	4639      	mov	r1, r7
 80071ac:	4620      	mov	r0, r4
 80071ae:	f000 fd03 	bl	8007bb8 <_Bfree>
 80071b2:	e6a5      	b.n	8006f00 <_dtoa_r+0x6d8>
 80071b4:	2600      	movs	r6, #0
 80071b6:	4637      	mov	r7, r6
 80071b8:	e7e1      	b.n	800717e <_dtoa_r+0x956>
 80071ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80071bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071c0:	4637      	mov	r7, r6
 80071c2:	e599      	b.n	8006cf8 <_dtoa_r+0x4d0>
 80071c4:	9b08      	ldr	r3, [sp, #32]
 80071c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80fd 	beq.w	80073ca <_dtoa_r+0xba2>
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	dd05      	ble.n	80071e0 <_dtoa_r+0x9b8>
 80071d4:	4639      	mov	r1, r7
 80071d6:	462a      	mov	r2, r5
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 ff09 	bl	8007ff0 <__lshift>
 80071de:	4607      	mov	r7, r0
 80071e0:	9b06      	ldr	r3, [sp, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d05c      	beq.n	80072a0 <_dtoa_r+0xa78>
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 fca5 	bl	8007b38 <_Balloc>
 80071ee:	4605      	mov	r5, r0
 80071f0:	b928      	cbnz	r0, 80071fe <_dtoa_r+0x9d6>
 80071f2:	4b80      	ldr	r3, [pc, #512]	; (80073f4 <_dtoa_r+0xbcc>)
 80071f4:	4602      	mov	r2, r0
 80071f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071fa:	f7ff bb2e 	b.w	800685a <_dtoa_r+0x32>
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	3202      	adds	r2, #2
 8007202:	0092      	lsls	r2, r2, #2
 8007204:	f107 010c 	add.w	r1, r7, #12
 8007208:	300c      	adds	r0, #12
 800720a:	f000 fc87 	bl	8007b1c <memcpy>
 800720e:	2201      	movs	r2, #1
 8007210:	4629      	mov	r1, r5
 8007212:	4620      	mov	r0, r4
 8007214:	f000 feec 	bl	8007ff0 <__lshift>
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	9b00      	ldr	r3, [sp, #0]
 8007220:	444b      	add	r3, r9
 8007222:	9307      	str	r3, [sp, #28]
 8007224:	9b02      	ldr	r3, [sp, #8]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	46b8      	mov	r8, r7
 800722c:	9306      	str	r3, [sp, #24]
 800722e:	4607      	mov	r7, r0
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	4631      	mov	r1, r6
 8007234:	3b01      	subs	r3, #1
 8007236:	4658      	mov	r0, fp
 8007238:	9302      	str	r3, [sp, #8]
 800723a:	f7ff fa69 	bl	8006710 <quorem>
 800723e:	4603      	mov	r3, r0
 8007240:	3330      	adds	r3, #48	; 0x30
 8007242:	9004      	str	r0, [sp, #16]
 8007244:	4641      	mov	r1, r8
 8007246:	4658      	mov	r0, fp
 8007248:	9308      	str	r3, [sp, #32]
 800724a:	f000 ff3d 	bl	80080c8 <__mcmp>
 800724e:	463a      	mov	r2, r7
 8007250:	4681      	mov	r9, r0
 8007252:	4631      	mov	r1, r6
 8007254:	4620      	mov	r0, r4
 8007256:	f000 ff53 	bl	8008100 <__mdiff>
 800725a:	68c2      	ldr	r2, [r0, #12]
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	4605      	mov	r5, r0
 8007260:	bb02      	cbnz	r2, 80072a4 <_dtoa_r+0xa7c>
 8007262:	4601      	mov	r1, r0
 8007264:	4658      	mov	r0, fp
 8007266:	f000 ff2f 	bl	80080c8 <__mcmp>
 800726a:	9b08      	ldr	r3, [sp, #32]
 800726c:	4602      	mov	r2, r0
 800726e:	4629      	mov	r1, r5
 8007270:	4620      	mov	r0, r4
 8007272:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007276:	f000 fc9f 	bl	8007bb8 <_Bfree>
 800727a:	9b05      	ldr	r3, [sp, #20]
 800727c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800727e:	9d01      	ldr	r5, [sp, #4]
 8007280:	ea43 0102 	orr.w	r1, r3, r2
 8007284:	9b06      	ldr	r3, [sp, #24]
 8007286:	430b      	orrs	r3, r1
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	d10d      	bne.n	80072a8 <_dtoa_r+0xa80>
 800728c:	2b39      	cmp	r3, #57	; 0x39
 800728e:	d029      	beq.n	80072e4 <_dtoa_r+0xabc>
 8007290:	f1b9 0f00 	cmp.w	r9, #0
 8007294:	dd01      	ble.n	800729a <_dtoa_r+0xa72>
 8007296:	9b04      	ldr	r3, [sp, #16]
 8007298:	3331      	adds	r3, #49	; 0x31
 800729a:	9a02      	ldr	r2, [sp, #8]
 800729c:	7013      	strb	r3, [r2, #0]
 800729e:	e774      	b.n	800718a <_dtoa_r+0x962>
 80072a0:	4638      	mov	r0, r7
 80072a2:	e7b9      	b.n	8007218 <_dtoa_r+0x9f0>
 80072a4:	2201      	movs	r2, #1
 80072a6:	e7e2      	b.n	800726e <_dtoa_r+0xa46>
 80072a8:	f1b9 0f00 	cmp.w	r9, #0
 80072ac:	db06      	blt.n	80072bc <_dtoa_r+0xa94>
 80072ae:	9905      	ldr	r1, [sp, #20]
 80072b0:	ea41 0909 	orr.w	r9, r1, r9
 80072b4:	9906      	ldr	r1, [sp, #24]
 80072b6:	ea59 0101 	orrs.w	r1, r9, r1
 80072ba:	d120      	bne.n	80072fe <_dtoa_r+0xad6>
 80072bc:	2a00      	cmp	r2, #0
 80072be:	ddec      	ble.n	800729a <_dtoa_r+0xa72>
 80072c0:	4659      	mov	r1, fp
 80072c2:	2201      	movs	r2, #1
 80072c4:	4620      	mov	r0, r4
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	f000 fe92 	bl	8007ff0 <__lshift>
 80072cc:	4631      	mov	r1, r6
 80072ce:	4683      	mov	fp, r0
 80072d0:	f000 fefa 	bl	80080c8 <__mcmp>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	dc02      	bgt.n	80072e0 <_dtoa_r+0xab8>
 80072da:	d1de      	bne.n	800729a <_dtoa_r+0xa72>
 80072dc:	07da      	lsls	r2, r3, #31
 80072de:	d5dc      	bpl.n	800729a <_dtoa_r+0xa72>
 80072e0:	2b39      	cmp	r3, #57	; 0x39
 80072e2:	d1d8      	bne.n	8007296 <_dtoa_r+0xa6e>
 80072e4:	9a02      	ldr	r2, [sp, #8]
 80072e6:	2339      	movs	r3, #57	; 0x39
 80072e8:	7013      	strb	r3, [r2, #0]
 80072ea:	462b      	mov	r3, r5
 80072ec:	461d      	mov	r5, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80072f4:	2a39      	cmp	r2, #57	; 0x39
 80072f6:	d050      	beq.n	800739a <_dtoa_r+0xb72>
 80072f8:	3201      	adds	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	e745      	b.n	800718a <_dtoa_r+0x962>
 80072fe:	2a00      	cmp	r2, #0
 8007300:	dd03      	ble.n	800730a <_dtoa_r+0xae2>
 8007302:	2b39      	cmp	r3, #57	; 0x39
 8007304:	d0ee      	beq.n	80072e4 <_dtoa_r+0xabc>
 8007306:	3301      	adds	r3, #1
 8007308:	e7c7      	b.n	800729a <_dtoa_r+0xa72>
 800730a:	9a01      	ldr	r2, [sp, #4]
 800730c:	9907      	ldr	r1, [sp, #28]
 800730e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007312:	428a      	cmp	r2, r1
 8007314:	d02a      	beq.n	800736c <_dtoa_r+0xb44>
 8007316:	4659      	mov	r1, fp
 8007318:	2300      	movs	r3, #0
 800731a:	220a      	movs	r2, #10
 800731c:	4620      	mov	r0, r4
 800731e:	f000 fc6d 	bl	8007bfc <__multadd>
 8007322:	45b8      	cmp	r8, r7
 8007324:	4683      	mov	fp, r0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	f04f 020a 	mov.w	r2, #10
 800732e:	4641      	mov	r1, r8
 8007330:	4620      	mov	r0, r4
 8007332:	d107      	bne.n	8007344 <_dtoa_r+0xb1c>
 8007334:	f000 fc62 	bl	8007bfc <__multadd>
 8007338:	4680      	mov	r8, r0
 800733a:	4607      	mov	r7, r0
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	3301      	adds	r3, #1
 8007340:	9301      	str	r3, [sp, #4]
 8007342:	e775      	b.n	8007230 <_dtoa_r+0xa08>
 8007344:	f000 fc5a 	bl	8007bfc <__multadd>
 8007348:	4639      	mov	r1, r7
 800734a:	4680      	mov	r8, r0
 800734c:	2300      	movs	r3, #0
 800734e:	220a      	movs	r2, #10
 8007350:	4620      	mov	r0, r4
 8007352:	f000 fc53 	bl	8007bfc <__multadd>
 8007356:	4607      	mov	r7, r0
 8007358:	e7f0      	b.n	800733c <_dtoa_r+0xb14>
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	9a00      	ldr	r2, [sp, #0]
 8007360:	bfcc      	ite	gt
 8007362:	464d      	movgt	r5, r9
 8007364:	2501      	movle	r5, #1
 8007366:	4415      	add	r5, r2
 8007368:	f04f 0800 	mov.w	r8, #0
 800736c:	4659      	mov	r1, fp
 800736e:	2201      	movs	r2, #1
 8007370:	4620      	mov	r0, r4
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	f000 fe3c 	bl	8007ff0 <__lshift>
 8007378:	4631      	mov	r1, r6
 800737a:	4683      	mov	fp, r0
 800737c:	f000 fea4 	bl	80080c8 <__mcmp>
 8007380:	2800      	cmp	r0, #0
 8007382:	dcb2      	bgt.n	80072ea <_dtoa_r+0xac2>
 8007384:	d102      	bne.n	800738c <_dtoa_r+0xb64>
 8007386:	9b01      	ldr	r3, [sp, #4]
 8007388:	07db      	lsls	r3, r3, #31
 800738a:	d4ae      	bmi.n	80072ea <_dtoa_r+0xac2>
 800738c:	462b      	mov	r3, r5
 800738e:	461d      	mov	r5, r3
 8007390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007394:	2a30      	cmp	r2, #48	; 0x30
 8007396:	d0fa      	beq.n	800738e <_dtoa_r+0xb66>
 8007398:	e6f7      	b.n	800718a <_dtoa_r+0x962>
 800739a:	9a00      	ldr	r2, [sp, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d1a5      	bne.n	80072ec <_dtoa_r+0xac4>
 80073a0:	f10a 0a01 	add.w	sl, sl, #1
 80073a4:	2331      	movs	r3, #49	; 0x31
 80073a6:	e779      	b.n	800729c <_dtoa_r+0xa74>
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <_dtoa_r+0xbd0>)
 80073aa:	f7ff baaf 	b.w	800690c <_dtoa_r+0xe4>
 80073ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f47f aa86 	bne.w	80068c2 <_dtoa_r+0x9a>
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <_dtoa_r+0xbd4>)
 80073b8:	f7ff baa8 	b.w	800690c <_dtoa_r+0xe4>
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	dc03      	bgt.n	80073ca <_dtoa_r+0xba2>
 80073c2:	9b05      	ldr	r3, [sp, #20]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	f73f aec9 	bgt.w	800715c <_dtoa_r+0x934>
 80073ca:	9d00      	ldr	r5, [sp, #0]
 80073cc:	4631      	mov	r1, r6
 80073ce:	4658      	mov	r0, fp
 80073d0:	f7ff f99e 	bl	8006710 <quorem>
 80073d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073d8:	f805 3b01 	strb.w	r3, [r5], #1
 80073dc:	9a00      	ldr	r2, [sp, #0]
 80073de:	1aaa      	subs	r2, r5, r2
 80073e0:	4591      	cmp	r9, r2
 80073e2:	ddba      	ble.n	800735a <_dtoa_r+0xb32>
 80073e4:	4659      	mov	r1, fp
 80073e6:	2300      	movs	r3, #0
 80073e8:	220a      	movs	r2, #10
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fc06 	bl	8007bfc <__multadd>
 80073f0:	4683      	mov	fp, r0
 80073f2:	e7eb      	b.n	80073cc <_dtoa_r+0xba4>
 80073f4:	0800977c 	.word	0x0800977c
 80073f8:	0800957c 	.word	0x0800957c
 80073fc:	080096f9 	.word	0x080096f9

08007400 <rshift>:
 8007400:	6903      	ldr	r3, [r0, #16]
 8007402:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007406:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800740a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800740e:	f100 0414 	add.w	r4, r0, #20
 8007412:	dd45      	ble.n	80074a0 <rshift+0xa0>
 8007414:	f011 011f 	ands.w	r1, r1, #31
 8007418:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800741c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007420:	d10c      	bne.n	800743c <rshift+0x3c>
 8007422:	f100 0710 	add.w	r7, r0, #16
 8007426:	4629      	mov	r1, r5
 8007428:	42b1      	cmp	r1, r6
 800742a:	d334      	bcc.n	8007496 <rshift+0x96>
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	1eea      	subs	r2, r5, #3
 8007432:	4296      	cmp	r6, r2
 8007434:	bf38      	it	cc
 8007436:	2300      	movcc	r3, #0
 8007438:	4423      	add	r3, r4
 800743a:	e015      	b.n	8007468 <rshift+0x68>
 800743c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007440:	f1c1 0820 	rsb	r8, r1, #32
 8007444:	40cf      	lsrs	r7, r1
 8007446:	f105 0e04 	add.w	lr, r5, #4
 800744a:	46a1      	mov	r9, r4
 800744c:	4576      	cmp	r6, lr
 800744e:	46f4      	mov	ip, lr
 8007450:	d815      	bhi.n	800747e <rshift+0x7e>
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	009a      	lsls	r2, r3, #2
 8007456:	3a04      	subs	r2, #4
 8007458:	3501      	adds	r5, #1
 800745a:	42ae      	cmp	r6, r5
 800745c:	bf38      	it	cc
 800745e:	2200      	movcc	r2, #0
 8007460:	18a3      	adds	r3, r4, r2
 8007462:	50a7      	str	r7, [r4, r2]
 8007464:	b107      	cbz	r7, 8007468 <rshift+0x68>
 8007466:	3304      	adds	r3, #4
 8007468:	1b1a      	subs	r2, r3, r4
 800746a:	42a3      	cmp	r3, r4
 800746c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007470:	bf08      	it	eq
 8007472:	2300      	moveq	r3, #0
 8007474:	6102      	str	r2, [r0, #16]
 8007476:	bf08      	it	eq
 8007478:	6143      	streq	r3, [r0, #20]
 800747a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800747e:	f8dc c000 	ldr.w	ip, [ip]
 8007482:	fa0c fc08 	lsl.w	ip, ip, r8
 8007486:	ea4c 0707 	orr.w	r7, ip, r7
 800748a:	f849 7b04 	str.w	r7, [r9], #4
 800748e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007492:	40cf      	lsrs	r7, r1
 8007494:	e7da      	b.n	800744c <rshift+0x4c>
 8007496:	f851 cb04 	ldr.w	ip, [r1], #4
 800749a:	f847 cf04 	str.w	ip, [r7, #4]!
 800749e:	e7c3      	b.n	8007428 <rshift+0x28>
 80074a0:	4623      	mov	r3, r4
 80074a2:	e7e1      	b.n	8007468 <rshift+0x68>

080074a4 <__hexdig_fun>:
 80074a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	d802      	bhi.n	80074b2 <__hexdig_fun+0xe>
 80074ac:	3820      	subs	r0, #32
 80074ae:	b2c0      	uxtb	r0, r0
 80074b0:	4770      	bx	lr
 80074b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d801      	bhi.n	80074be <__hexdig_fun+0x1a>
 80074ba:	3847      	subs	r0, #71	; 0x47
 80074bc:	e7f7      	b.n	80074ae <__hexdig_fun+0xa>
 80074be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d801      	bhi.n	80074ca <__hexdig_fun+0x26>
 80074c6:	3827      	subs	r0, #39	; 0x27
 80074c8:	e7f1      	b.n	80074ae <__hexdig_fun+0xa>
 80074ca:	2000      	movs	r0, #0
 80074cc:	4770      	bx	lr
	...

080074d0 <__gethex>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ed2d 8b02 	vpush	{d8}
 80074d8:	b089      	sub	sp, #36	; 0x24
 80074da:	ee08 0a10 	vmov	s16, r0
 80074de:	9304      	str	r3, [sp, #16]
 80074e0:	4bbc      	ldr	r3, [pc, #752]	; (80077d4 <__gethex+0x304>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	4618      	mov	r0, r3
 80074e8:	468b      	mov	fp, r1
 80074ea:	4690      	mov	r8, r2
 80074ec:	f7f8 fe70 	bl	80001d0 <strlen>
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	f8db 2000 	ldr.w	r2, [fp]
 80074f6:	4403      	add	r3, r0
 80074f8:	4682      	mov	sl, r0
 80074fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	1c93      	adds	r3, r2, #2
 8007502:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007506:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800750a:	32fe      	adds	r2, #254	; 0xfe
 800750c:	18d1      	adds	r1, r2, r3
 800750e:	461f      	mov	r7, r3
 8007510:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007514:	9100      	str	r1, [sp, #0]
 8007516:	2830      	cmp	r0, #48	; 0x30
 8007518:	d0f8      	beq.n	800750c <__gethex+0x3c>
 800751a:	f7ff ffc3 	bl	80074a4 <__hexdig_fun>
 800751e:	4604      	mov	r4, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	d13a      	bne.n	800759a <__gethex+0xca>
 8007524:	9901      	ldr	r1, [sp, #4]
 8007526:	4652      	mov	r2, sl
 8007528:	4638      	mov	r0, r7
 800752a:	f001 f9ed 	bl	8008908 <strncmp>
 800752e:	4605      	mov	r5, r0
 8007530:	2800      	cmp	r0, #0
 8007532:	d168      	bne.n	8007606 <__gethex+0x136>
 8007534:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007538:	eb07 060a 	add.w	r6, r7, sl
 800753c:	f7ff ffb2 	bl	80074a4 <__hexdig_fun>
 8007540:	2800      	cmp	r0, #0
 8007542:	d062      	beq.n	800760a <__gethex+0x13a>
 8007544:	4633      	mov	r3, r6
 8007546:	7818      	ldrb	r0, [r3, #0]
 8007548:	2830      	cmp	r0, #48	; 0x30
 800754a:	461f      	mov	r7, r3
 800754c:	f103 0301 	add.w	r3, r3, #1
 8007550:	d0f9      	beq.n	8007546 <__gethex+0x76>
 8007552:	f7ff ffa7 	bl	80074a4 <__hexdig_fun>
 8007556:	2301      	movs	r3, #1
 8007558:	fab0 f480 	clz	r4, r0
 800755c:	0964      	lsrs	r4, r4, #5
 800755e:	4635      	mov	r5, r6
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	463a      	mov	r2, r7
 8007564:	4616      	mov	r6, r2
 8007566:	3201      	adds	r2, #1
 8007568:	7830      	ldrb	r0, [r6, #0]
 800756a:	f7ff ff9b 	bl	80074a4 <__hexdig_fun>
 800756e:	2800      	cmp	r0, #0
 8007570:	d1f8      	bne.n	8007564 <__gethex+0x94>
 8007572:	9901      	ldr	r1, [sp, #4]
 8007574:	4652      	mov	r2, sl
 8007576:	4630      	mov	r0, r6
 8007578:	f001 f9c6 	bl	8008908 <strncmp>
 800757c:	b980      	cbnz	r0, 80075a0 <__gethex+0xd0>
 800757e:	b94d      	cbnz	r5, 8007594 <__gethex+0xc4>
 8007580:	eb06 050a 	add.w	r5, r6, sl
 8007584:	462a      	mov	r2, r5
 8007586:	4616      	mov	r6, r2
 8007588:	3201      	adds	r2, #1
 800758a:	7830      	ldrb	r0, [r6, #0]
 800758c:	f7ff ff8a 	bl	80074a4 <__hexdig_fun>
 8007590:	2800      	cmp	r0, #0
 8007592:	d1f8      	bne.n	8007586 <__gethex+0xb6>
 8007594:	1bad      	subs	r5, r5, r6
 8007596:	00ad      	lsls	r5, r5, #2
 8007598:	e004      	b.n	80075a4 <__gethex+0xd4>
 800759a:	2400      	movs	r4, #0
 800759c:	4625      	mov	r5, r4
 800759e:	e7e0      	b.n	8007562 <__gethex+0x92>
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	d1f7      	bne.n	8007594 <__gethex+0xc4>
 80075a4:	7833      	ldrb	r3, [r6, #0]
 80075a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80075aa:	2b50      	cmp	r3, #80	; 0x50
 80075ac:	d13b      	bne.n	8007626 <__gethex+0x156>
 80075ae:	7873      	ldrb	r3, [r6, #1]
 80075b0:	2b2b      	cmp	r3, #43	; 0x2b
 80075b2:	d02c      	beq.n	800760e <__gethex+0x13e>
 80075b4:	2b2d      	cmp	r3, #45	; 0x2d
 80075b6:	d02e      	beq.n	8007616 <__gethex+0x146>
 80075b8:	1c71      	adds	r1, r6, #1
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	7808      	ldrb	r0, [r1, #0]
 80075c0:	f7ff ff70 	bl	80074a4 <__hexdig_fun>
 80075c4:	1e43      	subs	r3, r0, #1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b18      	cmp	r3, #24
 80075ca:	d82c      	bhi.n	8007626 <__gethex+0x156>
 80075cc:	f1a0 0210 	sub.w	r2, r0, #16
 80075d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075d4:	f7ff ff66 	bl	80074a4 <__hexdig_fun>
 80075d8:	1e43      	subs	r3, r0, #1
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b18      	cmp	r3, #24
 80075de:	d91d      	bls.n	800761c <__gethex+0x14c>
 80075e0:	f1b9 0f00 	cmp.w	r9, #0
 80075e4:	d000      	beq.n	80075e8 <__gethex+0x118>
 80075e6:	4252      	negs	r2, r2
 80075e8:	4415      	add	r5, r2
 80075ea:	f8cb 1000 	str.w	r1, [fp]
 80075ee:	b1e4      	cbz	r4, 800762a <__gethex+0x15a>
 80075f0:	9b00      	ldr	r3, [sp, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf14      	ite	ne
 80075f6:	2700      	movne	r7, #0
 80075f8:	2706      	moveq	r7, #6
 80075fa:	4638      	mov	r0, r7
 80075fc:	b009      	add	sp, #36	; 0x24
 80075fe:	ecbd 8b02 	vpop	{d8}
 8007602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	463e      	mov	r6, r7
 8007608:	4625      	mov	r5, r4
 800760a:	2401      	movs	r4, #1
 800760c:	e7ca      	b.n	80075a4 <__gethex+0xd4>
 800760e:	f04f 0900 	mov.w	r9, #0
 8007612:	1cb1      	adds	r1, r6, #2
 8007614:	e7d3      	b.n	80075be <__gethex+0xee>
 8007616:	f04f 0901 	mov.w	r9, #1
 800761a:	e7fa      	b.n	8007612 <__gethex+0x142>
 800761c:	230a      	movs	r3, #10
 800761e:	fb03 0202 	mla	r2, r3, r2, r0
 8007622:	3a10      	subs	r2, #16
 8007624:	e7d4      	b.n	80075d0 <__gethex+0x100>
 8007626:	4631      	mov	r1, r6
 8007628:	e7df      	b.n	80075ea <__gethex+0x11a>
 800762a:	1bf3      	subs	r3, r6, r7
 800762c:	3b01      	subs	r3, #1
 800762e:	4621      	mov	r1, r4
 8007630:	2b07      	cmp	r3, #7
 8007632:	dc0b      	bgt.n	800764c <__gethex+0x17c>
 8007634:	ee18 0a10 	vmov	r0, s16
 8007638:	f000 fa7e 	bl	8007b38 <_Balloc>
 800763c:	4604      	mov	r4, r0
 800763e:	b940      	cbnz	r0, 8007652 <__gethex+0x182>
 8007640:	4b65      	ldr	r3, [pc, #404]	; (80077d8 <__gethex+0x308>)
 8007642:	4602      	mov	r2, r0
 8007644:	21de      	movs	r1, #222	; 0xde
 8007646:	4865      	ldr	r0, [pc, #404]	; (80077dc <__gethex+0x30c>)
 8007648:	f001 f97e 	bl	8008948 <__assert_func>
 800764c:	3101      	adds	r1, #1
 800764e:	105b      	asrs	r3, r3, #1
 8007650:	e7ee      	b.n	8007630 <__gethex+0x160>
 8007652:	f100 0914 	add.w	r9, r0, #20
 8007656:	f04f 0b00 	mov.w	fp, #0
 800765a:	f1ca 0301 	rsb	r3, sl, #1
 800765e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007662:	f8cd b000 	str.w	fp, [sp]
 8007666:	9306      	str	r3, [sp, #24]
 8007668:	42b7      	cmp	r7, r6
 800766a:	d340      	bcc.n	80076ee <__gethex+0x21e>
 800766c:	9802      	ldr	r0, [sp, #8]
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	f840 3b04 	str.w	r3, [r0], #4
 8007674:	eba0 0009 	sub.w	r0, r0, r9
 8007678:	1080      	asrs	r0, r0, #2
 800767a:	0146      	lsls	r6, r0, #5
 800767c:	6120      	str	r0, [r4, #16]
 800767e:	4618      	mov	r0, r3
 8007680:	f000 fb50 	bl	8007d24 <__hi0bits>
 8007684:	1a30      	subs	r0, r6, r0
 8007686:	f8d8 6000 	ldr.w	r6, [r8]
 800768a:	42b0      	cmp	r0, r6
 800768c:	dd63      	ble.n	8007756 <__gethex+0x286>
 800768e:	1b87      	subs	r7, r0, r6
 8007690:	4639      	mov	r1, r7
 8007692:	4620      	mov	r0, r4
 8007694:	f000 feea 	bl	800846c <__any_on>
 8007698:	4682      	mov	sl, r0
 800769a:	b1a8      	cbz	r0, 80076c8 <__gethex+0x1f8>
 800769c:	1e7b      	subs	r3, r7, #1
 800769e:	1159      	asrs	r1, r3, #5
 80076a0:	f003 021f 	and.w	r2, r3, #31
 80076a4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80076a8:	f04f 0a01 	mov.w	sl, #1
 80076ac:	fa0a f202 	lsl.w	r2, sl, r2
 80076b0:	420a      	tst	r2, r1
 80076b2:	d009      	beq.n	80076c8 <__gethex+0x1f8>
 80076b4:	4553      	cmp	r3, sl
 80076b6:	dd05      	ble.n	80076c4 <__gethex+0x1f4>
 80076b8:	1eb9      	subs	r1, r7, #2
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fed6 	bl	800846c <__any_on>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d145      	bne.n	8007750 <__gethex+0x280>
 80076c4:	f04f 0a02 	mov.w	sl, #2
 80076c8:	4639      	mov	r1, r7
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff fe98 	bl	8007400 <rshift>
 80076d0:	443d      	add	r5, r7
 80076d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076d6:	42ab      	cmp	r3, r5
 80076d8:	da4c      	bge.n	8007774 <__gethex+0x2a4>
 80076da:	ee18 0a10 	vmov	r0, s16
 80076de:	4621      	mov	r1, r4
 80076e0:	f000 fa6a 	bl	8007bb8 <_Bfree>
 80076e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076e6:	2300      	movs	r3, #0
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	27a3      	movs	r7, #163	; 0xa3
 80076ec:	e785      	b.n	80075fa <__gethex+0x12a>
 80076ee:	1e73      	subs	r3, r6, #1
 80076f0:	9a05      	ldr	r2, [sp, #20]
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d019      	beq.n	8007730 <__gethex+0x260>
 80076fc:	f1bb 0f20 	cmp.w	fp, #32
 8007700:	d107      	bne.n	8007712 <__gethex+0x242>
 8007702:	9b02      	ldr	r3, [sp, #8]
 8007704:	9a00      	ldr	r2, [sp, #0]
 8007706:	f843 2b04 	str.w	r2, [r3], #4
 800770a:	9302      	str	r3, [sp, #8]
 800770c:	2300      	movs	r3, #0
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	469b      	mov	fp, r3
 8007712:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007716:	f7ff fec5 	bl	80074a4 <__hexdig_fun>
 800771a:	9b00      	ldr	r3, [sp, #0]
 800771c:	f000 000f 	and.w	r0, r0, #15
 8007720:	fa00 f00b 	lsl.w	r0, r0, fp
 8007724:	4303      	orrs	r3, r0
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	f10b 0b04 	add.w	fp, fp, #4
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	e00d      	b.n	800774c <__gethex+0x27c>
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	9a06      	ldr	r2, [sp, #24]
 8007734:	4413      	add	r3, r2
 8007736:	42bb      	cmp	r3, r7
 8007738:	d3e0      	bcc.n	80076fc <__gethex+0x22c>
 800773a:	4618      	mov	r0, r3
 800773c:	9901      	ldr	r1, [sp, #4]
 800773e:	9307      	str	r3, [sp, #28]
 8007740:	4652      	mov	r2, sl
 8007742:	f001 f8e1 	bl	8008908 <strncmp>
 8007746:	9b07      	ldr	r3, [sp, #28]
 8007748:	2800      	cmp	r0, #0
 800774a:	d1d7      	bne.n	80076fc <__gethex+0x22c>
 800774c:	461e      	mov	r6, r3
 800774e:	e78b      	b.n	8007668 <__gethex+0x198>
 8007750:	f04f 0a03 	mov.w	sl, #3
 8007754:	e7b8      	b.n	80076c8 <__gethex+0x1f8>
 8007756:	da0a      	bge.n	800776e <__gethex+0x29e>
 8007758:	1a37      	subs	r7, r6, r0
 800775a:	4621      	mov	r1, r4
 800775c:	ee18 0a10 	vmov	r0, s16
 8007760:	463a      	mov	r2, r7
 8007762:	f000 fc45 	bl	8007ff0 <__lshift>
 8007766:	1bed      	subs	r5, r5, r7
 8007768:	4604      	mov	r4, r0
 800776a:	f100 0914 	add.w	r9, r0, #20
 800776e:	f04f 0a00 	mov.w	sl, #0
 8007772:	e7ae      	b.n	80076d2 <__gethex+0x202>
 8007774:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007778:	42a8      	cmp	r0, r5
 800777a:	dd72      	ble.n	8007862 <__gethex+0x392>
 800777c:	1b45      	subs	r5, r0, r5
 800777e:	42ae      	cmp	r6, r5
 8007780:	dc36      	bgt.n	80077f0 <__gethex+0x320>
 8007782:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d02a      	beq.n	80077e0 <__gethex+0x310>
 800778a:	2b03      	cmp	r3, #3
 800778c:	d02c      	beq.n	80077e8 <__gethex+0x318>
 800778e:	2b01      	cmp	r3, #1
 8007790:	d115      	bne.n	80077be <__gethex+0x2ee>
 8007792:	42ae      	cmp	r6, r5
 8007794:	d113      	bne.n	80077be <__gethex+0x2ee>
 8007796:	2e01      	cmp	r6, #1
 8007798:	d10b      	bne.n	80077b2 <__gethex+0x2e2>
 800779a:	9a04      	ldr	r2, [sp, #16]
 800779c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	2301      	movs	r3, #1
 80077a4:	6123      	str	r3, [r4, #16]
 80077a6:	f8c9 3000 	str.w	r3, [r9]
 80077aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077ac:	2762      	movs	r7, #98	; 0x62
 80077ae:	601c      	str	r4, [r3, #0]
 80077b0:	e723      	b.n	80075fa <__gethex+0x12a>
 80077b2:	1e71      	subs	r1, r6, #1
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 fe59 	bl	800846c <__any_on>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d1ed      	bne.n	800779a <__gethex+0x2ca>
 80077be:	ee18 0a10 	vmov	r0, s16
 80077c2:	4621      	mov	r1, r4
 80077c4:	f000 f9f8 	bl	8007bb8 <_Bfree>
 80077c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077ca:	2300      	movs	r3, #0
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	2750      	movs	r7, #80	; 0x50
 80077d0:	e713      	b.n	80075fa <__gethex+0x12a>
 80077d2:	bf00      	nop
 80077d4:	080097f8 	.word	0x080097f8
 80077d8:	0800977c 	.word	0x0800977c
 80077dc:	0800978d 	.word	0x0800978d
 80077e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1eb      	bne.n	80077be <__gethex+0x2ee>
 80077e6:	e7d8      	b.n	800779a <__gethex+0x2ca>
 80077e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1d5      	bne.n	800779a <__gethex+0x2ca>
 80077ee:	e7e6      	b.n	80077be <__gethex+0x2ee>
 80077f0:	1e6f      	subs	r7, r5, #1
 80077f2:	f1ba 0f00 	cmp.w	sl, #0
 80077f6:	d131      	bne.n	800785c <__gethex+0x38c>
 80077f8:	b127      	cbz	r7, 8007804 <__gethex+0x334>
 80077fa:	4639      	mov	r1, r7
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fe35 	bl	800846c <__any_on>
 8007802:	4682      	mov	sl, r0
 8007804:	117b      	asrs	r3, r7, #5
 8007806:	2101      	movs	r1, #1
 8007808:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800780c:	f007 071f 	and.w	r7, r7, #31
 8007810:	fa01 f707 	lsl.w	r7, r1, r7
 8007814:	421f      	tst	r7, r3
 8007816:	4629      	mov	r1, r5
 8007818:	4620      	mov	r0, r4
 800781a:	bf18      	it	ne
 800781c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007820:	1b76      	subs	r6, r6, r5
 8007822:	f7ff fded 	bl	8007400 <rshift>
 8007826:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800782a:	2702      	movs	r7, #2
 800782c:	f1ba 0f00 	cmp.w	sl, #0
 8007830:	d048      	beq.n	80078c4 <__gethex+0x3f4>
 8007832:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d015      	beq.n	8007866 <__gethex+0x396>
 800783a:	2b03      	cmp	r3, #3
 800783c:	d017      	beq.n	800786e <__gethex+0x39e>
 800783e:	2b01      	cmp	r3, #1
 8007840:	d109      	bne.n	8007856 <__gethex+0x386>
 8007842:	f01a 0f02 	tst.w	sl, #2
 8007846:	d006      	beq.n	8007856 <__gethex+0x386>
 8007848:	f8d9 0000 	ldr.w	r0, [r9]
 800784c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007850:	f01a 0f01 	tst.w	sl, #1
 8007854:	d10e      	bne.n	8007874 <__gethex+0x3a4>
 8007856:	f047 0710 	orr.w	r7, r7, #16
 800785a:	e033      	b.n	80078c4 <__gethex+0x3f4>
 800785c:	f04f 0a01 	mov.w	sl, #1
 8007860:	e7d0      	b.n	8007804 <__gethex+0x334>
 8007862:	2701      	movs	r7, #1
 8007864:	e7e2      	b.n	800782c <__gethex+0x35c>
 8007866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007868:	f1c3 0301 	rsb	r3, r3, #1
 800786c:	9315      	str	r3, [sp, #84]	; 0x54
 800786e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0f0      	beq.n	8007856 <__gethex+0x386>
 8007874:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007878:	f104 0314 	add.w	r3, r4, #20
 800787c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007880:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007884:	f04f 0c00 	mov.w	ip, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f853 2b04 	ldr.w	r2, [r3], #4
 800788e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007892:	d01c      	beq.n	80078ce <__gethex+0x3fe>
 8007894:	3201      	adds	r2, #1
 8007896:	6002      	str	r2, [r0, #0]
 8007898:	2f02      	cmp	r7, #2
 800789a:	f104 0314 	add.w	r3, r4, #20
 800789e:	d13f      	bne.n	8007920 <__gethex+0x450>
 80078a0:	f8d8 2000 	ldr.w	r2, [r8]
 80078a4:	3a01      	subs	r2, #1
 80078a6:	42b2      	cmp	r2, r6
 80078a8:	d10a      	bne.n	80078c0 <__gethex+0x3f0>
 80078aa:	1171      	asrs	r1, r6, #5
 80078ac:	2201      	movs	r2, #1
 80078ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078b2:	f006 061f 	and.w	r6, r6, #31
 80078b6:	fa02 f606 	lsl.w	r6, r2, r6
 80078ba:	421e      	tst	r6, r3
 80078bc:	bf18      	it	ne
 80078be:	4617      	movne	r7, r2
 80078c0:	f047 0720 	orr.w	r7, r7, #32
 80078c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078c6:	601c      	str	r4, [r3, #0]
 80078c8:	9b04      	ldr	r3, [sp, #16]
 80078ca:	601d      	str	r5, [r3, #0]
 80078cc:	e695      	b.n	80075fa <__gethex+0x12a>
 80078ce:	4299      	cmp	r1, r3
 80078d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80078d4:	d8d8      	bhi.n	8007888 <__gethex+0x3b8>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	459b      	cmp	fp, r3
 80078da:	db19      	blt.n	8007910 <__gethex+0x440>
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	ee18 0a10 	vmov	r0, s16
 80078e2:	3101      	adds	r1, #1
 80078e4:	f000 f928 	bl	8007b38 <_Balloc>
 80078e8:	4681      	mov	r9, r0
 80078ea:	b918      	cbnz	r0, 80078f4 <__gethex+0x424>
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <__gethex+0x488>)
 80078ee:	4602      	mov	r2, r0
 80078f0:	2184      	movs	r1, #132	; 0x84
 80078f2:	e6a8      	b.n	8007646 <__gethex+0x176>
 80078f4:	6922      	ldr	r2, [r4, #16]
 80078f6:	3202      	adds	r2, #2
 80078f8:	f104 010c 	add.w	r1, r4, #12
 80078fc:	0092      	lsls	r2, r2, #2
 80078fe:	300c      	adds	r0, #12
 8007900:	f000 f90c 	bl	8007b1c <memcpy>
 8007904:	4621      	mov	r1, r4
 8007906:	ee18 0a10 	vmov	r0, s16
 800790a:	f000 f955 	bl	8007bb8 <_Bfree>
 800790e:	464c      	mov	r4, r9
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007918:	6122      	str	r2, [r4, #16]
 800791a:	2201      	movs	r2, #1
 800791c:	615a      	str	r2, [r3, #20]
 800791e:	e7bb      	b.n	8007898 <__gethex+0x3c8>
 8007920:	6922      	ldr	r2, [r4, #16]
 8007922:	455a      	cmp	r2, fp
 8007924:	dd0b      	ble.n	800793e <__gethex+0x46e>
 8007926:	2101      	movs	r1, #1
 8007928:	4620      	mov	r0, r4
 800792a:	f7ff fd69 	bl	8007400 <rshift>
 800792e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007932:	3501      	adds	r5, #1
 8007934:	42ab      	cmp	r3, r5
 8007936:	f6ff aed0 	blt.w	80076da <__gethex+0x20a>
 800793a:	2701      	movs	r7, #1
 800793c:	e7c0      	b.n	80078c0 <__gethex+0x3f0>
 800793e:	f016 061f 	ands.w	r6, r6, #31
 8007942:	d0fa      	beq.n	800793a <__gethex+0x46a>
 8007944:	449a      	add	sl, r3
 8007946:	f1c6 0620 	rsb	r6, r6, #32
 800794a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800794e:	f000 f9e9 	bl	8007d24 <__hi0bits>
 8007952:	42b0      	cmp	r0, r6
 8007954:	dbe7      	blt.n	8007926 <__gethex+0x456>
 8007956:	e7f0      	b.n	800793a <__gethex+0x46a>
 8007958:	0800977c 	.word	0x0800977c

0800795c <L_shift>:
 800795c:	f1c2 0208 	rsb	r2, r2, #8
 8007960:	0092      	lsls	r2, r2, #2
 8007962:	b570      	push	{r4, r5, r6, lr}
 8007964:	f1c2 0620 	rsb	r6, r2, #32
 8007968:	6843      	ldr	r3, [r0, #4]
 800796a:	6804      	ldr	r4, [r0, #0]
 800796c:	fa03 f506 	lsl.w	r5, r3, r6
 8007970:	432c      	orrs	r4, r5
 8007972:	40d3      	lsrs	r3, r2
 8007974:	6004      	str	r4, [r0, #0]
 8007976:	f840 3f04 	str.w	r3, [r0, #4]!
 800797a:	4288      	cmp	r0, r1
 800797c:	d3f4      	bcc.n	8007968 <L_shift+0xc>
 800797e:	bd70      	pop	{r4, r5, r6, pc}

08007980 <__match>:
 8007980:	b530      	push	{r4, r5, lr}
 8007982:	6803      	ldr	r3, [r0, #0]
 8007984:	3301      	adds	r3, #1
 8007986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800798a:	b914      	cbnz	r4, 8007992 <__match+0x12>
 800798c:	6003      	str	r3, [r0, #0]
 800798e:	2001      	movs	r0, #1
 8007990:	bd30      	pop	{r4, r5, pc}
 8007992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007996:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800799a:	2d19      	cmp	r5, #25
 800799c:	bf98      	it	ls
 800799e:	3220      	addls	r2, #32
 80079a0:	42a2      	cmp	r2, r4
 80079a2:	d0f0      	beq.n	8007986 <__match+0x6>
 80079a4:	2000      	movs	r0, #0
 80079a6:	e7f3      	b.n	8007990 <__match+0x10>

080079a8 <__hexnan>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	680b      	ldr	r3, [r1, #0]
 80079ae:	6801      	ldr	r1, [r0, #0]
 80079b0:	115e      	asrs	r6, r3, #5
 80079b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80079b6:	f013 031f 	ands.w	r3, r3, #31
 80079ba:	b087      	sub	sp, #28
 80079bc:	bf18      	it	ne
 80079be:	3604      	addne	r6, #4
 80079c0:	2500      	movs	r5, #0
 80079c2:	1f37      	subs	r7, r6, #4
 80079c4:	4682      	mov	sl, r0
 80079c6:	4690      	mov	r8, r2
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80079ce:	46b9      	mov	r9, r7
 80079d0:	463c      	mov	r4, r7
 80079d2:	9502      	str	r5, [sp, #8]
 80079d4:	46ab      	mov	fp, r5
 80079d6:	784a      	ldrb	r2, [r1, #1]
 80079d8:	1c4b      	adds	r3, r1, #1
 80079da:	9303      	str	r3, [sp, #12]
 80079dc:	b342      	cbz	r2, 8007a30 <__hexnan+0x88>
 80079de:	4610      	mov	r0, r2
 80079e0:	9105      	str	r1, [sp, #20]
 80079e2:	9204      	str	r2, [sp, #16]
 80079e4:	f7ff fd5e 	bl	80074a4 <__hexdig_fun>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d14f      	bne.n	8007a8c <__hexnan+0xe4>
 80079ec:	9a04      	ldr	r2, [sp, #16]
 80079ee:	9905      	ldr	r1, [sp, #20]
 80079f0:	2a20      	cmp	r2, #32
 80079f2:	d818      	bhi.n	8007a26 <__hexnan+0x7e>
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	459b      	cmp	fp, r3
 80079f8:	dd13      	ble.n	8007a22 <__hexnan+0x7a>
 80079fa:	454c      	cmp	r4, r9
 80079fc:	d206      	bcs.n	8007a0c <__hexnan+0x64>
 80079fe:	2d07      	cmp	r5, #7
 8007a00:	dc04      	bgt.n	8007a0c <__hexnan+0x64>
 8007a02:	462a      	mov	r2, r5
 8007a04:	4649      	mov	r1, r9
 8007a06:	4620      	mov	r0, r4
 8007a08:	f7ff ffa8 	bl	800795c <L_shift>
 8007a0c:	4544      	cmp	r4, r8
 8007a0e:	d950      	bls.n	8007ab2 <__hexnan+0x10a>
 8007a10:	2300      	movs	r3, #0
 8007a12:	f1a4 0904 	sub.w	r9, r4, #4
 8007a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a1a:	f8cd b008 	str.w	fp, [sp, #8]
 8007a1e:	464c      	mov	r4, r9
 8007a20:	461d      	mov	r5, r3
 8007a22:	9903      	ldr	r1, [sp, #12]
 8007a24:	e7d7      	b.n	80079d6 <__hexnan+0x2e>
 8007a26:	2a29      	cmp	r2, #41	; 0x29
 8007a28:	d156      	bne.n	8007ad8 <__hexnan+0x130>
 8007a2a:	3102      	adds	r1, #2
 8007a2c:	f8ca 1000 	str.w	r1, [sl]
 8007a30:	f1bb 0f00 	cmp.w	fp, #0
 8007a34:	d050      	beq.n	8007ad8 <__hexnan+0x130>
 8007a36:	454c      	cmp	r4, r9
 8007a38:	d206      	bcs.n	8007a48 <__hexnan+0xa0>
 8007a3a:	2d07      	cmp	r5, #7
 8007a3c:	dc04      	bgt.n	8007a48 <__hexnan+0xa0>
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4649      	mov	r1, r9
 8007a42:	4620      	mov	r0, r4
 8007a44:	f7ff ff8a 	bl	800795c <L_shift>
 8007a48:	4544      	cmp	r4, r8
 8007a4a:	d934      	bls.n	8007ab6 <__hexnan+0x10e>
 8007a4c:	f1a8 0204 	sub.w	r2, r8, #4
 8007a50:	4623      	mov	r3, r4
 8007a52:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a56:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a5a:	429f      	cmp	r7, r3
 8007a5c:	d2f9      	bcs.n	8007a52 <__hexnan+0xaa>
 8007a5e:	1b3b      	subs	r3, r7, r4
 8007a60:	f023 0303 	bic.w	r3, r3, #3
 8007a64:	3304      	adds	r3, #4
 8007a66:	3401      	adds	r4, #1
 8007a68:	3e03      	subs	r6, #3
 8007a6a:	42b4      	cmp	r4, r6
 8007a6c:	bf88      	it	hi
 8007a6e:	2304      	movhi	r3, #4
 8007a70:	4443      	add	r3, r8
 8007a72:	2200      	movs	r2, #0
 8007a74:	f843 2b04 	str.w	r2, [r3], #4
 8007a78:	429f      	cmp	r7, r3
 8007a7a:	d2fb      	bcs.n	8007a74 <__hexnan+0xcc>
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	b91b      	cbnz	r3, 8007a88 <__hexnan+0xe0>
 8007a80:	4547      	cmp	r7, r8
 8007a82:	d127      	bne.n	8007ad4 <__hexnan+0x12c>
 8007a84:	2301      	movs	r3, #1
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	2005      	movs	r0, #5
 8007a8a:	e026      	b.n	8007ada <__hexnan+0x132>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	2d08      	cmp	r5, #8
 8007a90:	f10b 0b01 	add.w	fp, fp, #1
 8007a94:	dd06      	ble.n	8007aa4 <__hexnan+0xfc>
 8007a96:	4544      	cmp	r4, r8
 8007a98:	d9c3      	bls.n	8007a22 <__hexnan+0x7a>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007aa0:	2501      	movs	r5, #1
 8007aa2:	3c04      	subs	r4, #4
 8007aa4:	6822      	ldr	r2, [r4, #0]
 8007aa6:	f000 000f 	and.w	r0, r0, #15
 8007aaa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007aae:	6022      	str	r2, [r4, #0]
 8007ab0:	e7b7      	b.n	8007a22 <__hexnan+0x7a>
 8007ab2:	2508      	movs	r5, #8
 8007ab4:	e7b5      	b.n	8007a22 <__hexnan+0x7a>
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0df      	beq.n	8007a7c <__hexnan+0xd4>
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	f1c3 0320 	rsb	r3, r3, #32
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007acc:	401a      	ands	r2, r3
 8007ace:	f846 2c04 	str.w	r2, [r6, #-4]
 8007ad2:	e7d3      	b.n	8007a7c <__hexnan+0xd4>
 8007ad4:	3f04      	subs	r7, #4
 8007ad6:	e7d1      	b.n	8007a7c <__hexnan+0xd4>
 8007ad8:	2004      	movs	r0, #4
 8007ada:	b007      	add	sp, #28
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ae0 <_localeconv_r>:
 8007ae0:	4800      	ldr	r0, [pc, #0]	; (8007ae4 <_localeconv_r+0x4>)
 8007ae2:	4770      	bx	lr
 8007ae4:	20000164 	.word	0x20000164

08007ae8 <malloc>:
 8007ae8:	4b02      	ldr	r3, [pc, #8]	; (8007af4 <malloc+0xc>)
 8007aea:	4601      	mov	r1, r0
 8007aec:	6818      	ldr	r0, [r3, #0]
 8007aee:	f000 bd3d 	b.w	800856c <_malloc_r>
 8007af2:	bf00      	nop
 8007af4:	2000000c 	.word	0x2000000c

08007af8 <__ascii_mbtowc>:
 8007af8:	b082      	sub	sp, #8
 8007afa:	b901      	cbnz	r1, 8007afe <__ascii_mbtowc+0x6>
 8007afc:	a901      	add	r1, sp, #4
 8007afe:	b142      	cbz	r2, 8007b12 <__ascii_mbtowc+0x1a>
 8007b00:	b14b      	cbz	r3, 8007b16 <__ascii_mbtowc+0x1e>
 8007b02:	7813      	ldrb	r3, [r2, #0]
 8007b04:	600b      	str	r3, [r1, #0]
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	1e10      	subs	r0, r2, #0
 8007b0a:	bf18      	it	ne
 8007b0c:	2001      	movne	r0, #1
 8007b0e:	b002      	add	sp, #8
 8007b10:	4770      	bx	lr
 8007b12:	4610      	mov	r0, r2
 8007b14:	e7fb      	b.n	8007b0e <__ascii_mbtowc+0x16>
 8007b16:	f06f 0001 	mvn.w	r0, #1
 8007b1a:	e7f8      	b.n	8007b0e <__ascii_mbtowc+0x16>

08007b1c <memcpy>:
 8007b1c:	440a      	add	r2, r1
 8007b1e:	4291      	cmp	r1, r2
 8007b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b24:	d100      	bne.n	8007b28 <memcpy+0xc>
 8007b26:	4770      	bx	lr
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b32:	4291      	cmp	r1, r2
 8007b34:	d1f9      	bne.n	8007b2a <memcpy+0xe>
 8007b36:	bd10      	pop	{r4, pc}

08007b38 <_Balloc>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	460d      	mov	r5, r1
 8007b40:	b976      	cbnz	r6, 8007b60 <_Balloc+0x28>
 8007b42:	2010      	movs	r0, #16
 8007b44:	f7ff ffd0 	bl	8007ae8 <malloc>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b4c:	b920      	cbnz	r0, 8007b58 <_Balloc+0x20>
 8007b4e:	4b18      	ldr	r3, [pc, #96]	; (8007bb0 <_Balloc+0x78>)
 8007b50:	4818      	ldr	r0, [pc, #96]	; (8007bb4 <_Balloc+0x7c>)
 8007b52:	2166      	movs	r1, #102	; 0x66
 8007b54:	f000 fef8 	bl	8008948 <__assert_func>
 8007b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b5c:	6006      	str	r6, [r0, #0]
 8007b5e:	60c6      	str	r6, [r0, #12]
 8007b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b62:	68f3      	ldr	r3, [r6, #12]
 8007b64:	b183      	cbz	r3, 8007b88 <_Balloc+0x50>
 8007b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b6e:	b9b8      	cbnz	r0, 8007ba0 <_Balloc+0x68>
 8007b70:	2101      	movs	r1, #1
 8007b72:	fa01 f605 	lsl.w	r6, r1, r5
 8007b76:	1d72      	adds	r2, r6, #5
 8007b78:	0092      	lsls	r2, r2, #2
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f000 fc97 	bl	80084ae <_calloc_r>
 8007b80:	b160      	cbz	r0, 8007b9c <_Balloc+0x64>
 8007b82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b86:	e00e      	b.n	8007ba6 <_Balloc+0x6e>
 8007b88:	2221      	movs	r2, #33	; 0x21
 8007b8a:	2104      	movs	r1, #4
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 fc8e 	bl	80084ae <_calloc_r>
 8007b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b94:	60f0      	str	r0, [r6, #12]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e4      	bne.n	8007b66 <_Balloc+0x2e>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	6802      	ldr	r2, [r0, #0]
 8007ba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bac:	e7f7      	b.n	8007b9e <_Balloc+0x66>
 8007bae:	bf00      	nop
 8007bb0:	08009706 	.word	0x08009706
 8007bb4:	0800980c 	.word	0x0800980c

08007bb8 <_Bfree>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	b976      	cbnz	r6, 8007be0 <_Bfree+0x28>
 8007bc2:	2010      	movs	r0, #16
 8007bc4:	f7ff ff90 	bl	8007ae8 <malloc>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6268      	str	r0, [r5, #36]	; 0x24
 8007bcc:	b920      	cbnz	r0, 8007bd8 <_Bfree+0x20>
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <_Bfree+0x3c>)
 8007bd0:	4809      	ldr	r0, [pc, #36]	; (8007bf8 <_Bfree+0x40>)
 8007bd2:	218a      	movs	r1, #138	; 0x8a
 8007bd4:	f000 feb8 	bl	8008948 <__assert_func>
 8007bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bdc:	6006      	str	r6, [r0, #0]
 8007bde:	60c6      	str	r6, [r0, #12]
 8007be0:	b13c      	cbz	r4, 8007bf2 <_Bfree+0x3a>
 8007be2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007be4:	6862      	ldr	r2, [r4, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bec:	6021      	str	r1, [r4, #0]
 8007bee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	08009706 	.word	0x08009706
 8007bf8:	0800980c 	.word	0x0800980c

08007bfc <__multadd>:
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	690e      	ldr	r6, [r1, #16]
 8007c02:	4607      	mov	r7, r0
 8007c04:	4698      	mov	r8, r3
 8007c06:	460c      	mov	r4, r1
 8007c08:	f101 0014 	add.w	r0, r1, #20
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	6805      	ldr	r5, [r0, #0]
 8007c10:	b2a9      	uxth	r1, r5
 8007c12:	fb02 8101 	mla	r1, r2, r1, r8
 8007c16:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007c1a:	0c2d      	lsrs	r5, r5, #16
 8007c1c:	fb02 c505 	mla	r5, r2, r5, ip
 8007c20:	b289      	uxth	r1, r1
 8007c22:	3301      	adds	r3, #1
 8007c24:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007c28:	429e      	cmp	r6, r3
 8007c2a:	f840 1b04 	str.w	r1, [r0], #4
 8007c2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007c32:	dcec      	bgt.n	8007c0e <__multadd+0x12>
 8007c34:	f1b8 0f00 	cmp.w	r8, #0
 8007c38:	d022      	beq.n	8007c80 <__multadd+0x84>
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	42b3      	cmp	r3, r6
 8007c3e:	dc19      	bgt.n	8007c74 <__multadd+0x78>
 8007c40:	6861      	ldr	r1, [r4, #4]
 8007c42:	4638      	mov	r0, r7
 8007c44:	3101      	adds	r1, #1
 8007c46:	f7ff ff77 	bl	8007b38 <_Balloc>
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	b928      	cbnz	r0, 8007c5a <__multadd+0x5e>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	4b0d      	ldr	r3, [pc, #52]	; (8007c88 <__multadd+0x8c>)
 8007c52:	480e      	ldr	r0, [pc, #56]	; (8007c8c <__multadd+0x90>)
 8007c54:	21b5      	movs	r1, #181	; 0xb5
 8007c56:	f000 fe77 	bl	8008948 <__assert_func>
 8007c5a:	6922      	ldr	r2, [r4, #16]
 8007c5c:	3202      	adds	r2, #2
 8007c5e:	f104 010c 	add.w	r1, r4, #12
 8007c62:	0092      	lsls	r2, r2, #2
 8007c64:	300c      	adds	r0, #12
 8007c66:	f7ff ff59 	bl	8007b1c <memcpy>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	f7ff ffa3 	bl	8007bb8 <_Bfree>
 8007c72:	462c      	mov	r4, r5
 8007c74:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007c78:	3601      	adds	r6, #1
 8007c7a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007c7e:	6126      	str	r6, [r4, #16]
 8007c80:	4620      	mov	r0, r4
 8007c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c86:	bf00      	nop
 8007c88:	0800977c 	.word	0x0800977c
 8007c8c:	0800980c 	.word	0x0800980c

08007c90 <__s2b>:
 8007c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c94:	460c      	mov	r4, r1
 8007c96:	4615      	mov	r5, r2
 8007c98:	461f      	mov	r7, r3
 8007c9a:	2209      	movs	r2, #9
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	db09      	blt.n	8007cc0 <__s2b+0x30>
 8007cac:	4630      	mov	r0, r6
 8007cae:	f7ff ff43 	bl	8007b38 <_Balloc>
 8007cb2:	b940      	cbnz	r0, 8007cc6 <__s2b+0x36>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	4b19      	ldr	r3, [pc, #100]	; (8007d1c <__s2b+0x8c>)
 8007cb8:	4819      	ldr	r0, [pc, #100]	; (8007d20 <__s2b+0x90>)
 8007cba:	21ce      	movs	r1, #206	; 0xce
 8007cbc:	f000 fe44 	bl	8008948 <__assert_func>
 8007cc0:	0052      	lsls	r2, r2, #1
 8007cc2:	3101      	adds	r1, #1
 8007cc4:	e7f0      	b.n	8007ca8 <__s2b+0x18>
 8007cc6:	9b08      	ldr	r3, [sp, #32]
 8007cc8:	6143      	str	r3, [r0, #20]
 8007cca:	2d09      	cmp	r5, #9
 8007ccc:	f04f 0301 	mov.w	r3, #1
 8007cd0:	6103      	str	r3, [r0, #16]
 8007cd2:	dd16      	ble.n	8007d02 <__s2b+0x72>
 8007cd4:	f104 0909 	add.w	r9, r4, #9
 8007cd8:	46c8      	mov	r8, r9
 8007cda:	442c      	add	r4, r5
 8007cdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	3b30      	subs	r3, #48	; 0x30
 8007ce4:	220a      	movs	r2, #10
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7ff ff88 	bl	8007bfc <__multadd>
 8007cec:	45a0      	cmp	r8, r4
 8007cee:	d1f5      	bne.n	8007cdc <__s2b+0x4c>
 8007cf0:	f1a5 0408 	sub.w	r4, r5, #8
 8007cf4:	444c      	add	r4, r9
 8007cf6:	1b2d      	subs	r5, r5, r4
 8007cf8:	1963      	adds	r3, r4, r5
 8007cfa:	42bb      	cmp	r3, r7
 8007cfc:	db04      	blt.n	8007d08 <__s2b+0x78>
 8007cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d02:	340a      	adds	r4, #10
 8007d04:	2509      	movs	r5, #9
 8007d06:	e7f6      	b.n	8007cf6 <__s2b+0x66>
 8007d08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	3b30      	subs	r3, #48	; 0x30
 8007d10:	220a      	movs	r2, #10
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7ff ff72 	bl	8007bfc <__multadd>
 8007d18:	e7ee      	b.n	8007cf8 <__s2b+0x68>
 8007d1a:	bf00      	nop
 8007d1c:	0800977c 	.word	0x0800977c
 8007d20:	0800980c 	.word	0x0800980c

08007d24 <__hi0bits>:
 8007d24:	0c03      	lsrs	r3, r0, #16
 8007d26:	041b      	lsls	r3, r3, #16
 8007d28:	b9d3      	cbnz	r3, 8007d60 <__hi0bits+0x3c>
 8007d2a:	0400      	lsls	r0, r0, #16
 8007d2c:	2310      	movs	r3, #16
 8007d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d32:	bf04      	itt	eq
 8007d34:	0200      	lsleq	r0, r0, #8
 8007d36:	3308      	addeq	r3, #8
 8007d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d3c:	bf04      	itt	eq
 8007d3e:	0100      	lsleq	r0, r0, #4
 8007d40:	3304      	addeq	r3, #4
 8007d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d46:	bf04      	itt	eq
 8007d48:	0080      	lsleq	r0, r0, #2
 8007d4a:	3302      	addeq	r3, #2
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	db05      	blt.n	8007d5c <__hi0bits+0x38>
 8007d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d54:	f103 0301 	add.w	r3, r3, #1
 8007d58:	bf08      	it	eq
 8007d5a:	2320      	moveq	r3, #32
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	4770      	bx	lr
 8007d60:	2300      	movs	r3, #0
 8007d62:	e7e4      	b.n	8007d2e <__hi0bits+0xa>

08007d64 <__lo0bits>:
 8007d64:	6803      	ldr	r3, [r0, #0]
 8007d66:	f013 0207 	ands.w	r2, r3, #7
 8007d6a:	4601      	mov	r1, r0
 8007d6c:	d00b      	beq.n	8007d86 <__lo0bits+0x22>
 8007d6e:	07da      	lsls	r2, r3, #31
 8007d70:	d424      	bmi.n	8007dbc <__lo0bits+0x58>
 8007d72:	0798      	lsls	r0, r3, #30
 8007d74:	bf49      	itett	mi
 8007d76:	085b      	lsrmi	r3, r3, #1
 8007d78:	089b      	lsrpl	r3, r3, #2
 8007d7a:	2001      	movmi	r0, #1
 8007d7c:	600b      	strmi	r3, [r1, #0]
 8007d7e:	bf5c      	itt	pl
 8007d80:	600b      	strpl	r3, [r1, #0]
 8007d82:	2002      	movpl	r0, #2
 8007d84:	4770      	bx	lr
 8007d86:	b298      	uxth	r0, r3
 8007d88:	b9b0      	cbnz	r0, 8007db8 <__lo0bits+0x54>
 8007d8a:	0c1b      	lsrs	r3, r3, #16
 8007d8c:	2010      	movs	r0, #16
 8007d8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d92:	bf04      	itt	eq
 8007d94:	0a1b      	lsreq	r3, r3, #8
 8007d96:	3008      	addeq	r0, #8
 8007d98:	071a      	lsls	r2, r3, #28
 8007d9a:	bf04      	itt	eq
 8007d9c:	091b      	lsreq	r3, r3, #4
 8007d9e:	3004      	addeq	r0, #4
 8007da0:	079a      	lsls	r2, r3, #30
 8007da2:	bf04      	itt	eq
 8007da4:	089b      	lsreq	r3, r3, #2
 8007da6:	3002      	addeq	r0, #2
 8007da8:	07da      	lsls	r2, r3, #31
 8007daa:	d403      	bmi.n	8007db4 <__lo0bits+0x50>
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	f100 0001 	add.w	r0, r0, #1
 8007db2:	d005      	beq.n	8007dc0 <__lo0bits+0x5c>
 8007db4:	600b      	str	r3, [r1, #0]
 8007db6:	4770      	bx	lr
 8007db8:	4610      	mov	r0, r2
 8007dba:	e7e8      	b.n	8007d8e <__lo0bits+0x2a>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4770      	bx	lr
 8007dc0:	2020      	movs	r0, #32
 8007dc2:	4770      	bx	lr

08007dc4 <__i2b>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	460c      	mov	r4, r1
 8007dc8:	2101      	movs	r1, #1
 8007dca:	f7ff feb5 	bl	8007b38 <_Balloc>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	b928      	cbnz	r0, 8007dde <__i2b+0x1a>
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <__i2b+0x24>)
 8007dd4:	4805      	ldr	r0, [pc, #20]	; (8007dec <__i2b+0x28>)
 8007dd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dda:	f000 fdb5 	bl	8008948 <__assert_func>
 8007dde:	2301      	movs	r3, #1
 8007de0:	6144      	str	r4, [r0, #20]
 8007de2:	6103      	str	r3, [r0, #16]
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	0800977c 	.word	0x0800977c
 8007dec:	0800980c 	.word	0x0800980c

08007df0 <__multiply>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	4614      	mov	r4, r2
 8007df6:	690a      	ldr	r2, [r1, #16]
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	bfb8      	it	lt
 8007dfe:	460b      	movlt	r3, r1
 8007e00:	460d      	mov	r5, r1
 8007e02:	bfbc      	itt	lt
 8007e04:	4625      	movlt	r5, r4
 8007e06:	461c      	movlt	r4, r3
 8007e08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007e0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e10:	68ab      	ldr	r3, [r5, #8]
 8007e12:	6869      	ldr	r1, [r5, #4]
 8007e14:	eb0a 0709 	add.w	r7, sl, r9
 8007e18:	42bb      	cmp	r3, r7
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	bfb8      	it	lt
 8007e1e:	3101      	addlt	r1, #1
 8007e20:	f7ff fe8a 	bl	8007b38 <_Balloc>
 8007e24:	b930      	cbnz	r0, 8007e34 <__multiply+0x44>
 8007e26:	4602      	mov	r2, r0
 8007e28:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <__multiply+0x144>)
 8007e2a:	4843      	ldr	r0, [pc, #268]	; (8007f38 <__multiply+0x148>)
 8007e2c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e30:	f000 fd8a 	bl	8008948 <__assert_func>
 8007e34:	f100 0614 	add.w	r6, r0, #20
 8007e38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007e3c:	4633      	mov	r3, r6
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4543      	cmp	r3, r8
 8007e42:	d31e      	bcc.n	8007e82 <__multiply+0x92>
 8007e44:	f105 0c14 	add.w	ip, r5, #20
 8007e48:	f104 0314 	add.w	r3, r4, #20
 8007e4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007e50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007e54:	9202      	str	r2, [sp, #8]
 8007e56:	ebac 0205 	sub.w	r2, ip, r5
 8007e5a:	3a15      	subs	r2, #21
 8007e5c:	f022 0203 	bic.w	r2, r2, #3
 8007e60:	3204      	adds	r2, #4
 8007e62:	f105 0115 	add.w	r1, r5, #21
 8007e66:	458c      	cmp	ip, r1
 8007e68:	bf38      	it	cc
 8007e6a:	2204      	movcc	r2, #4
 8007e6c:	9201      	str	r2, [sp, #4]
 8007e6e:	9a02      	ldr	r2, [sp, #8]
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d808      	bhi.n	8007e88 <__multiply+0x98>
 8007e76:	2f00      	cmp	r7, #0
 8007e78:	dc55      	bgt.n	8007f26 <__multiply+0x136>
 8007e7a:	6107      	str	r7, [r0, #16]
 8007e7c:	b005      	add	sp, #20
 8007e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e82:	f843 2b04 	str.w	r2, [r3], #4
 8007e86:	e7db      	b.n	8007e40 <__multiply+0x50>
 8007e88:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e8c:	f1ba 0f00 	cmp.w	sl, #0
 8007e90:	d020      	beq.n	8007ed4 <__multiply+0xe4>
 8007e92:	f105 0e14 	add.w	lr, r5, #20
 8007e96:	46b1      	mov	r9, r6
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007e9e:	f8d9 b000 	ldr.w	fp, [r9]
 8007ea2:	b2a1      	uxth	r1, r4
 8007ea4:	fa1f fb8b 	uxth.w	fp, fp
 8007ea8:	fb0a b101 	mla	r1, sl, r1, fp
 8007eac:	4411      	add	r1, r2
 8007eae:	f8d9 2000 	ldr.w	r2, [r9]
 8007eb2:	0c24      	lsrs	r4, r4, #16
 8007eb4:	0c12      	lsrs	r2, r2, #16
 8007eb6:	fb0a 2404 	mla	r4, sl, r4, r2
 8007eba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007ebe:	b289      	uxth	r1, r1
 8007ec0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ec4:	45f4      	cmp	ip, lr
 8007ec6:	f849 1b04 	str.w	r1, [r9], #4
 8007eca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007ece:	d8e4      	bhi.n	8007e9a <__multiply+0xaa>
 8007ed0:	9901      	ldr	r1, [sp, #4]
 8007ed2:	5072      	str	r2, [r6, r1]
 8007ed4:	9a03      	ldr	r2, [sp, #12]
 8007ed6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007eda:	3304      	adds	r3, #4
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	d01f      	beq.n	8007f22 <__multiply+0x132>
 8007ee2:	6834      	ldr	r4, [r6, #0]
 8007ee4:	f105 0114 	add.w	r1, r5, #20
 8007ee8:	46b6      	mov	lr, r6
 8007eea:	f04f 0a00 	mov.w	sl, #0
 8007eee:	880a      	ldrh	r2, [r1, #0]
 8007ef0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ef4:	fb09 b202 	mla	r2, r9, r2, fp
 8007ef8:	4492      	add	sl, r2
 8007efa:	b2a4      	uxth	r4, r4
 8007efc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007f00:	f84e 4b04 	str.w	r4, [lr], #4
 8007f04:	f851 4b04 	ldr.w	r4, [r1], #4
 8007f08:	f8be 2000 	ldrh.w	r2, [lr]
 8007f0c:	0c24      	lsrs	r4, r4, #16
 8007f0e:	fb09 2404 	mla	r4, r9, r4, r2
 8007f12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007f16:	458c      	cmp	ip, r1
 8007f18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007f1c:	d8e7      	bhi.n	8007eee <__multiply+0xfe>
 8007f1e:	9a01      	ldr	r2, [sp, #4]
 8007f20:	50b4      	str	r4, [r6, r2]
 8007f22:	3604      	adds	r6, #4
 8007f24:	e7a3      	b.n	8007e6e <__multiply+0x7e>
 8007f26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1a5      	bne.n	8007e7a <__multiply+0x8a>
 8007f2e:	3f01      	subs	r7, #1
 8007f30:	e7a1      	b.n	8007e76 <__multiply+0x86>
 8007f32:	bf00      	nop
 8007f34:	0800977c 	.word	0x0800977c
 8007f38:	0800980c 	.word	0x0800980c

08007f3c <__pow5mult>:
 8007f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f40:	4615      	mov	r5, r2
 8007f42:	f012 0203 	ands.w	r2, r2, #3
 8007f46:	4606      	mov	r6, r0
 8007f48:	460f      	mov	r7, r1
 8007f4a:	d007      	beq.n	8007f5c <__pow5mult+0x20>
 8007f4c:	4c25      	ldr	r4, [pc, #148]	; (8007fe4 <__pow5mult+0xa8>)
 8007f4e:	3a01      	subs	r2, #1
 8007f50:	2300      	movs	r3, #0
 8007f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f56:	f7ff fe51 	bl	8007bfc <__multadd>
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	10ad      	asrs	r5, r5, #2
 8007f5e:	d03d      	beq.n	8007fdc <__pow5mult+0xa0>
 8007f60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f62:	b97c      	cbnz	r4, 8007f84 <__pow5mult+0x48>
 8007f64:	2010      	movs	r0, #16
 8007f66:	f7ff fdbf 	bl	8007ae8 <malloc>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f6e:	b928      	cbnz	r0, 8007f7c <__pow5mult+0x40>
 8007f70:	4b1d      	ldr	r3, [pc, #116]	; (8007fe8 <__pow5mult+0xac>)
 8007f72:	481e      	ldr	r0, [pc, #120]	; (8007fec <__pow5mult+0xb0>)
 8007f74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f78:	f000 fce6 	bl	8008948 <__assert_func>
 8007f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f80:	6004      	str	r4, [r0, #0]
 8007f82:	60c4      	str	r4, [r0, #12]
 8007f84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f8c:	b94c      	cbnz	r4, 8007fa2 <__pow5mult+0x66>
 8007f8e:	f240 2171 	movw	r1, #625	; 0x271
 8007f92:	4630      	mov	r0, r6
 8007f94:	f7ff ff16 	bl	8007dc4 <__i2b>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f9e:	4604      	mov	r4, r0
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	f04f 0900 	mov.w	r9, #0
 8007fa6:	07eb      	lsls	r3, r5, #31
 8007fa8:	d50a      	bpl.n	8007fc0 <__pow5mult+0x84>
 8007faa:	4639      	mov	r1, r7
 8007fac:	4622      	mov	r2, r4
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ff1e 	bl	8007df0 <__multiply>
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4680      	mov	r8, r0
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7ff fdfd 	bl	8007bb8 <_Bfree>
 8007fbe:	4647      	mov	r7, r8
 8007fc0:	106d      	asrs	r5, r5, #1
 8007fc2:	d00b      	beq.n	8007fdc <__pow5mult+0xa0>
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	b938      	cbnz	r0, 8007fd8 <__pow5mult+0x9c>
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ff0f 	bl	8007df0 <__multiply>
 8007fd2:	6020      	str	r0, [r4, #0]
 8007fd4:	f8c0 9000 	str.w	r9, [r0]
 8007fd8:	4604      	mov	r4, r0
 8007fda:	e7e4      	b.n	8007fa6 <__pow5mult+0x6a>
 8007fdc:	4638      	mov	r0, r7
 8007fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	bf00      	nop
 8007fe4:	08009960 	.word	0x08009960
 8007fe8:	08009706 	.word	0x08009706
 8007fec:	0800980c 	.word	0x0800980c

08007ff0 <__lshift>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	6849      	ldr	r1, [r1, #4]
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	4607      	mov	r7, r0
 8008002:	4691      	mov	r9, r2
 8008004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008008:	f108 0601 	add.w	r6, r8, #1
 800800c:	42b3      	cmp	r3, r6
 800800e:	db0b      	blt.n	8008028 <__lshift+0x38>
 8008010:	4638      	mov	r0, r7
 8008012:	f7ff fd91 	bl	8007b38 <_Balloc>
 8008016:	4605      	mov	r5, r0
 8008018:	b948      	cbnz	r0, 800802e <__lshift+0x3e>
 800801a:	4602      	mov	r2, r0
 800801c:	4b28      	ldr	r3, [pc, #160]	; (80080c0 <__lshift+0xd0>)
 800801e:	4829      	ldr	r0, [pc, #164]	; (80080c4 <__lshift+0xd4>)
 8008020:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008024:	f000 fc90 	bl	8008948 <__assert_func>
 8008028:	3101      	adds	r1, #1
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	e7ee      	b.n	800800c <__lshift+0x1c>
 800802e:	2300      	movs	r3, #0
 8008030:	f100 0114 	add.w	r1, r0, #20
 8008034:	f100 0210 	add.w	r2, r0, #16
 8008038:	4618      	mov	r0, r3
 800803a:	4553      	cmp	r3, sl
 800803c:	db33      	blt.n	80080a6 <__lshift+0xb6>
 800803e:	6920      	ldr	r0, [r4, #16]
 8008040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008044:	f104 0314 	add.w	r3, r4, #20
 8008048:	f019 091f 	ands.w	r9, r9, #31
 800804c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008054:	d02b      	beq.n	80080ae <__lshift+0xbe>
 8008056:	f1c9 0e20 	rsb	lr, r9, #32
 800805a:	468a      	mov	sl, r1
 800805c:	2200      	movs	r2, #0
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	fa00 f009 	lsl.w	r0, r0, r9
 8008064:	4302      	orrs	r2, r0
 8008066:	f84a 2b04 	str.w	r2, [sl], #4
 800806a:	f853 2b04 	ldr.w	r2, [r3], #4
 800806e:	459c      	cmp	ip, r3
 8008070:	fa22 f20e 	lsr.w	r2, r2, lr
 8008074:	d8f3      	bhi.n	800805e <__lshift+0x6e>
 8008076:	ebac 0304 	sub.w	r3, ip, r4
 800807a:	3b15      	subs	r3, #21
 800807c:	f023 0303 	bic.w	r3, r3, #3
 8008080:	3304      	adds	r3, #4
 8008082:	f104 0015 	add.w	r0, r4, #21
 8008086:	4584      	cmp	ip, r0
 8008088:	bf38      	it	cc
 800808a:	2304      	movcc	r3, #4
 800808c:	50ca      	str	r2, [r1, r3]
 800808e:	b10a      	cbz	r2, 8008094 <__lshift+0xa4>
 8008090:	f108 0602 	add.w	r6, r8, #2
 8008094:	3e01      	subs	r6, #1
 8008096:	4638      	mov	r0, r7
 8008098:	612e      	str	r6, [r5, #16]
 800809a:	4621      	mov	r1, r4
 800809c:	f7ff fd8c 	bl	8007bb8 <_Bfree>
 80080a0:	4628      	mov	r0, r5
 80080a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080aa:	3301      	adds	r3, #1
 80080ac:	e7c5      	b.n	800803a <__lshift+0x4a>
 80080ae:	3904      	subs	r1, #4
 80080b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80080b8:	459c      	cmp	ip, r3
 80080ba:	d8f9      	bhi.n	80080b0 <__lshift+0xc0>
 80080bc:	e7ea      	b.n	8008094 <__lshift+0xa4>
 80080be:	bf00      	nop
 80080c0:	0800977c 	.word	0x0800977c
 80080c4:	0800980c 	.word	0x0800980c

080080c8 <__mcmp>:
 80080c8:	b530      	push	{r4, r5, lr}
 80080ca:	6902      	ldr	r2, [r0, #16]
 80080cc:	690c      	ldr	r4, [r1, #16]
 80080ce:	1b12      	subs	r2, r2, r4
 80080d0:	d10e      	bne.n	80080f0 <__mcmp+0x28>
 80080d2:	f100 0314 	add.w	r3, r0, #20
 80080d6:	3114      	adds	r1, #20
 80080d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80080dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80080e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80080e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80080e8:	42a5      	cmp	r5, r4
 80080ea:	d003      	beq.n	80080f4 <__mcmp+0x2c>
 80080ec:	d305      	bcc.n	80080fa <__mcmp+0x32>
 80080ee:	2201      	movs	r2, #1
 80080f0:	4610      	mov	r0, r2
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	4283      	cmp	r3, r0
 80080f6:	d3f3      	bcc.n	80080e0 <__mcmp+0x18>
 80080f8:	e7fa      	b.n	80080f0 <__mcmp+0x28>
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	e7f7      	b.n	80080f0 <__mcmp+0x28>

08008100 <__mdiff>:
 8008100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	460c      	mov	r4, r1
 8008106:	4606      	mov	r6, r0
 8008108:	4611      	mov	r1, r2
 800810a:	4620      	mov	r0, r4
 800810c:	4617      	mov	r7, r2
 800810e:	f7ff ffdb 	bl	80080c8 <__mcmp>
 8008112:	1e05      	subs	r5, r0, #0
 8008114:	d110      	bne.n	8008138 <__mdiff+0x38>
 8008116:	4629      	mov	r1, r5
 8008118:	4630      	mov	r0, r6
 800811a:	f7ff fd0d 	bl	8007b38 <_Balloc>
 800811e:	b930      	cbnz	r0, 800812e <__mdiff+0x2e>
 8008120:	4b39      	ldr	r3, [pc, #228]	; (8008208 <__mdiff+0x108>)
 8008122:	4602      	mov	r2, r0
 8008124:	f240 2132 	movw	r1, #562	; 0x232
 8008128:	4838      	ldr	r0, [pc, #224]	; (800820c <__mdiff+0x10c>)
 800812a:	f000 fc0d 	bl	8008948 <__assert_func>
 800812e:	2301      	movs	r3, #1
 8008130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	bfa4      	itt	ge
 800813a:	463b      	movge	r3, r7
 800813c:	4627      	movge	r7, r4
 800813e:	4630      	mov	r0, r6
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	bfa6      	itte	ge
 8008144:	461c      	movge	r4, r3
 8008146:	2500      	movge	r5, #0
 8008148:	2501      	movlt	r5, #1
 800814a:	f7ff fcf5 	bl	8007b38 <_Balloc>
 800814e:	b920      	cbnz	r0, 800815a <__mdiff+0x5a>
 8008150:	4b2d      	ldr	r3, [pc, #180]	; (8008208 <__mdiff+0x108>)
 8008152:	4602      	mov	r2, r0
 8008154:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008158:	e7e6      	b.n	8008128 <__mdiff+0x28>
 800815a:	693e      	ldr	r6, [r7, #16]
 800815c:	60c5      	str	r5, [r0, #12]
 800815e:	6925      	ldr	r5, [r4, #16]
 8008160:	f107 0114 	add.w	r1, r7, #20
 8008164:	f104 0914 	add.w	r9, r4, #20
 8008168:	f100 0e14 	add.w	lr, r0, #20
 800816c:	f107 0210 	add.w	r2, r7, #16
 8008170:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008174:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008178:	46f2      	mov	sl, lr
 800817a:	2700      	movs	r7, #0
 800817c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008180:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008184:	fa1f f883 	uxth.w	r8, r3
 8008188:	fa17 f78b 	uxtah	r7, r7, fp
 800818c:	0c1b      	lsrs	r3, r3, #16
 800818e:	eba7 0808 	sub.w	r8, r7, r8
 8008192:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008196:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800819a:	fa1f f888 	uxth.w	r8, r8
 800819e:	141f      	asrs	r7, r3, #16
 80081a0:	454d      	cmp	r5, r9
 80081a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081a6:	f84a 3b04 	str.w	r3, [sl], #4
 80081aa:	d8e7      	bhi.n	800817c <__mdiff+0x7c>
 80081ac:	1b2b      	subs	r3, r5, r4
 80081ae:	3b15      	subs	r3, #21
 80081b0:	f023 0303 	bic.w	r3, r3, #3
 80081b4:	3304      	adds	r3, #4
 80081b6:	3415      	adds	r4, #21
 80081b8:	42a5      	cmp	r5, r4
 80081ba:	bf38      	it	cc
 80081bc:	2304      	movcc	r3, #4
 80081be:	4419      	add	r1, r3
 80081c0:	4473      	add	r3, lr
 80081c2:	469e      	mov	lr, r3
 80081c4:	460d      	mov	r5, r1
 80081c6:	4565      	cmp	r5, ip
 80081c8:	d30e      	bcc.n	80081e8 <__mdiff+0xe8>
 80081ca:	f10c 0203 	add.w	r2, ip, #3
 80081ce:	1a52      	subs	r2, r2, r1
 80081d0:	f022 0203 	bic.w	r2, r2, #3
 80081d4:	3903      	subs	r1, #3
 80081d6:	458c      	cmp	ip, r1
 80081d8:	bf38      	it	cc
 80081da:	2200      	movcc	r2, #0
 80081dc:	441a      	add	r2, r3
 80081de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80081e2:	b17b      	cbz	r3, 8008204 <__mdiff+0x104>
 80081e4:	6106      	str	r6, [r0, #16]
 80081e6:	e7a5      	b.n	8008134 <__mdiff+0x34>
 80081e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80081ec:	fa17 f488 	uxtah	r4, r7, r8
 80081f0:	1422      	asrs	r2, r4, #16
 80081f2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80081f6:	b2a4      	uxth	r4, r4
 80081f8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081fc:	f84e 4b04 	str.w	r4, [lr], #4
 8008200:	1417      	asrs	r7, r2, #16
 8008202:	e7e0      	b.n	80081c6 <__mdiff+0xc6>
 8008204:	3e01      	subs	r6, #1
 8008206:	e7ea      	b.n	80081de <__mdiff+0xde>
 8008208:	0800977c 	.word	0x0800977c
 800820c:	0800980c 	.word	0x0800980c

08008210 <__ulp>:
 8008210:	b082      	sub	sp, #8
 8008212:	ed8d 0b00 	vstr	d0, [sp]
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	4912      	ldr	r1, [pc, #72]	; (8008264 <__ulp+0x54>)
 800821a:	4019      	ands	r1, r3
 800821c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008220:	2900      	cmp	r1, #0
 8008222:	dd05      	ble.n	8008230 <__ulp+0x20>
 8008224:	2200      	movs	r2, #0
 8008226:	460b      	mov	r3, r1
 8008228:	ec43 2b10 	vmov	d0, r2, r3
 800822c:	b002      	add	sp, #8
 800822e:	4770      	bx	lr
 8008230:	4249      	negs	r1, r1
 8008232:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008236:	ea4f 5021 	mov.w	r0, r1, asr #20
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	da04      	bge.n	800824e <__ulp+0x3e>
 8008244:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008248:	fa41 f300 	asr.w	r3, r1, r0
 800824c:	e7ec      	b.n	8008228 <__ulp+0x18>
 800824e:	f1a0 0114 	sub.w	r1, r0, #20
 8008252:	291e      	cmp	r1, #30
 8008254:	bfda      	itte	le
 8008256:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800825a:	fa20 f101 	lsrle.w	r1, r0, r1
 800825e:	2101      	movgt	r1, #1
 8008260:	460a      	mov	r2, r1
 8008262:	e7e1      	b.n	8008228 <__ulp+0x18>
 8008264:	7ff00000 	.word	0x7ff00000

08008268 <__b2d>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	6905      	ldr	r5, [r0, #16]
 800826c:	f100 0714 	add.w	r7, r0, #20
 8008270:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008274:	1f2e      	subs	r6, r5, #4
 8008276:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800827a:	4620      	mov	r0, r4
 800827c:	f7ff fd52 	bl	8007d24 <__hi0bits>
 8008280:	f1c0 0320 	rsb	r3, r0, #32
 8008284:	280a      	cmp	r0, #10
 8008286:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008304 <__b2d+0x9c>
 800828a:	600b      	str	r3, [r1, #0]
 800828c:	dc14      	bgt.n	80082b8 <__b2d+0x50>
 800828e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008292:	fa24 f10e 	lsr.w	r1, r4, lr
 8008296:	42b7      	cmp	r7, r6
 8008298:	ea41 030c 	orr.w	r3, r1, ip
 800829c:	bf34      	ite	cc
 800829e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80082a2:	2100      	movcs	r1, #0
 80082a4:	3015      	adds	r0, #21
 80082a6:	fa04 f000 	lsl.w	r0, r4, r0
 80082aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80082ae:	ea40 0201 	orr.w	r2, r0, r1
 80082b2:	ec43 2b10 	vmov	d0, r2, r3
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b8:	42b7      	cmp	r7, r6
 80082ba:	bf3a      	itte	cc
 80082bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80082c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80082c4:	2100      	movcs	r1, #0
 80082c6:	380b      	subs	r0, #11
 80082c8:	d017      	beq.n	80082fa <__b2d+0x92>
 80082ca:	f1c0 0c20 	rsb	ip, r0, #32
 80082ce:	fa04 f500 	lsl.w	r5, r4, r0
 80082d2:	42be      	cmp	r6, r7
 80082d4:	fa21 f40c 	lsr.w	r4, r1, ip
 80082d8:	ea45 0504 	orr.w	r5, r5, r4
 80082dc:	bf8c      	ite	hi
 80082de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80082e2:	2400      	movls	r4, #0
 80082e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80082e8:	fa01 f000 	lsl.w	r0, r1, r0
 80082ec:	fa24 f40c 	lsr.w	r4, r4, ip
 80082f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082f4:	ea40 0204 	orr.w	r2, r0, r4
 80082f8:	e7db      	b.n	80082b2 <__b2d+0x4a>
 80082fa:	ea44 030c 	orr.w	r3, r4, ip
 80082fe:	460a      	mov	r2, r1
 8008300:	e7d7      	b.n	80082b2 <__b2d+0x4a>
 8008302:	bf00      	nop
 8008304:	3ff00000 	.word	0x3ff00000

08008308 <__d2b>:
 8008308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800830c:	4689      	mov	r9, r1
 800830e:	2101      	movs	r1, #1
 8008310:	ec57 6b10 	vmov	r6, r7, d0
 8008314:	4690      	mov	r8, r2
 8008316:	f7ff fc0f 	bl	8007b38 <_Balloc>
 800831a:	4604      	mov	r4, r0
 800831c:	b930      	cbnz	r0, 800832c <__d2b+0x24>
 800831e:	4602      	mov	r2, r0
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <__d2b+0xb0>)
 8008322:	4826      	ldr	r0, [pc, #152]	; (80083bc <__d2b+0xb4>)
 8008324:	f240 310a 	movw	r1, #778	; 0x30a
 8008328:	f000 fb0e 	bl	8008948 <__assert_func>
 800832c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008334:	bb35      	cbnz	r5, 8008384 <__d2b+0x7c>
 8008336:	2e00      	cmp	r6, #0
 8008338:	9301      	str	r3, [sp, #4]
 800833a:	d028      	beq.n	800838e <__d2b+0x86>
 800833c:	4668      	mov	r0, sp
 800833e:	9600      	str	r6, [sp, #0]
 8008340:	f7ff fd10 	bl	8007d64 <__lo0bits>
 8008344:	9900      	ldr	r1, [sp, #0]
 8008346:	b300      	cbz	r0, 800838a <__d2b+0x82>
 8008348:	9a01      	ldr	r2, [sp, #4]
 800834a:	f1c0 0320 	rsb	r3, r0, #32
 800834e:	fa02 f303 	lsl.w	r3, r2, r3
 8008352:	430b      	orrs	r3, r1
 8008354:	40c2      	lsrs	r2, r0
 8008356:	6163      	str	r3, [r4, #20]
 8008358:	9201      	str	r2, [sp, #4]
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	61a3      	str	r3, [r4, #24]
 800835e:	2b00      	cmp	r3, #0
 8008360:	bf14      	ite	ne
 8008362:	2202      	movne	r2, #2
 8008364:	2201      	moveq	r2, #1
 8008366:	6122      	str	r2, [r4, #16]
 8008368:	b1d5      	cbz	r5, 80083a0 <__d2b+0x98>
 800836a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800836e:	4405      	add	r5, r0
 8008370:	f8c9 5000 	str.w	r5, [r9]
 8008374:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008378:	f8c8 0000 	str.w	r0, [r8]
 800837c:	4620      	mov	r0, r4
 800837e:	b003      	add	sp, #12
 8008380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008388:	e7d5      	b.n	8008336 <__d2b+0x2e>
 800838a:	6161      	str	r1, [r4, #20]
 800838c:	e7e5      	b.n	800835a <__d2b+0x52>
 800838e:	a801      	add	r0, sp, #4
 8008390:	f7ff fce8 	bl	8007d64 <__lo0bits>
 8008394:	9b01      	ldr	r3, [sp, #4]
 8008396:	6163      	str	r3, [r4, #20]
 8008398:	2201      	movs	r2, #1
 800839a:	6122      	str	r2, [r4, #16]
 800839c:	3020      	adds	r0, #32
 800839e:	e7e3      	b.n	8008368 <__d2b+0x60>
 80083a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083a8:	f8c9 0000 	str.w	r0, [r9]
 80083ac:	6918      	ldr	r0, [r3, #16]
 80083ae:	f7ff fcb9 	bl	8007d24 <__hi0bits>
 80083b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083b6:	e7df      	b.n	8008378 <__d2b+0x70>
 80083b8:	0800977c 	.word	0x0800977c
 80083bc:	0800980c 	.word	0x0800980c

080083c0 <__ratio>:
 80083c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	4688      	mov	r8, r1
 80083c6:	4669      	mov	r1, sp
 80083c8:	4681      	mov	r9, r0
 80083ca:	f7ff ff4d 	bl	8008268 <__b2d>
 80083ce:	a901      	add	r1, sp, #4
 80083d0:	4640      	mov	r0, r8
 80083d2:	ec55 4b10 	vmov	r4, r5, d0
 80083d6:	f7ff ff47 	bl	8008268 <__b2d>
 80083da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80083e2:	eba3 0c02 	sub.w	ip, r3, r2
 80083e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80083f0:	ec51 0b10 	vmov	r0, r1, d0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfd6      	itet	le
 80083f8:	460a      	movle	r2, r1
 80083fa:	462a      	movgt	r2, r5
 80083fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008400:	468b      	mov	fp, r1
 8008402:	462f      	mov	r7, r5
 8008404:	bfd4      	ite	le
 8008406:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800840a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800840e:	4620      	mov	r0, r4
 8008410:	ee10 2a10 	vmov	r2, s0
 8008414:	465b      	mov	r3, fp
 8008416:	4639      	mov	r1, r7
 8008418:	f7f8 fa18 	bl	800084c <__aeabi_ddiv>
 800841c:	ec41 0b10 	vmov	d0, r0, r1
 8008420:	b003      	add	sp, #12
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008426 <__copybits>:
 8008426:	3901      	subs	r1, #1
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	1149      	asrs	r1, r1, #5
 800842c:	6914      	ldr	r4, [r2, #16]
 800842e:	3101      	adds	r1, #1
 8008430:	f102 0314 	add.w	r3, r2, #20
 8008434:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008438:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800843c:	1f05      	subs	r5, r0, #4
 800843e:	42a3      	cmp	r3, r4
 8008440:	d30c      	bcc.n	800845c <__copybits+0x36>
 8008442:	1aa3      	subs	r3, r4, r2
 8008444:	3b11      	subs	r3, #17
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	3211      	adds	r2, #17
 800844c:	42a2      	cmp	r2, r4
 800844e:	bf88      	it	hi
 8008450:	2300      	movhi	r3, #0
 8008452:	4418      	add	r0, r3
 8008454:	2300      	movs	r3, #0
 8008456:	4288      	cmp	r0, r1
 8008458:	d305      	bcc.n	8008466 <__copybits+0x40>
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008460:	f845 6f04 	str.w	r6, [r5, #4]!
 8008464:	e7eb      	b.n	800843e <__copybits+0x18>
 8008466:	f840 3b04 	str.w	r3, [r0], #4
 800846a:	e7f4      	b.n	8008456 <__copybits+0x30>

0800846c <__any_on>:
 800846c:	f100 0214 	add.w	r2, r0, #20
 8008470:	6900      	ldr	r0, [r0, #16]
 8008472:	114b      	asrs	r3, r1, #5
 8008474:	4298      	cmp	r0, r3
 8008476:	b510      	push	{r4, lr}
 8008478:	db11      	blt.n	800849e <__any_on+0x32>
 800847a:	dd0a      	ble.n	8008492 <__any_on+0x26>
 800847c:	f011 011f 	ands.w	r1, r1, #31
 8008480:	d007      	beq.n	8008492 <__any_on+0x26>
 8008482:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008486:	fa24 f001 	lsr.w	r0, r4, r1
 800848a:	fa00 f101 	lsl.w	r1, r0, r1
 800848e:	428c      	cmp	r4, r1
 8008490:	d10b      	bne.n	80084aa <__any_on+0x3e>
 8008492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008496:	4293      	cmp	r3, r2
 8008498:	d803      	bhi.n	80084a2 <__any_on+0x36>
 800849a:	2000      	movs	r0, #0
 800849c:	bd10      	pop	{r4, pc}
 800849e:	4603      	mov	r3, r0
 80084a0:	e7f7      	b.n	8008492 <__any_on+0x26>
 80084a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d0f5      	beq.n	8008496 <__any_on+0x2a>
 80084aa:	2001      	movs	r0, #1
 80084ac:	e7f6      	b.n	800849c <__any_on+0x30>

080084ae <_calloc_r>:
 80084ae:	b513      	push	{r0, r1, r4, lr}
 80084b0:	434a      	muls	r2, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	9201      	str	r2, [sp, #4]
 80084b6:	f000 f859 	bl	800856c <_malloc_r>
 80084ba:	4604      	mov	r4, r0
 80084bc:	b118      	cbz	r0, 80084c6 <_calloc_r+0x18>
 80084be:	9a01      	ldr	r2, [sp, #4]
 80084c0:	2100      	movs	r1, #0
 80084c2:	f7fc fbbf 	bl	8004c44 <memset>
 80084c6:	4620      	mov	r0, r4
 80084c8:	b002      	add	sp, #8
 80084ca:	bd10      	pop	{r4, pc}

080084cc <_free_r>:
 80084cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ce:	2900      	cmp	r1, #0
 80084d0:	d048      	beq.n	8008564 <_free_r+0x98>
 80084d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f1a1 0404 	sub.w	r4, r1, #4
 80084de:	bfb8      	it	lt
 80084e0:	18e4      	addlt	r4, r4, r3
 80084e2:	f000 fa7b 	bl	80089dc <__malloc_lock>
 80084e6:	4a20      	ldr	r2, [pc, #128]	; (8008568 <_free_r+0x9c>)
 80084e8:	9801      	ldr	r0, [sp, #4]
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	4615      	mov	r5, r2
 80084ee:	b933      	cbnz	r3, 80084fe <_free_r+0x32>
 80084f0:	6063      	str	r3, [r4, #4]
 80084f2:	6014      	str	r4, [r2, #0]
 80084f4:	b003      	add	sp, #12
 80084f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084fa:	f000 ba75 	b.w	80089e8 <__malloc_unlock>
 80084fe:	42a3      	cmp	r3, r4
 8008500:	d90b      	bls.n	800851a <_free_r+0x4e>
 8008502:	6821      	ldr	r1, [r4, #0]
 8008504:	1862      	adds	r2, r4, r1
 8008506:	4293      	cmp	r3, r2
 8008508:	bf04      	itt	eq
 800850a:	681a      	ldreq	r2, [r3, #0]
 800850c:	685b      	ldreq	r3, [r3, #4]
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	bf04      	itt	eq
 8008512:	1852      	addeq	r2, r2, r1
 8008514:	6022      	streq	r2, [r4, #0]
 8008516:	602c      	str	r4, [r5, #0]
 8008518:	e7ec      	b.n	80084f4 <_free_r+0x28>
 800851a:	461a      	mov	r2, r3
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b10b      	cbz	r3, 8008524 <_free_r+0x58>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d9fa      	bls.n	800851a <_free_r+0x4e>
 8008524:	6811      	ldr	r1, [r2, #0]
 8008526:	1855      	adds	r5, r2, r1
 8008528:	42a5      	cmp	r5, r4
 800852a:	d10b      	bne.n	8008544 <_free_r+0x78>
 800852c:	6824      	ldr	r4, [r4, #0]
 800852e:	4421      	add	r1, r4
 8008530:	1854      	adds	r4, r2, r1
 8008532:	42a3      	cmp	r3, r4
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	d1dd      	bne.n	80084f4 <_free_r+0x28>
 8008538:	681c      	ldr	r4, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	6053      	str	r3, [r2, #4]
 800853e:	4421      	add	r1, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	e7d7      	b.n	80084f4 <_free_r+0x28>
 8008544:	d902      	bls.n	800854c <_free_r+0x80>
 8008546:	230c      	movs	r3, #12
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	e7d3      	b.n	80084f4 <_free_r+0x28>
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	1961      	adds	r1, r4, r5
 8008550:	428b      	cmp	r3, r1
 8008552:	bf04      	itt	eq
 8008554:	6819      	ldreq	r1, [r3, #0]
 8008556:	685b      	ldreq	r3, [r3, #4]
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	bf04      	itt	eq
 800855c:	1949      	addeq	r1, r1, r5
 800855e:	6021      	streq	r1, [r4, #0]
 8008560:	6054      	str	r4, [r2, #4]
 8008562:	e7c7      	b.n	80084f4 <_free_r+0x28>
 8008564:	b003      	add	sp, #12
 8008566:	bd30      	pop	{r4, r5, pc}
 8008568:	200005fc 	.word	0x200005fc

0800856c <_malloc_r>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	1ccd      	adds	r5, r1, #3
 8008570:	f025 0503 	bic.w	r5, r5, #3
 8008574:	3508      	adds	r5, #8
 8008576:	2d0c      	cmp	r5, #12
 8008578:	bf38      	it	cc
 800857a:	250c      	movcc	r5, #12
 800857c:	2d00      	cmp	r5, #0
 800857e:	4606      	mov	r6, r0
 8008580:	db01      	blt.n	8008586 <_malloc_r+0x1a>
 8008582:	42a9      	cmp	r1, r5
 8008584:	d903      	bls.n	800858e <_malloc_r+0x22>
 8008586:	230c      	movs	r3, #12
 8008588:	6033      	str	r3, [r6, #0]
 800858a:	2000      	movs	r0, #0
 800858c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858e:	f000 fa25 	bl	80089dc <__malloc_lock>
 8008592:	4921      	ldr	r1, [pc, #132]	; (8008618 <_malloc_r+0xac>)
 8008594:	680a      	ldr	r2, [r1, #0]
 8008596:	4614      	mov	r4, r2
 8008598:	b99c      	cbnz	r4, 80085c2 <_malloc_r+0x56>
 800859a:	4f20      	ldr	r7, [pc, #128]	; (800861c <_malloc_r+0xb0>)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	b923      	cbnz	r3, 80085aa <_malloc_r+0x3e>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f000 f9a0 	bl	80088e8 <_sbrk_r>
 80085a8:	6038      	str	r0, [r7, #0]
 80085aa:	4629      	mov	r1, r5
 80085ac:	4630      	mov	r0, r6
 80085ae:	f000 f99b 	bl	80088e8 <_sbrk_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d123      	bne.n	80085fe <_malloc_r+0x92>
 80085b6:	230c      	movs	r3, #12
 80085b8:	6033      	str	r3, [r6, #0]
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 fa14 	bl	80089e8 <__malloc_unlock>
 80085c0:	e7e3      	b.n	800858a <_malloc_r+0x1e>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	1b5b      	subs	r3, r3, r5
 80085c6:	d417      	bmi.n	80085f8 <_malloc_r+0x8c>
 80085c8:	2b0b      	cmp	r3, #11
 80085ca:	d903      	bls.n	80085d4 <_malloc_r+0x68>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	441c      	add	r4, r3
 80085d0:	6025      	str	r5, [r4, #0]
 80085d2:	e004      	b.n	80085de <_malloc_r+0x72>
 80085d4:	6863      	ldr	r3, [r4, #4]
 80085d6:	42a2      	cmp	r2, r4
 80085d8:	bf0c      	ite	eq
 80085da:	600b      	streq	r3, [r1, #0]
 80085dc:	6053      	strne	r3, [r2, #4]
 80085de:	4630      	mov	r0, r6
 80085e0:	f000 fa02 	bl	80089e8 <__malloc_unlock>
 80085e4:	f104 000b 	add.w	r0, r4, #11
 80085e8:	1d23      	adds	r3, r4, #4
 80085ea:	f020 0007 	bic.w	r0, r0, #7
 80085ee:	1ac2      	subs	r2, r0, r3
 80085f0:	d0cc      	beq.n	800858c <_malloc_r+0x20>
 80085f2:	1a1b      	subs	r3, r3, r0
 80085f4:	50a3      	str	r3, [r4, r2]
 80085f6:	e7c9      	b.n	800858c <_malloc_r+0x20>
 80085f8:	4622      	mov	r2, r4
 80085fa:	6864      	ldr	r4, [r4, #4]
 80085fc:	e7cc      	b.n	8008598 <_malloc_r+0x2c>
 80085fe:	1cc4      	adds	r4, r0, #3
 8008600:	f024 0403 	bic.w	r4, r4, #3
 8008604:	42a0      	cmp	r0, r4
 8008606:	d0e3      	beq.n	80085d0 <_malloc_r+0x64>
 8008608:	1a21      	subs	r1, r4, r0
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f96c 	bl	80088e8 <_sbrk_r>
 8008610:	3001      	adds	r0, #1
 8008612:	d1dd      	bne.n	80085d0 <_malloc_r+0x64>
 8008614:	e7cf      	b.n	80085b6 <_malloc_r+0x4a>
 8008616:	bf00      	nop
 8008618:	200005fc 	.word	0x200005fc
 800861c:	20000600 	.word	0x20000600

08008620 <__ssputs_r>:
 8008620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	688e      	ldr	r6, [r1, #8]
 8008626:	429e      	cmp	r6, r3
 8008628:	4682      	mov	sl, r0
 800862a:	460c      	mov	r4, r1
 800862c:	4690      	mov	r8, r2
 800862e:	461f      	mov	r7, r3
 8008630:	d838      	bhi.n	80086a4 <__ssputs_r+0x84>
 8008632:	898a      	ldrh	r2, [r1, #12]
 8008634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008638:	d032      	beq.n	80086a0 <__ssputs_r+0x80>
 800863a:	6825      	ldr	r5, [r4, #0]
 800863c:	6909      	ldr	r1, [r1, #16]
 800863e:	eba5 0901 	sub.w	r9, r5, r1
 8008642:	6965      	ldr	r5, [r4, #20]
 8008644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800864c:	3301      	adds	r3, #1
 800864e:	444b      	add	r3, r9
 8008650:	106d      	asrs	r5, r5, #1
 8008652:	429d      	cmp	r5, r3
 8008654:	bf38      	it	cc
 8008656:	461d      	movcc	r5, r3
 8008658:	0553      	lsls	r3, r2, #21
 800865a:	d531      	bpl.n	80086c0 <__ssputs_r+0xa0>
 800865c:	4629      	mov	r1, r5
 800865e:	f7ff ff85 	bl	800856c <_malloc_r>
 8008662:	4606      	mov	r6, r0
 8008664:	b950      	cbnz	r0, 800867c <__ssputs_r+0x5c>
 8008666:	230c      	movs	r3, #12
 8008668:	f8ca 3000 	str.w	r3, [sl]
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867c:	6921      	ldr	r1, [r4, #16]
 800867e:	464a      	mov	r2, r9
 8008680:	f7ff fa4c 	bl	8007b1c <memcpy>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	6126      	str	r6, [r4, #16]
 8008692:	6165      	str	r5, [r4, #20]
 8008694:	444e      	add	r6, r9
 8008696:	eba5 0509 	sub.w	r5, r5, r9
 800869a:	6026      	str	r6, [r4, #0]
 800869c:	60a5      	str	r5, [r4, #8]
 800869e:	463e      	mov	r6, r7
 80086a0:	42be      	cmp	r6, r7
 80086a2:	d900      	bls.n	80086a6 <__ssputs_r+0x86>
 80086a4:	463e      	mov	r6, r7
 80086a6:	4632      	mov	r2, r6
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	4641      	mov	r1, r8
 80086ac:	f000 f97c 	bl	80089a8 <memmove>
 80086b0:	68a3      	ldr	r3, [r4, #8]
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	1b9b      	subs	r3, r3, r6
 80086b6:	4432      	add	r2, r6
 80086b8:	60a3      	str	r3, [r4, #8]
 80086ba:	6022      	str	r2, [r4, #0]
 80086bc:	2000      	movs	r0, #0
 80086be:	e7db      	b.n	8008678 <__ssputs_r+0x58>
 80086c0:	462a      	mov	r2, r5
 80086c2:	f000 f997 	bl	80089f4 <_realloc_r>
 80086c6:	4606      	mov	r6, r0
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d1e1      	bne.n	8008690 <__ssputs_r+0x70>
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	4650      	mov	r0, sl
 80086d0:	f7ff fefc 	bl	80084cc <_free_r>
 80086d4:	e7c7      	b.n	8008666 <__ssputs_r+0x46>
	...

080086d8 <_svfiprintf_r>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4698      	mov	r8, r3
 80086de:	898b      	ldrh	r3, [r1, #12]
 80086e0:	061b      	lsls	r3, r3, #24
 80086e2:	b09d      	sub	sp, #116	; 0x74
 80086e4:	4607      	mov	r7, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	d50e      	bpl.n	800870a <_svfiprintf_r+0x32>
 80086ec:	690b      	ldr	r3, [r1, #16]
 80086ee:	b963      	cbnz	r3, 800870a <_svfiprintf_r+0x32>
 80086f0:	2140      	movs	r1, #64	; 0x40
 80086f2:	f7ff ff3b 	bl	800856c <_malloc_r>
 80086f6:	6028      	str	r0, [r5, #0]
 80086f8:	6128      	str	r0, [r5, #16]
 80086fa:	b920      	cbnz	r0, 8008706 <_svfiprintf_r+0x2e>
 80086fc:	230c      	movs	r3, #12
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e0d1      	b.n	80088aa <_svfiprintf_r+0x1d2>
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	616b      	str	r3, [r5, #20]
 800870a:	2300      	movs	r3, #0
 800870c:	9309      	str	r3, [sp, #36]	; 0x24
 800870e:	2320      	movs	r3, #32
 8008710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008714:	f8cd 800c 	str.w	r8, [sp, #12]
 8008718:	2330      	movs	r3, #48	; 0x30
 800871a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088c4 <_svfiprintf_r+0x1ec>
 800871e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008722:	f04f 0901 	mov.w	r9, #1
 8008726:	4623      	mov	r3, r4
 8008728:	469a      	mov	sl, r3
 800872a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800872e:	b10a      	cbz	r2, 8008734 <_svfiprintf_r+0x5c>
 8008730:	2a25      	cmp	r2, #37	; 0x25
 8008732:	d1f9      	bne.n	8008728 <_svfiprintf_r+0x50>
 8008734:	ebba 0b04 	subs.w	fp, sl, r4
 8008738:	d00b      	beq.n	8008752 <_svfiprintf_r+0x7a>
 800873a:	465b      	mov	r3, fp
 800873c:	4622      	mov	r2, r4
 800873e:	4629      	mov	r1, r5
 8008740:	4638      	mov	r0, r7
 8008742:	f7ff ff6d 	bl	8008620 <__ssputs_r>
 8008746:	3001      	adds	r0, #1
 8008748:	f000 80aa 	beq.w	80088a0 <_svfiprintf_r+0x1c8>
 800874c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800874e:	445a      	add	r2, fp
 8008750:	9209      	str	r2, [sp, #36]	; 0x24
 8008752:	f89a 3000 	ldrb.w	r3, [sl]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 80a2 	beq.w	80088a0 <_svfiprintf_r+0x1c8>
 800875c:	2300      	movs	r3, #0
 800875e:	f04f 32ff 	mov.w	r2, #4294967295
 8008762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008766:	f10a 0a01 	add.w	sl, sl, #1
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008772:	931a      	str	r3, [sp, #104]	; 0x68
 8008774:	4654      	mov	r4, sl
 8008776:	2205      	movs	r2, #5
 8008778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877c:	4851      	ldr	r0, [pc, #324]	; (80088c4 <_svfiprintf_r+0x1ec>)
 800877e:	f7f7 fd2f 	bl	80001e0 <memchr>
 8008782:	9a04      	ldr	r2, [sp, #16]
 8008784:	b9d8      	cbnz	r0, 80087be <_svfiprintf_r+0xe6>
 8008786:	06d0      	lsls	r0, r2, #27
 8008788:	bf44      	itt	mi
 800878a:	2320      	movmi	r3, #32
 800878c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008790:	0711      	lsls	r1, r2, #28
 8008792:	bf44      	itt	mi
 8008794:	232b      	movmi	r3, #43	; 0x2b
 8008796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800879a:	f89a 3000 	ldrb.w	r3, [sl]
 800879e:	2b2a      	cmp	r3, #42	; 0x2a
 80087a0:	d015      	beq.n	80087ce <_svfiprintf_r+0xf6>
 80087a2:	9a07      	ldr	r2, [sp, #28]
 80087a4:	4654      	mov	r4, sl
 80087a6:	2000      	movs	r0, #0
 80087a8:	f04f 0c0a 	mov.w	ip, #10
 80087ac:	4621      	mov	r1, r4
 80087ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087b2:	3b30      	subs	r3, #48	; 0x30
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d94e      	bls.n	8008856 <_svfiprintf_r+0x17e>
 80087b8:	b1b0      	cbz	r0, 80087e8 <_svfiprintf_r+0x110>
 80087ba:	9207      	str	r2, [sp, #28]
 80087bc:	e014      	b.n	80087e8 <_svfiprintf_r+0x110>
 80087be:	eba0 0308 	sub.w	r3, r0, r8
 80087c2:	fa09 f303 	lsl.w	r3, r9, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	46a2      	mov	sl, r4
 80087cc:	e7d2      	b.n	8008774 <_svfiprintf_r+0x9c>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	1d19      	adds	r1, r3, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	9103      	str	r1, [sp, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfbb      	ittet	lt
 80087da:	425b      	neglt	r3, r3
 80087dc:	f042 0202 	orrlt.w	r2, r2, #2
 80087e0:	9307      	strge	r3, [sp, #28]
 80087e2:	9307      	strlt	r3, [sp, #28]
 80087e4:	bfb8      	it	lt
 80087e6:	9204      	strlt	r2, [sp, #16]
 80087e8:	7823      	ldrb	r3, [r4, #0]
 80087ea:	2b2e      	cmp	r3, #46	; 0x2e
 80087ec:	d10c      	bne.n	8008808 <_svfiprintf_r+0x130>
 80087ee:	7863      	ldrb	r3, [r4, #1]
 80087f0:	2b2a      	cmp	r3, #42	; 0x2a
 80087f2:	d135      	bne.n	8008860 <_svfiprintf_r+0x188>
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	1d1a      	adds	r2, r3, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	9203      	str	r2, [sp, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bfb8      	it	lt
 8008800:	f04f 33ff 	movlt.w	r3, #4294967295
 8008804:	3402      	adds	r4, #2
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088d4 <_svfiprintf_r+0x1fc>
 800880c:	7821      	ldrb	r1, [r4, #0]
 800880e:	2203      	movs	r2, #3
 8008810:	4650      	mov	r0, sl
 8008812:	f7f7 fce5 	bl	80001e0 <memchr>
 8008816:	b140      	cbz	r0, 800882a <_svfiprintf_r+0x152>
 8008818:	2340      	movs	r3, #64	; 0x40
 800881a:	eba0 000a 	sub.w	r0, r0, sl
 800881e:	fa03 f000 	lsl.w	r0, r3, r0
 8008822:	9b04      	ldr	r3, [sp, #16]
 8008824:	4303      	orrs	r3, r0
 8008826:	3401      	adds	r4, #1
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	4826      	ldr	r0, [pc, #152]	; (80088c8 <_svfiprintf_r+0x1f0>)
 8008830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008834:	2206      	movs	r2, #6
 8008836:	f7f7 fcd3 	bl	80001e0 <memchr>
 800883a:	2800      	cmp	r0, #0
 800883c:	d038      	beq.n	80088b0 <_svfiprintf_r+0x1d8>
 800883e:	4b23      	ldr	r3, [pc, #140]	; (80088cc <_svfiprintf_r+0x1f4>)
 8008840:	bb1b      	cbnz	r3, 800888a <_svfiprintf_r+0x1b2>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	3307      	adds	r3, #7
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	3308      	adds	r3, #8
 800884c:	9303      	str	r3, [sp, #12]
 800884e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008850:	4433      	add	r3, r6
 8008852:	9309      	str	r3, [sp, #36]	; 0x24
 8008854:	e767      	b.n	8008726 <_svfiprintf_r+0x4e>
 8008856:	fb0c 3202 	mla	r2, ip, r2, r3
 800885a:	460c      	mov	r4, r1
 800885c:	2001      	movs	r0, #1
 800885e:	e7a5      	b.n	80087ac <_svfiprintf_r+0xd4>
 8008860:	2300      	movs	r3, #0
 8008862:	3401      	adds	r4, #1
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	4619      	mov	r1, r3
 8008868:	f04f 0c0a 	mov.w	ip, #10
 800886c:	4620      	mov	r0, r4
 800886e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008872:	3a30      	subs	r2, #48	; 0x30
 8008874:	2a09      	cmp	r2, #9
 8008876:	d903      	bls.n	8008880 <_svfiprintf_r+0x1a8>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0c5      	beq.n	8008808 <_svfiprintf_r+0x130>
 800887c:	9105      	str	r1, [sp, #20]
 800887e:	e7c3      	b.n	8008808 <_svfiprintf_r+0x130>
 8008880:	fb0c 2101 	mla	r1, ip, r1, r2
 8008884:	4604      	mov	r4, r0
 8008886:	2301      	movs	r3, #1
 8008888:	e7f0      	b.n	800886c <_svfiprintf_r+0x194>
 800888a:	ab03      	add	r3, sp, #12
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	462a      	mov	r2, r5
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <_svfiprintf_r+0x1f8>)
 8008892:	a904      	add	r1, sp, #16
 8008894:	4638      	mov	r0, r7
 8008896:	f7fc fa7d 	bl	8004d94 <_printf_float>
 800889a:	1c42      	adds	r2, r0, #1
 800889c:	4606      	mov	r6, r0
 800889e:	d1d6      	bne.n	800884e <_svfiprintf_r+0x176>
 80088a0:	89ab      	ldrh	r3, [r5, #12]
 80088a2:	065b      	lsls	r3, r3, #25
 80088a4:	f53f af2c 	bmi.w	8008700 <_svfiprintf_r+0x28>
 80088a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088aa:	b01d      	add	sp, #116	; 0x74
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	ab03      	add	r3, sp, #12
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	462a      	mov	r2, r5
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <_svfiprintf_r+0x1f8>)
 80088b8:	a904      	add	r1, sp, #16
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7fc fd0e 	bl	80052dc <_printf_i>
 80088c0:	e7eb      	b.n	800889a <_svfiprintf_r+0x1c2>
 80088c2:	bf00      	nop
 80088c4:	0800996c 	.word	0x0800996c
 80088c8:	08009976 	.word	0x08009976
 80088cc:	08004d95 	.word	0x08004d95
 80088d0:	08008621 	.word	0x08008621
 80088d4:	08009972 	.word	0x08009972

080088d8 <nan>:
 80088d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088e0 <nan+0x8>
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	00000000 	.word	0x00000000
 80088e4:	7ff80000 	.word	0x7ff80000

080088e8 <_sbrk_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d06      	ldr	r5, [pc, #24]	; (8008904 <_sbrk_r+0x1c>)
 80088ec:	2300      	movs	r3, #0
 80088ee:	4604      	mov	r4, r0
 80088f0:	4608      	mov	r0, r1
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	f7f8 ffbe 	bl	8001874 <_sbrk>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_sbrk_r+0x1a>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_sbrk_r+0x1a>
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	200006d4 	.word	0x200006d4

08008908 <strncmp>:
 8008908:	b510      	push	{r4, lr}
 800890a:	b16a      	cbz	r2, 8008928 <strncmp+0x20>
 800890c:	3901      	subs	r1, #1
 800890e:	1884      	adds	r4, r0, r2
 8008910:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008914:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008918:	4293      	cmp	r3, r2
 800891a:	d103      	bne.n	8008924 <strncmp+0x1c>
 800891c:	42a0      	cmp	r0, r4
 800891e:	d001      	beq.n	8008924 <strncmp+0x1c>
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f5      	bne.n	8008910 <strncmp+0x8>
 8008924:	1a98      	subs	r0, r3, r2
 8008926:	bd10      	pop	{r4, pc}
 8008928:	4610      	mov	r0, r2
 800892a:	e7fc      	b.n	8008926 <strncmp+0x1e>

0800892c <__ascii_wctomb>:
 800892c:	b149      	cbz	r1, 8008942 <__ascii_wctomb+0x16>
 800892e:	2aff      	cmp	r2, #255	; 0xff
 8008930:	bf85      	ittet	hi
 8008932:	238a      	movhi	r3, #138	; 0x8a
 8008934:	6003      	strhi	r3, [r0, #0]
 8008936:	700a      	strbls	r2, [r1, #0]
 8008938:	f04f 30ff 	movhi.w	r0, #4294967295
 800893c:	bf98      	it	ls
 800893e:	2001      	movls	r0, #1
 8008940:	4770      	bx	lr
 8008942:	4608      	mov	r0, r1
 8008944:	4770      	bx	lr
	...

08008948 <__assert_func>:
 8008948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800894a:	4614      	mov	r4, r2
 800894c:	461a      	mov	r2, r3
 800894e:	4b09      	ldr	r3, [pc, #36]	; (8008974 <__assert_func+0x2c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4605      	mov	r5, r0
 8008954:	68d8      	ldr	r0, [r3, #12]
 8008956:	b14c      	cbz	r4, 800896c <__assert_func+0x24>
 8008958:	4b07      	ldr	r3, [pc, #28]	; (8008978 <__assert_func+0x30>)
 800895a:	9100      	str	r1, [sp, #0]
 800895c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008960:	4906      	ldr	r1, [pc, #24]	; (800897c <__assert_func+0x34>)
 8008962:	462b      	mov	r3, r5
 8008964:	f000 f80e 	bl	8008984 <fiprintf>
 8008968:	f000 fa84 	bl	8008e74 <abort>
 800896c:	4b04      	ldr	r3, [pc, #16]	; (8008980 <__assert_func+0x38>)
 800896e:	461c      	mov	r4, r3
 8008970:	e7f3      	b.n	800895a <__assert_func+0x12>
 8008972:	bf00      	nop
 8008974:	2000000c 	.word	0x2000000c
 8008978:	0800997d 	.word	0x0800997d
 800897c:	0800998a 	.word	0x0800998a
 8008980:	080099b8 	.word	0x080099b8

08008984 <fiprintf>:
 8008984:	b40e      	push	{r1, r2, r3}
 8008986:	b503      	push	{r0, r1, lr}
 8008988:	4601      	mov	r1, r0
 800898a:	ab03      	add	r3, sp, #12
 800898c:	4805      	ldr	r0, [pc, #20]	; (80089a4 <fiprintf+0x20>)
 800898e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008992:	6800      	ldr	r0, [r0, #0]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	f000 f87d 	bl	8008a94 <_vfiprintf_r>
 800899a:	b002      	add	sp, #8
 800899c:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a0:	b003      	add	sp, #12
 80089a2:	4770      	bx	lr
 80089a4:	2000000c 	.word	0x2000000c

080089a8 <memmove>:
 80089a8:	4288      	cmp	r0, r1
 80089aa:	b510      	push	{r4, lr}
 80089ac:	eb01 0402 	add.w	r4, r1, r2
 80089b0:	d902      	bls.n	80089b8 <memmove+0x10>
 80089b2:	4284      	cmp	r4, r0
 80089b4:	4623      	mov	r3, r4
 80089b6:	d807      	bhi.n	80089c8 <memmove+0x20>
 80089b8:	1e43      	subs	r3, r0, #1
 80089ba:	42a1      	cmp	r1, r4
 80089bc:	d008      	beq.n	80089d0 <memmove+0x28>
 80089be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c6:	e7f8      	b.n	80089ba <memmove+0x12>
 80089c8:	4402      	add	r2, r0
 80089ca:	4601      	mov	r1, r0
 80089cc:	428a      	cmp	r2, r1
 80089ce:	d100      	bne.n	80089d2 <memmove+0x2a>
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089da:	e7f7      	b.n	80089cc <memmove+0x24>

080089dc <__malloc_lock>:
 80089dc:	4801      	ldr	r0, [pc, #4]	; (80089e4 <__malloc_lock+0x8>)
 80089de:	f000 bc09 	b.w	80091f4 <__retarget_lock_acquire_recursive>
 80089e2:	bf00      	nop
 80089e4:	200006dc 	.word	0x200006dc

080089e8 <__malloc_unlock>:
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__malloc_unlock+0x8>)
 80089ea:	f000 bc04 	b.w	80091f6 <__retarget_lock_release_recursive>
 80089ee:	bf00      	nop
 80089f0:	200006dc 	.word	0x200006dc

080089f4 <_realloc_r>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	4607      	mov	r7, r0
 80089f8:	4614      	mov	r4, r2
 80089fa:	460e      	mov	r6, r1
 80089fc:	b921      	cbnz	r1, 8008a08 <_realloc_r+0x14>
 80089fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a02:	4611      	mov	r1, r2
 8008a04:	f7ff bdb2 	b.w	800856c <_malloc_r>
 8008a08:	b922      	cbnz	r2, 8008a14 <_realloc_r+0x20>
 8008a0a:	f7ff fd5f 	bl	80084cc <_free_r>
 8008a0e:	4625      	mov	r5, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a14:	f000 fc54 	bl	80092c0 <_malloc_usable_size_r>
 8008a18:	42a0      	cmp	r0, r4
 8008a1a:	d20f      	bcs.n	8008a3c <_realloc_r+0x48>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4638      	mov	r0, r7
 8008a20:	f7ff fda4 	bl	800856c <_malloc_r>
 8008a24:	4605      	mov	r5, r0
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d0f2      	beq.n	8008a10 <_realloc_r+0x1c>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	f7ff f875 	bl	8007b1c <memcpy>
 8008a32:	4631      	mov	r1, r6
 8008a34:	4638      	mov	r0, r7
 8008a36:	f7ff fd49 	bl	80084cc <_free_r>
 8008a3a:	e7e9      	b.n	8008a10 <_realloc_r+0x1c>
 8008a3c:	4635      	mov	r5, r6
 8008a3e:	e7e7      	b.n	8008a10 <_realloc_r+0x1c>

08008a40 <__sfputc_r>:
 8008a40:	6893      	ldr	r3, [r2, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	b410      	push	{r4}
 8008a48:	6093      	str	r3, [r2, #8]
 8008a4a:	da08      	bge.n	8008a5e <__sfputc_r+0x1e>
 8008a4c:	6994      	ldr	r4, [r2, #24]
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	db01      	blt.n	8008a56 <__sfputc_r+0x16>
 8008a52:	290a      	cmp	r1, #10
 8008a54:	d103      	bne.n	8008a5e <__sfputc_r+0x1e>
 8008a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5a:	f000 b94b 	b.w	8008cf4 <__swbuf_r>
 8008a5e:	6813      	ldr	r3, [r2, #0]
 8008a60:	1c58      	adds	r0, r3, #1
 8008a62:	6010      	str	r0, [r2, #0]
 8008a64:	7019      	strb	r1, [r3, #0]
 8008a66:	4608      	mov	r0, r1
 8008a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a6c:	4770      	bx	lr

08008a6e <__sfputs_r>:
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a70:	4606      	mov	r6, r0
 8008a72:	460f      	mov	r7, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	18d5      	adds	r5, r2, r3
 8008a78:	42ac      	cmp	r4, r5
 8008a7a:	d101      	bne.n	8008a80 <__sfputs_r+0x12>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e007      	b.n	8008a90 <__sfputs_r+0x22>
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	463a      	mov	r2, r7
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff ffda 	bl	8008a40 <__sfputc_r>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d1f3      	bne.n	8008a78 <__sfputs_r+0xa>
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a94 <_vfiprintf_r>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	460d      	mov	r5, r1
 8008a9a:	b09d      	sub	sp, #116	; 0x74
 8008a9c:	4614      	mov	r4, r2
 8008a9e:	4698      	mov	r8, r3
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	b118      	cbz	r0, 8008aac <_vfiprintf_r+0x18>
 8008aa4:	6983      	ldr	r3, [r0, #24]
 8008aa6:	b90b      	cbnz	r3, 8008aac <_vfiprintf_r+0x18>
 8008aa8:	f000 fb06 	bl	80090b8 <__sinit>
 8008aac:	4b89      	ldr	r3, [pc, #548]	; (8008cd4 <_vfiprintf_r+0x240>)
 8008aae:	429d      	cmp	r5, r3
 8008ab0:	d11b      	bne.n	8008aea <_vfiprintf_r+0x56>
 8008ab2:	6875      	ldr	r5, [r6, #4]
 8008ab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ab6:	07d9      	lsls	r1, r3, #31
 8008ab8:	d405      	bmi.n	8008ac6 <_vfiprintf_r+0x32>
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	059a      	lsls	r2, r3, #22
 8008abe:	d402      	bmi.n	8008ac6 <_vfiprintf_r+0x32>
 8008ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac2:	f000 fb97 	bl	80091f4 <__retarget_lock_acquire_recursive>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	071b      	lsls	r3, r3, #28
 8008aca:	d501      	bpl.n	8008ad0 <_vfiprintf_r+0x3c>
 8008acc:	692b      	ldr	r3, [r5, #16]
 8008ace:	b9eb      	cbnz	r3, 8008b0c <_vfiprintf_r+0x78>
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f000 f960 	bl	8008d98 <__swsetup_r>
 8008ad8:	b1c0      	cbz	r0, 8008b0c <_vfiprintf_r+0x78>
 8008ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008adc:	07dc      	lsls	r4, r3, #31
 8008ade:	d50e      	bpl.n	8008afe <_vfiprintf_r+0x6a>
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	b01d      	add	sp, #116	; 0x74
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	4b7b      	ldr	r3, [pc, #492]	; (8008cd8 <_vfiprintf_r+0x244>)
 8008aec:	429d      	cmp	r5, r3
 8008aee:	d101      	bne.n	8008af4 <_vfiprintf_r+0x60>
 8008af0:	68b5      	ldr	r5, [r6, #8]
 8008af2:	e7df      	b.n	8008ab4 <_vfiprintf_r+0x20>
 8008af4:	4b79      	ldr	r3, [pc, #484]	; (8008cdc <_vfiprintf_r+0x248>)
 8008af6:	429d      	cmp	r5, r3
 8008af8:	bf08      	it	eq
 8008afa:	68f5      	ldreq	r5, [r6, #12]
 8008afc:	e7da      	b.n	8008ab4 <_vfiprintf_r+0x20>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	0598      	lsls	r0, r3, #22
 8008b02:	d4ed      	bmi.n	8008ae0 <_vfiprintf_r+0x4c>
 8008b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b06:	f000 fb76 	bl	80091f6 <__retarget_lock_release_recursive>
 8008b0a:	e7e9      	b.n	8008ae0 <_vfiprintf_r+0x4c>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b10:	2320      	movs	r3, #32
 8008b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b1a:	2330      	movs	r3, #48	; 0x30
 8008b1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ce0 <_vfiprintf_r+0x24c>
 8008b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b24:	f04f 0901 	mov.w	r9, #1
 8008b28:	4623      	mov	r3, r4
 8008b2a:	469a      	mov	sl, r3
 8008b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b30:	b10a      	cbz	r2, 8008b36 <_vfiprintf_r+0xa2>
 8008b32:	2a25      	cmp	r2, #37	; 0x25
 8008b34:	d1f9      	bne.n	8008b2a <_vfiprintf_r+0x96>
 8008b36:	ebba 0b04 	subs.w	fp, sl, r4
 8008b3a:	d00b      	beq.n	8008b54 <_vfiprintf_r+0xc0>
 8008b3c:	465b      	mov	r3, fp
 8008b3e:	4622      	mov	r2, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	4630      	mov	r0, r6
 8008b44:	f7ff ff93 	bl	8008a6e <__sfputs_r>
 8008b48:	3001      	adds	r0, #1
 8008b4a:	f000 80aa 	beq.w	8008ca2 <_vfiprintf_r+0x20e>
 8008b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b50:	445a      	add	r2, fp
 8008b52:	9209      	str	r2, [sp, #36]	; 0x24
 8008b54:	f89a 3000 	ldrb.w	r3, [sl]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f000 80a2 	beq.w	8008ca2 <_vfiprintf_r+0x20e>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f04f 32ff 	mov.w	r2, #4294967295
 8008b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b68:	f10a 0a01 	add.w	sl, sl, #1
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b74:	931a      	str	r3, [sp, #104]	; 0x68
 8008b76:	4654      	mov	r4, sl
 8008b78:	2205      	movs	r2, #5
 8008b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7e:	4858      	ldr	r0, [pc, #352]	; (8008ce0 <_vfiprintf_r+0x24c>)
 8008b80:	f7f7 fb2e 	bl	80001e0 <memchr>
 8008b84:	9a04      	ldr	r2, [sp, #16]
 8008b86:	b9d8      	cbnz	r0, 8008bc0 <_vfiprintf_r+0x12c>
 8008b88:	06d1      	lsls	r1, r2, #27
 8008b8a:	bf44      	itt	mi
 8008b8c:	2320      	movmi	r3, #32
 8008b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b92:	0713      	lsls	r3, r2, #28
 8008b94:	bf44      	itt	mi
 8008b96:	232b      	movmi	r3, #43	; 0x2b
 8008b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ba2:	d015      	beq.n	8008bd0 <_vfiprintf_r+0x13c>
 8008ba4:	9a07      	ldr	r2, [sp, #28]
 8008ba6:	4654      	mov	r4, sl
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f04f 0c0a 	mov.w	ip, #10
 8008bae:	4621      	mov	r1, r4
 8008bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bb4:	3b30      	subs	r3, #48	; 0x30
 8008bb6:	2b09      	cmp	r3, #9
 8008bb8:	d94e      	bls.n	8008c58 <_vfiprintf_r+0x1c4>
 8008bba:	b1b0      	cbz	r0, 8008bea <_vfiprintf_r+0x156>
 8008bbc:	9207      	str	r2, [sp, #28]
 8008bbe:	e014      	b.n	8008bea <_vfiprintf_r+0x156>
 8008bc0:	eba0 0308 	sub.w	r3, r0, r8
 8008bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	9304      	str	r3, [sp, #16]
 8008bcc:	46a2      	mov	sl, r4
 8008bce:	e7d2      	b.n	8008b76 <_vfiprintf_r+0xe2>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	1d19      	adds	r1, r3, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	9103      	str	r1, [sp, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	bfbb      	ittet	lt
 8008bdc:	425b      	neglt	r3, r3
 8008bde:	f042 0202 	orrlt.w	r2, r2, #2
 8008be2:	9307      	strge	r3, [sp, #28]
 8008be4:	9307      	strlt	r3, [sp, #28]
 8008be6:	bfb8      	it	lt
 8008be8:	9204      	strlt	r2, [sp, #16]
 8008bea:	7823      	ldrb	r3, [r4, #0]
 8008bec:	2b2e      	cmp	r3, #46	; 0x2e
 8008bee:	d10c      	bne.n	8008c0a <_vfiprintf_r+0x176>
 8008bf0:	7863      	ldrb	r3, [r4, #1]
 8008bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf4:	d135      	bne.n	8008c62 <_vfiprintf_r+0x1ce>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	1d1a      	adds	r2, r3, #4
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	9203      	str	r2, [sp, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bfb8      	it	lt
 8008c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c06:	3402      	adds	r4, #2
 8008c08:	9305      	str	r3, [sp, #20]
 8008c0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cf0 <_vfiprintf_r+0x25c>
 8008c0e:	7821      	ldrb	r1, [r4, #0]
 8008c10:	2203      	movs	r2, #3
 8008c12:	4650      	mov	r0, sl
 8008c14:	f7f7 fae4 	bl	80001e0 <memchr>
 8008c18:	b140      	cbz	r0, 8008c2c <_vfiprintf_r+0x198>
 8008c1a:	2340      	movs	r3, #64	; 0x40
 8008c1c:	eba0 000a 	sub.w	r0, r0, sl
 8008c20:	fa03 f000 	lsl.w	r0, r3, r0
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	4303      	orrs	r3, r0
 8008c28:	3401      	adds	r4, #1
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c30:	482c      	ldr	r0, [pc, #176]	; (8008ce4 <_vfiprintf_r+0x250>)
 8008c32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c36:	2206      	movs	r2, #6
 8008c38:	f7f7 fad2 	bl	80001e0 <memchr>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d03f      	beq.n	8008cc0 <_vfiprintf_r+0x22c>
 8008c40:	4b29      	ldr	r3, [pc, #164]	; (8008ce8 <_vfiprintf_r+0x254>)
 8008c42:	bb1b      	cbnz	r3, 8008c8c <_vfiprintf_r+0x1f8>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	3307      	adds	r3, #7
 8008c48:	f023 0307 	bic.w	r3, r3, #7
 8008c4c:	3308      	adds	r3, #8
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c52:	443b      	add	r3, r7
 8008c54:	9309      	str	r3, [sp, #36]	; 0x24
 8008c56:	e767      	b.n	8008b28 <_vfiprintf_r+0x94>
 8008c58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	2001      	movs	r0, #1
 8008c60:	e7a5      	b.n	8008bae <_vfiprintf_r+0x11a>
 8008c62:	2300      	movs	r3, #0
 8008c64:	3401      	adds	r4, #1
 8008c66:	9305      	str	r3, [sp, #20]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	f04f 0c0a 	mov.w	ip, #10
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c74:	3a30      	subs	r2, #48	; 0x30
 8008c76:	2a09      	cmp	r2, #9
 8008c78:	d903      	bls.n	8008c82 <_vfiprintf_r+0x1ee>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0c5      	beq.n	8008c0a <_vfiprintf_r+0x176>
 8008c7e:	9105      	str	r1, [sp, #20]
 8008c80:	e7c3      	b.n	8008c0a <_vfiprintf_r+0x176>
 8008c82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c86:	4604      	mov	r4, r0
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e7f0      	b.n	8008c6e <_vfiprintf_r+0x1da>
 8008c8c:	ab03      	add	r3, sp, #12
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	462a      	mov	r2, r5
 8008c92:	4b16      	ldr	r3, [pc, #88]	; (8008cec <_vfiprintf_r+0x258>)
 8008c94:	a904      	add	r1, sp, #16
 8008c96:	4630      	mov	r0, r6
 8008c98:	f7fc f87c 	bl	8004d94 <_printf_float>
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	1c78      	adds	r0, r7, #1
 8008ca0:	d1d6      	bne.n	8008c50 <_vfiprintf_r+0x1bc>
 8008ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ca4:	07d9      	lsls	r1, r3, #31
 8008ca6:	d405      	bmi.n	8008cb4 <_vfiprintf_r+0x220>
 8008ca8:	89ab      	ldrh	r3, [r5, #12]
 8008caa:	059a      	lsls	r2, r3, #22
 8008cac:	d402      	bmi.n	8008cb4 <_vfiprintf_r+0x220>
 8008cae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cb0:	f000 faa1 	bl	80091f6 <__retarget_lock_release_recursive>
 8008cb4:	89ab      	ldrh	r3, [r5, #12]
 8008cb6:	065b      	lsls	r3, r3, #25
 8008cb8:	f53f af12 	bmi.w	8008ae0 <_vfiprintf_r+0x4c>
 8008cbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cbe:	e711      	b.n	8008ae4 <_vfiprintf_r+0x50>
 8008cc0:	ab03      	add	r3, sp, #12
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	462a      	mov	r2, r5
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <_vfiprintf_r+0x258>)
 8008cc8:	a904      	add	r1, sp, #16
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7fc fb06 	bl	80052dc <_printf_i>
 8008cd0:	e7e4      	b.n	8008c9c <_vfiprintf_r+0x208>
 8008cd2:	bf00      	nop
 8008cd4:	080099dc 	.word	0x080099dc
 8008cd8:	080099fc 	.word	0x080099fc
 8008cdc:	080099bc 	.word	0x080099bc
 8008ce0:	0800996c 	.word	0x0800996c
 8008ce4:	08009976 	.word	0x08009976
 8008ce8:	08004d95 	.word	0x08004d95
 8008cec:	08008a6f 	.word	0x08008a6f
 8008cf0:	08009972 	.word	0x08009972

08008cf4 <__swbuf_r>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	460e      	mov	r6, r1
 8008cf8:	4614      	mov	r4, r2
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	b118      	cbz	r0, 8008d06 <__swbuf_r+0x12>
 8008cfe:	6983      	ldr	r3, [r0, #24]
 8008d00:	b90b      	cbnz	r3, 8008d06 <__swbuf_r+0x12>
 8008d02:	f000 f9d9 	bl	80090b8 <__sinit>
 8008d06:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <__swbuf_r+0x98>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	d12b      	bne.n	8008d64 <__swbuf_r+0x70>
 8008d0c:	686c      	ldr	r4, [r5, #4]
 8008d0e:	69a3      	ldr	r3, [r4, #24]
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	071a      	lsls	r2, r3, #28
 8008d16:	d52f      	bpl.n	8008d78 <__swbuf_r+0x84>
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	b36b      	cbz	r3, 8008d78 <__swbuf_r+0x84>
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	1ac0      	subs	r0, r0, r3
 8008d22:	6963      	ldr	r3, [r4, #20]
 8008d24:	b2f6      	uxtb	r6, r6
 8008d26:	4283      	cmp	r3, r0
 8008d28:	4637      	mov	r7, r6
 8008d2a:	dc04      	bgt.n	8008d36 <__swbuf_r+0x42>
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	f000 f92e 	bl	8008f90 <_fflush_r>
 8008d34:	bb30      	cbnz	r0, 8008d84 <__swbuf_r+0x90>
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	60a3      	str	r3, [r4, #8]
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	701e      	strb	r6, [r3, #0]
 8008d44:	6963      	ldr	r3, [r4, #20]
 8008d46:	3001      	adds	r0, #1
 8008d48:	4283      	cmp	r3, r0
 8008d4a:	d004      	beq.n	8008d56 <__swbuf_r+0x62>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	07db      	lsls	r3, r3, #31
 8008d50:	d506      	bpl.n	8008d60 <__swbuf_r+0x6c>
 8008d52:	2e0a      	cmp	r6, #10
 8008d54:	d104      	bne.n	8008d60 <__swbuf_r+0x6c>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f000 f919 	bl	8008f90 <_fflush_r>
 8008d5e:	b988      	cbnz	r0, 8008d84 <__swbuf_r+0x90>
 8008d60:	4638      	mov	r0, r7
 8008d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d64:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <__swbuf_r+0x9c>)
 8008d66:	429c      	cmp	r4, r3
 8008d68:	d101      	bne.n	8008d6e <__swbuf_r+0x7a>
 8008d6a:	68ac      	ldr	r4, [r5, #8]
 8008d6c:	e7cf      	b.n	8008d0e <__swbuf_r+0x1a>
 8008d6e:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <__swbuf_r+0xa0>)
 8008d70:	429c      	cmp	r4, r3
 8008d72:	bf08      	it	eq
 8008d74:	68ec      	ldreq	r4, [r5, #12]
 8008d76:	e7ca      	b.n	8008d0e <__swbuf_r+0x1a>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 f80c 	bl	8008d98 <__swsetup_r>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d0cb      	beq.n	8008d1c <__swbuf_r+0x28>
 8008d84:	f04f 37ff 	mov.w	r7, #4294967295
 8008d88:	e7ea      	b.n	8008d60 <__swbuf_r+0x6c>
 8008d8a:	bf00      	nop
 8008d8c:	080099dc 	.word	0x080099dc
 8008d90:	080099fc 	.word	0x080099fc
 8008d94:	080099bc 	.word	0x080099bc

08008d98 <__swsetup_r>:
 8008d98:	4b32      	ldr	r3, [pc, #200]	; (8008e64 <__swsetup_r+0xcc>)
 8008d9a:	b570      	push	{r4, r5, r6, lr}
 8008d9c:	681d      	ldr	r5, [r3, #0]
 8008d9e:	4606      	mov	r6, r0
 8008da0:	460c      	mov	r4, r1
 8008da2:	b125      	cbz	r5, 8008dae <__swsetup_r+0x16>
 8008da4:	69ab      	ldr	r3, [r5, #24]
 8008da6:	b913      	cbnz	r3, 8008dae <__swsetup_r+0x16>
 8008da8:	4628      	mov	r0, r5
 8008daa:	f000 f985 	bl	80090b8 <__sinit>
 8008dae:	4b2e      	ldr	r3, [pc, #184]	; (8008e68 <__swsetup_r+0xd0>)
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d10f      	bne.n	8008dd4 <__swsetup_r+0x3c>
 8008db4:	686c      	ldr	r4, [r5, #4]
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dbc:	0719      	lsls	r1, r3, #28
 8008dbe:	d42c      	bmi.n	8008e1a <__swsetup_r+0x82>
 8008dc0:	06dd      	lsls	r5, r3, #27
 8008dc2:	d411      	bmi.n	8008de8 <__swsetup_r+0x50>
 8008dc4:	2309      	movs	r3, #9
 8008dc6:	6033      	str	r3, [r6, #0]
 8008dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd2:	e03e      	b.n	8008e52 <__swsetup_r+0xba>
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <__swsetup_r+0xd4>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d101      	bne.n	8008dde <__swsetup_r+0x46>
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	e7eb      	b.n	8008db6 <__swsetup_r+0x1e>
 8008dde:	4b24      	ldr	r3, [pc, #144]	; (8008e70 <__swsetup_r+0xd8>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	bf08      	it	eq
 8008de4:	68ec      	ldreq	r4, [r5, #12]
 8008de6:	e7e6      	b.n	8008db6 <__swsetup_r+0x1e>
 8008de8:	0758      	lsls	r0, r3, #29
 8008dea:	d512      	bpl.n	8008e12 <__swsetup_r+0x7a>
 8008dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dee:	b141      	cbz	r1, 8008e02 <__swsetup_r+0x6a>
 8008df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df4:	4299      	cmp	r1, r3
 8008df6:	d002      	beq.n	8008dfe <__swsetup_r+0x66>
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7ff fb67 	bl	80084cc <_free_r>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6363      	str	r3, [r4, #52]	; 0x34
 8008e02:	89a3      	ldrh	r3, [r4, #12]
 8008e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6063      	str	r3, [r4, #4]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	f043 0308 	orr.w	r3, r3, #8
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	b94b      	cbnz	r3, 8008e32 <__swsetup_r+0x9a>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e28:	d003      	beq.n	8008e32 <__swsetup_r+0x9a>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f000 fa07 	bl	8009240 <__smakebuf_r>
 8008e32:	89a0      	ldrh	r0, [r4, #12]
 8008e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e38:	f010 0301 	ands.w	r3, r0, #1
 8008e3c:	d00a      	beq.n	8008e54 <__swsetup_r+0xbc>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60a3      	str	r3, [r4, #8]
 8008e42:	6963      	ldr	r3, [r4, #20]
 8008e44:	425b      	negs	r3, r3
 8008e46:	61a3      	str	r3, [r4, #24]
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	b943      	cbnz	r3, 8008e5e <__swsetup_r+0xc6>
 8008e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e50:	d1ba      	bne.n	8008dc8 <__swsetup_r+0x30>
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	0781      	lsls	r1, r0, #30
 8008e56:	bf58      	it	pl
 8008e58:	6963      	ldrpl	r3, [r4, #20]
 8008e5a:	60a3      	str	r3, [r4, #8]
 8008e5c:	e7f4      	b.n	8008e48 <__swsetup_r+0xb0>
 8008e5e:	2000      	movs	r0, #0
 8008e60:	e7f7      	b.n	8008e52 <__swsetup_r+0xba>
 8008e62:	bf00      	nop
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	080099dc 	.word	0x080099dc
 8008e6c:	080099fc 	.word	0x080099fc
 8008e70:	080099bc 	.word	0x080099bc

08008e74 <abort>:
 8008e74:	b508      	push	{r3, lr}
 8008e76:	2006      	movs	r0, #6
 8008e78:	f000 fa52 	bl	8009320 <raise>
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	f7f8 fc81 	bl	8001784 <_exit>
	...

08008e84 <__sflush_r>:
 8008e84:	898a      	ldrh	r2, [r1, #12]
 8008e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	0710      	lsls	r0, r2, #28
 8008e8e:	460c      	mov	r4, r1
 8008e90:	d458      	bmi.n	8008f44 <__sflush_r+0xc0>
 8008e92:	684b      	ldr	r3, [r1, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dc05      	bgt.n	8008ea4 <__sflush_r+0x20>
 8008e98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dc02      	bgt.n	8008ea4 <__sflush_r+0x20>
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	d0f9      	beq.n	8008e9e <__sflush_r+0x1a>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008eb0:	682f      	ldr	r7, [r5, #0]
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	d032      	beq.n	8008f1c <__sflush_r+0x98>
 8008eb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008eb8:	89a3      	ldrh	r3, [r4, #12]
 8008eba:	075a      	lsls	r2, r3, #29
 8008ebc:	d505      	bpl.n	8008eca <__sflush_r+0x46>
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	1ac0      	subs	r0, r0, r3
 8008ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ec4:	b10b      	cbz	r3, 8008eca <__sflush_r+0x46>
 8008ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ec8:	1ac0      	subs	r0, r0, r3
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4602      	mov	r2, r0
 8008ece:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ed0:	6a21      	ldr	r1, [r4, #32]
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b0      	blx	r6
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	d106      	bne.n	8008eea <__sflush_r+0x66>
 8008edc:	6829      	ldr	r1, [r5, #0]
 8008ede:	291d      	cmp	r1, #29
 8008ee0:	d82c      	bhi.n	8008f3c <__sflush_r+0xb8>
 8008ee2:	4a2a      	ldr	r2, [pc, #168]	; (8008f8c <__sflush_r+0x108>)
 8008ee4:	40ca      	lsrs	r2, r1
 8008ee6:	07d6      	lsls	r6, r2, #31
 8008ee8:	d528      	bpl.n	8008f3c <__sflush_r+0xb8>
 8008eea:	2200      	movs	r2, #0
 8008eec:	6062      	str	r2, [r4, #4]
 8008eee:	04d9      	lsls	r1, r3, #19
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	d504      	bpl.n	8008f00 <__sflush_r+0x7c>
 8008ef6:	1c42      	adds	r2, r0, #1
 8008ef8:	d101      	bne.n	8008efe <__sflush_r+0x7a>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b903      	cbnz	r3, 8008f00 <__sflush_r+0x7c>
 8008efe:	6560      	str	r0, [r4, #84]	; 0x54
 8008f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f02:	602f      	str	r7, [r5, #0]
 8008f04:	2900      	cmp	r1, #0
 8008f06:	d0ca      	beq.n	8008e9e <__sflush_r+0x1a>
 8008f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	d002      	beq.n	8008f16 <__sflush_r+0x92>
 8008f10:	4628      	mov	r0, r5
 8008f12:	f7ff fadb 	bl	80084cc <_free_r>
 8008f16:	2000      	movs	r0, #0
 8008f18:	6360      	str	r0, [r4, #52]	; 0x34
 8008f1a:	e7c1      	b.n	8008ea0 <__sflush_r+0x1c>
 8008f1c:	6a21      	ldr	r1, [r4, #32]
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b0      	blx	r6
 8008f24:	1c41      	adds	r1, r0, #1
 8008f26:	d1c7      	bne.n	8008eb8 <__sflush_r+0x34>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0c4      	beq.n	8008eb8 <__sflush_r+0x34>
 8008f2e:	2b1d      	cmp	r3, #29
 8008f30:	d001      	beq.n	8008f36 <__sflush_r+0xb2>
 8008f32:	2b16      	cmp	r3, #22
 8008f34:	d101      	bne.n	8008f3a <__sflush_r+0xb6>
 8008f36:	602f      	str	r7, [r5, #0]
 8008f38:	e7b1      	b.n	8008e9e <__sflush_r+0x1a>
 8008f3a:	89a3      	ldrh	r3, [r4, #12]
 8008f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f40:	81a3      	strh	r3, [r4, #12]
 8008f42:	e7ad      	b.n	8008ea0 <__sflush_r+0x1c>
 8008f44:	690f      	ldr	r7, [r1, #16]
 8008f46:	2f00      	cmp	r7, #0
 8008f48:	d0a9      	beq.n	8008e9e <__sflush_r+0x1a>
 8008f4a:	0793      	lsls	r3, r2, #30
 8008f4c:	680e      	ldr	r6, [r1, #0]
 8008f4e:	bf08      	it	eq
 8008f50:	694b      	ldreq	r3, [r1, #20]
 8008f52:	600f      	str	r7, [r1, #0]
 8008f54:	bf18      	it	ne
 8008f56:	2300      	movne	r3, #0
 8008f58:	eba6 0807 	sub.w	r8, r6, r7
 8008f5c:	608b      	str	r3, [r1, #8]
 8008f5e:	f1b8 0f00 	cmp.w	r8, #0
 8008f62:	dd9c      	ble.n	8008e9e <__sflush_r+0x1a>
 8008f64:	6a21      	ldr	r1, [r4, #32]
 8008f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f68:	4643      	mov	r3, r8
 8008f6a:	463a      	mov	r2, r7
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b0      	blx	r6
 8008f70:	2800      	cmp	r0, #0
 8008f72:	dc06      	bgt.n	8008f82 <__sflush_r+0xfe>
 8008f74:	89a3      	ldrh	r3, [r4, #12]
 8008f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	e78e      	b.n	8008ea0 <__sflush_r+0x1c>
 8008f82:	4407      	add	r7, r0
 8008f84:	eba8 0800 	sub.w	r8, r8, r0
 8008f88:	e7e9      	b.n	8008f5e <__sflush_r+0xda>
 8008f8a:	bf00      	nop
 8008f8c:	20400001 	.word	0x20400001

08008f90 <_fflush_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	690b      	ldr	r3, [r1, #16]
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b913      	cbnz	r3, 8008fa0 <_fflush_r+0x10>
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	b118      	cbz	r0, 8008faa <_fflush_r+0x1a>
 8008fa2:	6983      	ldr	r3, [r0, #24]
 8008fa4:	b90b      	cbnz	r3, 8008faa <_fflush_r+0x1a>
 8008fa6:	f000 f887 	bl	80090b8 <__sinit>
 8008faa:	4b14      	ldr	r3, [pc, #80]	; (8008ffc <_fflush_r+0x6c>)
 8008fac:	429c      	cmp	r4, r3
 8008fae:	d11b      	bne.n	8008fe8 <_fflush_r+0x58>
 8008fb0:	686c      	ldr	r4, [r5, #4]
 8008fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0ef      	beq.n	8008f9a <_fflush_r+0xa>
 8008fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fbc:	07d0      	lsls	r0, r2, #31
 8008fbe:	d404      	bmi.n	8008fca <_fflush_r+0x3a>
 8008fc0:	0599      	lsls	r1, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_fflush_r+0x3a>
 8008fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fc6:	f000 f915 	bl	80091f4 <__retarget_lock_acquire_recursive>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	4621      	mov	r1, r4
 8008fce:	f7ff ff59 	bl	8008e84 <__sflush_r>
 8008fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fd4:	07da      	lsls	r2, r3, #31
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	d4e0      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	059b      	lsls	r3, r3, #22
 8008fde:	d4dd      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fe2:	f000 f908 	bl	80091f6 <__retarget_lock_release_recursive>
 8008fe6:	e7d9      	b.n	8008f9c <_fflush_r+0xc>
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <_fflush_r+0x70>)
 8008fea:	429c      	cmp	r4, r3
 8008fec:	d101      	bne.n	8008ff2 <_fflush_r+0x62>
 8008fee:	68ac      	ldr	r4, [r5, #8]
 8008ff0:	e7df      	b.n	8008fb2 <_fflush_r+0x22>
 8008ff2:	4b04      	ldr	r3, [pc, #16]	; (8009004 <_fflush_r+0x74>)
 8008ff4:	429c      	cmp	r4, r3
 8008ff6:	bf08      	it	eq
 8008ff8:	68ec      	ldreq	r4, [r5, #12]
 8008ffa:	e7da      	b.n	8008fb2 <_fflush_r+0x22>
 8008ffc:	080099dc 	.word	0x080099dc
 8009000:	080099fc 	.word	0x080099fc
 8009004:	080099bc 	.word	0x080099bc

08009008 <std>:
 8009008:	2300      	movs	r3, #0
 800900a:	b510      	push	{r4, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	e9c0 3300 	strd	r3, r3, [r0]
 8009012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009016:	6083      	str	r3, [r0, #8]
 8009018:	8181      	strh	r1, [r0, #12]
 800901a:	6643      	str	r3, [r0, #100]	; 0x64
 800901c:	81c2      	strh	r2, [r0, #14]
 800901e:	6183      	str	r3, [r0, #24]
 8009020:	4619      	mov	r1, r3
 8009022:	2208      	movs	r2, #8
 8009024:	305c      	adds	r0, #92	; 0x5c
 8009026:	f7fb fe0d 	bl	8004c44 <memset>
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <std+0x38>)
 800902c:	6263      	str	r3, [r4, #36]	; 0x24
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <std+0x3c>)
 8009030:	62a3      	str	r3, [r4, #40]	; 0x28
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <std+0x40>)
 8009034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x44>)
 8009038:	6224      	str	r4, [r4, #32]
 800903a:	6323      	str	r3, [r4, #48]	; 0x30
 800903c:	bd10      	pop	{r4, pc}
 800903e:	bf00      	nop
 8009040:	08009359 	.word	0x08009359
 8009044:	0800937b 	.word	0x0800937b
 8009048:	080093b3 	.word	0x080093b3
 800904c:	080093d7 	.word	0x080093d7

08009050 <_cleanup_r>:
 8009050:	4901      	ldr	r1, [pc, #4]	; (8009058 <_cleanup_r+0x8>)
 8009052:	f000 b8af 	b.w	80091b4 <_fwalk_reent>
 8009056:	bf00      	nop
 8009058:	08008f91 	.word	0x08008f91

0800905c <__sfmoreglue>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	1e4a      	subs	r2, r1, #1
 8009060:	2568      	movs	r5, #104	; 0x68
 8009062:	4355      	muls	r5, r2
 8009064:	460e      	mov	r6, r1
 8009066:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800906a:	f7ff fa7f 	bl	800856c <_malloc_r>
 800906e:	4604      	mov	r4, r0
 8009070:	b140      	cbz	r0, 8009084 <__sfmoreglue+0x28>
 8009072:	2100      	movs	r1, #0
 8009074:	e9c0 1600 	strd	r1, r6, [r0]
 8009078:	300c      	adds	r0, #12
 800907a:	60a0      	str	r0, [r4, #8]
 800907c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009080:	f7fb fde0 	bl	8004c44 <memset>
 8009084:	4620      	mov	r0, r4
 8009086:	bd70      	pop	{r4, r5, r6, pc}

08009088 <__sfp_lock_acquire>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__sfp_lock_acquire+0x8>)
 800908a:	f000 b8b3 	b.w	80091f4 <__retarget_lock_acquire_recursive>
 800908e:	bf00      	nop
 8009090:	200006e0 	.word	0x200006e0

08009094 <__sfp_lock_release>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_release+0x8>)
 8009096:	f000 b8ae 	b.w	80091f6 <__retarget_lock_release_recursive>
 800909a:	bf00      	nop
 800909c:	200006e0 	.word	0x200006e0

080090a0 <__sinit_lock_acquire>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sinit_lock_acquire+0x8>)
 80090a2:	f000 b8a7 	b.w	80091f4 <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	200006db 	.word	0x200006db

080090ac <__sinit_lock_release>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sinit_lock_release+0x8>)
 80090ae:	f000 b8a2 	b.w	80091f6 <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	200006db 	.word	0x200006db

080090b8 <__sinit>:
 80090b8:	b510      	push	{r4, lr}
 80090ba:	4604      	mov	r4, r0
 80090bc:	f7ff fff0 	bl	80090a0 <__sinit_lock_acquire>
 80090c0:	69a3      	ldr	r3, [r4, #24]
 80090c2:	b11b      	cbz	r3, 80090cc <__sinit+0x14>
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c8:	f7ff bff0 	b.w	80090ac <__sinit_lock_release>
 80090cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090d0:	6523      	str	r3, [r4, #80]	; 0x50
 80090d2:	4b13      	ldr	r3, [pc, #76]	; (8009120 <__sinit+0x68>)
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <__sinit+0x6c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090da:	42a3      	cmp	r3, r4
 80090dc:	bf04      	itt	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	61a3      	streq	r3, [r4, #24]
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 f820 	bl	8009128 <__sfp>
 80090e8:	6060      	str	r0, [r4, #4]
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f81c 	bl	8009128 <__sfp>
 80090f0:	60a0      	str	r0, [r4, #8]
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 f818 	bl	8009128 <__sfp>
 80090f8:	2200      	movs	r2, #0
 80090fa:	60e0      	str	r0, [r4, #12]
 80090fc:	2104      	movs	r1, #4
 80090fe:	6860      	ldr	r0, [r4, #4]
 8009100:	f7ff ff82 	bl	8009008 <std>
 8009104:	68a0      	ldr	r0, [r4, #8]
 8009106:	2201      	movs	r2, #1
 8009108:	2109      	movs	r1, #9
 800910a:	f7ff ff7d 	bl	8009008 <std>
 800910e:	68e0      	ldr	r0, [r4, #12]
 8009110:	2202      	movs	r2, #2
 8009112:	2112      	movs	r1, #18
 8009114:	f7ff ff78 	bl	8009008 <std>
 8009118:	2301      	movs	r3, #1
 800911a:	61a3      	str	r3, [r4, #24]
 800911c:	e7d2      	b.n	80090c4 <__sinit+0xc>
 800911e:	bf00      	nop
 8009120:	08009568 	.word	0x08009568
 8009124:	08009051 	.word	0x08009051

08009128 <__sfp>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	4607      	mov	r7, r0
 800912c:	f7ff ffac 	bl	8009088 <__sfp_lock_acquire>
 8009130:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <__sfp+0x84>)
 8009132:	681e      	ldr	r6, [r3, #0]
 8009134:	69b3      	ldr	r3, [r6, #24]
 8009136:	b913      	cbnz	r3, 800913e <__sfp+0x16>
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff ffbd 	bl	80090b8 <__sinit>
 800913e:	3648      	adds	r6, #72	; 0x48
 8009140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009144:	3b01      	subs	r3, #1
 8009146:	d503      	bpl.n	8009150 <__sfp+0x28>
 8009148:	6833      	ldr	r3, [r6, #0]
 800914a:	b30b      	cbz	r3, 8009190 <__sfp+0x68>
 800914c:	6836      	ldr	r6, [r6, #0]
 800914e:	e7f7      	b.n	8009140 <__sfp+0x18>
 8009150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009154:	b9d5      	cbnz	r5, 800918c <__sfp+0x64>
 8009156:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <__sfp+0x88>)
 8009158:	60e3      	str	r3, [r4, #12]
 800915a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800915e:	6665      	str	r5, [r4, #100]	; 0x64
 8009160:	f000 f847 	bl	80091f2 <__retarget_lock_init_recursive>
 8009164:	f7ff ff96 	bl	8009094 <__sfp_lock_release>
 8009168:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800916c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009170:	6025      	str	r5, [r4, #0]
 8009172:	61a5      	str	r5, [r4, #24]
 8009174:	2208      	movs	r2, #8
 8009176:	4629      	mov	r1, r5
 8009178:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800917c:	f7fb fd62 	bl	8004c44 <memset>
 8009180:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009184:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009188:	4620      	mov	r0, r4
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	3468      	adds	r4, #104	; 0x68
 800918e:	e7d9      	b.n	8009144 <__sfp+0x1c>
 8009190:	2104      	movs	r1, #4
 8009192:	4638      	mov	r0, r7
 8009194:	f7ff ff62 	bl	800905c <__sfmoreglue>
 8009198:	4604      	mov	r4, r0
 800919a:	6030      	str	r0, [r6, #0]
 800919c:	2800      	cmp	r0, #0
 800919e:	d1d5      	bne.n	800914c <__sfp+0x24>
 80091a0:	f7ff ff78 	bl	8009094 <__sfp_lock_release>
 80091a4:	230c      	movs	r3, #12
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	e7ee      	b.n	8009188 <__sfp+0x60>
 80091aa:	bf00      	nop
 80091ac:	08009568 	.word	0x08009568
 80091b0:	ffff0001 	.word	0xffff0001

080091b4 <_fwalk_reent>:
 80091b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b8:	4606      	mov	r6, r0
 80091ba:	4688      	mov	r8, r1
 80091bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091c0:	2700      	movs	r7, #0
 80091c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091c6:	f1b9 0901 	subs.w	r9, r9, #1
 80091ca:	d505      	bpl.n	80091d8 <_fwalk_reent+0x24>
 80091cc:	6824      	ldr	r4, [r4, #0]
 80091ce:	2c00      	cmp	r4, #0
 80091d0:	d1f7      	bne.n	80091c2 <_fwalk_reent+0xe>
 80091d2:	4638      	mov	r0, r7
 80091d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d8:	89ab      	ldrh	r3, [r5, #12]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d907      	bls.n	80091ee <_fwalk_reent+0x3a>
 80091de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091e2:	3301      	adds	r3, #1
 80091e4:	d003      	beq.n	80091ee <_fwalk_reent+0x3a>
 80091e6:	4629      	mov	r1, r5
 80091e8:	4630      	mov	r0, r6
 80091ea:	47c0      	blx	r8
 80091ec:	4307      	orrs	r7, r0
 80091ee:	3568      	adds	r5, #104	; 0x68
 80091f0:	e7e9      	b.n	80091c6 <_fwalk_reent+0x12>

080091f2 <__retarget_lock_init_recursive>:
 80091f2:	4770      	bx	lr

080091f4 <__retarget_lock_acquire_recursive>:
 80091f4:	4770      	bx	lr

080091f6 <__retarget_lock_release_recursive>:
 80091f6:	4770      	bx	lr

080091f8 <__swhatbuf_r>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	460e      	mov	r6, r1
 80091fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009200:	2900      	cmp	r1, #0
 8009202:	b096      	sub	sp, #88	; 0x58
 8009204:	4614      	mov	r4, r2
 8009206:	461d      	mov	r5, r3
 8009208:	da07      	bge.n	800921a <__swhatbuf_r+0x22>
 800920a:	2300      	movs	r3, #0
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	89b3      	ldrh	r3, [r6, #12]
 8009210:	061a      	lsls	r2, r3, #24
 8009212:	d410      	bmi.n	8009236 <__swhatbuf_r+0x3e>
 8009214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009218:	e00e      	b.n	8009238 <__swhatbuf_r+0x40>
 800921a:	466a      	mov	r2, sp
 800921c:	f000 f902 	bl	8009424 <_fstat_r>
 8009220:	2800      	cmp	r0, #0
 8009222:	dbf2      	blt.n	800920a <__swhatbuf_r+0x12>
 8009224:	9a01      	ldr	r2, [sp, #4]
 8009226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800922a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800922e:	425a      	negs	r2, r3
 8009230:	415a      	adcs	r2, r3
 8009232:	602a      	str	r2, [r5, #0]
 8009234:	e7ee      	b.n	8009214 <__swhatbuf_r+0x1c>
 8009236:	2340      	movs	r3, #64	; 0x40
 8009238:	2000      	movs	r0, #0
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	b016      	add	sp, #88	; 0x58
 800923e:	bd70      	pop	{r4, r5, r6, pc}

08009240 <__smakebuf_r>:
 8009240:	898b      	ldrh	r3, [r1, #12]
 8009242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009244:	079d      	lsls	r5, r3, #30
 8009246:	4606      	mov	r6, r0
 8009248:	460c      	mov	r4, r1
 800924a:	d507      	bpl.n	800925c <__smakebuf_r+0x1c>
 800924c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	6123      	str	r3, [r4, #16]
 8009254:	2301      	movs	r3, #1
 8009256:	6163      	str	r3, [r4, #20]
 8009258:	b002      	add	sp, #8
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	ab01      	add	r3, sp, #4
 800925e:	466a      	mov	r2, sp
 8009260:	f7ff ffca 	bl	80091f8 <__swhatbuf_r>
 8009264:	9900      	ldr	r1, [sp, #0]
 8009266:	4605      	mov	r5, r0
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff f97f 	bl	800856c <_malloc_r>
 800926e:	b948      	cbnz	r0, 8009284 <__smakebuf_r+0x44>
 8009270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009274:	059a      	lsls	r2, r3, #22
 8009276:	d4ef      	bmi.n	8009258 <__smakebuf_r+0x18>
 8009278:	f023 0303 	bic.w	r3, r3, #3
 800927c:	f043 0302 	orr.w	r3, r3, #2
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	e7e3      	b.n	800924c <__smakebuf_r+0xc>
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <__smakebuf_r+0x7c>)
 8009286:	62b3      	str	r3, [r6, #40]	; 0x28
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	6163      	str	r3, [r4, #20]
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	6120      	str	r0, [r4, #16]
 800929a:	b15b      	cbz	r3, 80092b4 <__smakebuf_r+0x74>
 800929c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 f8d1 	bl	8009448 <_isatty_r>
 80092a6:	b128      	cbz	r0, 80092b4 <__smakebuf_r+0x74>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f023 0303 	bic.w	r3, r3, #3
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	89a0      	ldrh	r0, [r4, #12]
 80092b6:	4305      	orrs	r5, r0
 80092b8:	81a5      	strh	r5, [r4, #12]
 80092ba:	e7cd      	b.n	8009258 <__smakebuf_r+0x18>
 80092bc:	08009051 	.word	0x08009051

080092c0 <_malloc_usable_size_r>:
 80092c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c4:	1f18      	subs	r0, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfbc      	itt	lt
 80092ca:	580b      	ldrlt	r3, [r1, r0]
 80092cc:	18c0      	addlt	r0, r0, r3
 80092ce:	4770      	bx	lr

080092d0 <_raise_r>:
 80092d0:	291f      	cmp	r1, #31
 80092d2:	b538      	push	{r3, r4, r5, lr}
 80092d4:	4604      	mov	r4, r0
 80092d6:	460d      	mov	r5, r1
 80092d8:	d904      	bls.n	80092e4 <_raise_r+0x14>
 80092da:	2316      	movs	r3, #22
 80092dc:	6003      	str	r3, [r0, #0]
 80092de:	f04f 30ff 	mov.w	r0, #4294967295
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092e6:	b112      	cbz	r2, 80092ee <_raise_r+0x1e>
 80092e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092ec:	b94b      	cbnz	r3, 8009302 <_raise_r+0x32>
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 f830 	bl	8009354 <_getpid_r>
 80092f4:	462a      	mov	r2, r5
 80092f6:	4601      	mov	r1, r0
 80092f8:	4620      	mov	r0, r4
 80092fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fe:	f000 b817 	b.w	8009330 <_kill_r>
 8009302:	2b01      	cmp	r3, #1
 8009304:	d00a      	beq.n	800931c <_raise_r+0x4c>
 8009306:	1c59      	adds	r1, r3, #1
 8009308:	d103      	bne.n	8009312 <_raise_r+0x42>
 800930a:	2316      	movs	r3, #22
 800930c:	6003      	str	r3, [r0, #0]
 800930e:	2001      	movs	r0, #1
 8009310:	e7e7      	b.n	80092e2 <_raise_r+0x12>
 8009312:	2400      	movs	r4, #0
 8009314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009318:	4628      	mov	r0, r5
 800931a:	4798      	blx	r3
 800931c:	2000      	movs	r0, #0
 800931e:	e7e0      	b.n	80092e2 <_raise_r+0x12>

08009320 <raise>:
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <raise+0xc>)
 8009322:	4601      	mov	r1, r0
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	f7ff bfd3 	b.w	80092d0 <_raise_r>
 800932a:	bf00      	nop
 800932c:	2000000c 	.word	0x2000000c

08009330 <_kill_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d07      	ldr	r5, [pc, #28]	; (8009350 <_kill_r+0x20>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	f7f8 fa11 	bl	8001764 <_kill>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	d102      	bne.n	800934c <_kill_r+0x1c>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b103      	cbz	r3, 800934c <_kill_r+0x1c>
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200006d4 	.word	0x200006d4

08009354 <_getpid_r>:
 8009354:	f7f8 b9fe 	b.w	8001754 <_getpid>

08009358 <__sread>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009360:	f000 f894 	bl	800948c <_read_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	bfab      	itete	ge
 8009368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800936a:	89a3      	ldrhlt	r3, [r4, #12]
 800936c:	181b      	addge	r3, r3, r0
 800936e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009372:	bfac      	ite	ge
 8009374:	6563      	strge	r3, [r4, #84]	; 0x54
 8009376:	81a3      	strhlt	r3, [r4, #12]
 8009378:	bd10      	pop	{r4, pc}

0800937a <__swrite>:
 800937a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937e:	461f      	mov	r7, r3
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	05db      	lsls	r3, r3, #23
 8009384:	4605      	mov	r5, r0
 8009386:	460c      	mov	r4, r1
 8009388:	4616      	mov	r6, r2
 800938a:	d505      	bpl.n	8009398 <__swrite+0x1e>
 800938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009390:	2302      	movs	r3, #2
 8009392:	2200      	movs	r2, #0
 8009394:	f000 f868 	bl	8009468 <_lseek_r>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	4632      	mov	r2, r6
 80093a6:	463b      	mov	r3, r7
 80093a8:	4628      	mov	r0, r5
 80093aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	f000 b817 	b.w	80093e0 <_write_r>

080093b2 <__sseek>:
 80093b2:	b510      	push	{r4, lr}
 80093b4:	460c      	mov	r4, r1
 80093b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ba:	f000 f855 	bl	8009468 <_lseek_r>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	bf15      	itete	ne
 80093c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80093c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093ce:	81a3      	strheq	r3, [r4, #12]
 80093d0:	bf18      	it	ne
 80093d2:	81a3      	strhne	r3, [r4, #12]
 80093d4:	bd10      	pop	{r4, pc}

080093d6 <__sclose>:
 80093d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093da:	f000 b813 	b.w	8009404 <_close_r>
	...

080093e0 <_write_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d07      	ldr	r5, [pc, #28]	; (8009400 <_write_r+0x20>)
 80093e4:	4604      	mov	r4, r0
 80093e6:	4608      	mov	r0, r1
 80093e8:	4611      	mov	r1, r2
 80093ea:	2200      	movs	r2, #0
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	f7f8 f9ef 	bl	80017d2 <_write>
 80093f4:	1c43      	adds	r3, r0, #1
 80093f6:	d102      	bne.n	80093fe <_write_r+0x1e>
 80093f8:	682b      	ldr	r3, [r5, #0]
 80093fa:	b103      	cbz	r3, 80093fe <_write_r+0x1e>
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	200006d4 	.word	0x200006d4

08009404 <_close_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d06      	ldr	r5, [pc, #24]	; (8009420 <_close_r+0x1c>)
 8009408:	2300      	movs	r3, #0
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	f7f8 f9fb 	bl	800180a <_close>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_close_r+0x1a>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_close_r+0x1a>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	200006d4 	.word	0x200006d4

08009424 <_fstat_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d07      	ldr	r5, [pc, #28]	; (8009444 <_fstat_r+0x20>)
 8009428:	2300      	movs	r3, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	4611      	mov	r1, r2
 8009430:	602b      	str	r3, [r5, #0]
 8009432:	f7f8 f9f6 	bl	8001822 <_fstat>
 8009436:	1c43      	adds	r3, r0, #1
 8009438:	d102      	bne.n	8009440 <_fstat_r+0x1c>
 800943a:	682b      	ldr	r3, [r5, #0]
 800943c:	b103      	cbz	r3, 8009440 <_fstat_r+0x1c>
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	bd38      	pop	{r3, r4, r5, pc}
 8009442:	bf00      	nop
 8009444:	200006d4 	.word	0x200006d4

08009448 <_isatty_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d06      	ldr	r5, [pc, #24]	; (8009464 <_isatty_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7f8 f9f5 	bl	8001842 <_isatty>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_isatty_r+0x1a>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_isatty_r+0x1a>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	200006d4 	.word	0x200006d4

08009468 <_lseek_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	; (8009488 <_lseek_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f8 f9ee 	bl	8001858 <_lseek>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_lseek_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_lseek_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	200006d4 	.word	0x200006d4

0800948c <_read_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	; (80094ac <_read_r+0x20>)
 8009490:	4604      	mov	r4, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	602a      	str	r2, [r5, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f8 f97c 	bl	8001798 <_read>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_read_r+0x1e>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_read_r+0x1e>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	200006d4 	.word	0x200006d4

080094b0 <_init>:
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	bf00      	nop
 80094b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b6:	bc08      	pop	{r3}
 80094b8:	469e      	mov	lr, r3
 80094ba:	4770      	bx	lr

080094bc <_fini>:
 80094bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094be:	bf00      	nop
 80094c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c2:	bc08      	pop	{r3}
 80094c4:	469e      	mov	lr, r3
 80094c6:	4770      	bx	lr
