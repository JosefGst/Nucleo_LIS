
LIS_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  08009d80  08009d80  00019d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a294  0800a294  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a294  0800a294  0001a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a29c  0800a29c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a29c  0800a29c  0001a29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a2a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  200001e0  0800a484  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  0800a484  000207bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019218  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b97  00000000  00000000  00039428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0003d470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a4b  00000000  00000000  0003e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001464c  00000000  00000000  00067263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f846c  00000000  00000000  0007b8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173d1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dac  00000000  00000000  00173d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d68 	.word	0x08009d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009d68 	.word	0x08009d68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff0:	f000 fbdc 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff4:	f000 f83e 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 f958 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffc:	f000 f938 	bl	8001270 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001000:	f000 f906 	bl	8001210 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001004:	f000 f89e 	bl	8001144 <MX_I2C1_Init>
  MX_TIM16_Init();
 8001008:	f000 f8da 	bl	80011c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  lis2dh12_Init();
 800100c:	f003 ff82 	bl	8004f14 <lis2dh12_Init>


  HAL_TIM_Base_Start(&htim16);
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <main+0x7c>)
 8001012:	f003 fa3d 	bl	8004490 <HAL_TIM_Base_Start>
  {

	  //timer_val = __HAL_TIM_GET_COUNTER(&htim16);


	  p_to_data = lis2dh12_read_data_polling();
 8001016:	f003 ffbf 	bl	8004f98 <lis2dh12_read_data_polling>
 800101a:	4603      	mov	r3, r0
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <main+0x80>)
 800101e:	6013      	str	r3, [r2, #0]
	  accel_val[0] = *(p_to_data + 0);
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <main+0x80>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102c:	ee17 3a90 	vmov	r3, s15
 8001030:	b21a      	sxth	r2, r3
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <main+0x84>)
 8001034:	801a      	strh	r2, [r3, #0]
	  accel_val[1] = *(p_to_data + 1);
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <main+0x80>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3304      	adds	r3, #4
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001044:	ee17 3a90 	vmov	r3, s15
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <main+0x84>)
 800104c:	805a      	strh	r2, [r3, #2]
	  accel_val[2] = *(p_to_data + 2);
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <main+0x80>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3308      	adds	r3, #8
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105c:	ee17 3a90 	vmov	r3, s15
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b03      	ldr	r3, [pc, #12]	; (8001070 <main+0x84>)
 8001064:	809a      	strh	r2, [r3, #4]
	  p_to_data = lis2dh12_read_data_polling();
 8001066:	e7d6      	b.n	8001016 <main+0x2a>
 8001068:	2000075c 	.word	0x2000075c
 800106c:	2000061c 	.word	0x2000061c
 8001070:	20000614 	.word	0x20000614

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0b8      	sub	sp, #224	; 0xe0
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800107e:	2244      	movs	r2, #68	; 0x44
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 fa44 	bl	8005510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2288      	movs	r2, #136	; 0x88
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 fa36 	bl	8005510 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010a4:	2310      	movs	r3, #16
 80010a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010b6:	2360      	movs	r3, #96	; 0x60
 80010b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fee2 	bl	8002e90 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80010d2:	f000 f90f 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 faae 	bl	800365c <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001106:	f000 f8f5 	bl	80012f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800110a:	2342      	movs	r3, #66	; 0x42
 800110c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800110e:	2300      	movs	r3, #0
 8001110:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001112:	2300      	movs	r3, #0
 8001114:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	4618      	mov	r0, r3
 800111a:	f002 fca5 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001124:	f000 f8e6 	bl	80012f4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001128:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112c:	f001 fe5a 	bl	8002de4 <HAL_PWREx_ControlVoltageScaling>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001136:	f000 f8dd 	bl	80012f4 <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	37e0      	adds	r7, #224	; 0xe0
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_I2C1_Init+0x74>)
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <MX_I2C1_Init+0x78>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800114e:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001150:	f640 6214 	movw	r2, #3604	; 0xe14
 8001154:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_I2C1_Init+0x74>)
 800115e:	2201      	movs	r2, #1
 8001160:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001182:	f001 f8af 	bl	80022e4 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f8b2 	bl	80012f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4809      	ldr	r0, [pc, #36]	; (80011b8 <MX_I2C1_Init+0x74>)
 8001194:	f001 fd80 	bl	8002c98 <HAL_I2CEx_ConfigAnalogFilter>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800119e:	f000 f8a9 	bl	80012f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_I2C1_Init+0x74>)
 80011a6:	f001 fdc2 	bl	8002d2e <HAL_I2CEx_ConfigDigitalFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 f8a0 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000620 	.word	0x20000620
 80011bc:	40005400 	.word	0x40005400

080011c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_TIM16_Init+0x48>)
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <MX_TIM16_Init+0x4c>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4000-1;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_TIM16_Init+0x48>)
 80011cc:	f640 729f 	movw	r2, #3999	; 0xf9f
 80011d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_TIM16_Init+0x48>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_TIM16_Init+0x48>)
 80011da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_TIM16_Init+0x48>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_TIM16_Init+0x48>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_TIM16_Init+0x48>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM16_Init+0x48>)
 80011f4:	f003 f8f4 	bl	80043e0 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80011fe:	f000 f879 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000075c 	.word	0x2000075c
 800120c:	40014400 	.word	0x40014400

08001210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <MX_USART2_UART_Init+0x5c>)
 8001218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001254:	f003 fa1e 	bl	8004694 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800125e:	f000 f849 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200006d8 	.word	0x200006d8
 800126c:	40004400 	.word	0x40004400

08001270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_DMA_Init+0x38>)
 8001278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <MX_DMA_Init+0x38>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6493      	str	r3, [r2, #72]	; 0x48
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_DMA_Init+0x38>)
 8001284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2011      	movs	r0, #17
 8001294:	f000 fc05 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001298:	2011      	movs	r0, #17
 800129a:	f000 fc1e 	bl	8001ada <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_GPIO_Init+0x44>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <MX_GPIO_Init+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_GPIO_Init+0x44>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_GPIO_Init+0x44>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <MX_GPIO_Init+0x44>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_GPIO_Init+0x44>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x44>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_MspInit+0x44>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6613      	str	r3, [r2, #96]	; 0x60
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_MspInit+0x44>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x44>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_MspInit+0x44>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_MspInit+0x44>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_I2C_MspInit+0x7c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d127      	bne.n	80013ba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <HAL_I2C_MspInit+0x80>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <HAL_I2C_MspInit+0x80>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_I2C_MspInit+0x80>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001392:	2304      	movs	r3, #4
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <HAL_I2C_MspInit+0x84>)
 800139e:	f000 fdf7 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_I2C_MspInit+0x80>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_I2C_MspInit+0x80>)
 80013a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_I2C_MspInit+0x80>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40005400 	.word	0x40005400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_TIM_Base_MspInit+0x38>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ec:	6613      	str	r3, [r2, #96]	; 0x60
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40014400 	.word	0x40014400
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <HAL_UART_MspInit+0xd0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d151      	bne.n	80014d6 <HAL_UART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_UART_MspInit+0xd4>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	4a2b      	ldr	r2, [pc, #172]	; (80014e4 <HAL_UART_MspInit+0xd4>)
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	6593      	str	r3, [r2, #88]	; 0x58
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_UART_MspInit+0xd4>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_UART_MspInit+0xd4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <HAL_UART_MspInit+0xd4>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_UART_MspInit+0xd4>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001462:	230c      	movs	r3, #12
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001472:	2307      	movs	r3, #7
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f000 fd86 	bl	8001f90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 8001486:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_UART_MspInit+0xdc>)
 8001488:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 800148c:	2202      	movs	r2, #2
 800148e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 8001492:	2210      	movs	r2, #16
 8001494:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 80014bc:	f000 fb28 	bl	8001b10 <HAL_DMA_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 80014c6:	f7ff ff15 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 80014ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_UART_MspInit+0xd8>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40004400 	.word	0x40004400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	2000068c 	.word	0x2000068c
 80014ec:	40020080 	.word	0x40020080

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 f98e 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <DMA1_Channel7_IRQHandler+0x10>)
 8001552:	f000 fbf5 	bl	8001d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000068c 	.word	0x2000068c

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800157a:	f003 ff9f 	bl	80054bc <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
	return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015a2:	e7fe      	b.n	80015a2 <_exit+0x12>

080015a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e00a      	b.n	80015cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b6:	f3af 8000 	nop.w
 80015ba:	4601      	mov	r1, r0
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf0      	blt.n	80015b6 <_read+0x12>
	}

return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e009      	b.n	8001604 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60ba      	str	r2, [r7, #8]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	dbf1      	blt.n	80015f0 <_write+0x12>
	}
	return len;
 800160c:	687b      	ldr	r3, [r7, #4]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_close>:

int _close(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	605a      	str	r2, [r3, #4]
	return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <_isatty>:

int _isatty(int file)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
	return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
	return 0;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	; (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f003 ff04 	bl	80054bc <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20018000 	.word	0x20018000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	200001fc 	.word	0x200001fc
 80016e8:	200007c0 	.word	0x200007c0

080016ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <SystemInit+0x64>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <SystemInit+0x64>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <SystemInit+0x68>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a13      	ldr	r2, [pc, #76]	; (8001754 <SystemInit+0x68>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <SystemInit+0x68>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <SystemInit+0x68>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <SystemInit+0x68>)
 8001718:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800171c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001720:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <SystemInit+0x68>)
 8001724:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001728:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <SystemInit+0x68>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <SystemInit+0x68>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <SystemInit+0x68>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SystemInit+0x64>)
 800173e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001742:	609a      	str	r2, [r3, #8]
#endif
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	40021000 	.word	0x40021000

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800175c:	f7ff ffc6 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001760:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001762:	e003      	b.n	800176c <LoopCopyDataInit>

08001764 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001766:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001768:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800176a:	3104      	adds	r1, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <LoopForever+0xa>)
	ldr	r3, =_edata
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001770:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001772:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001774:	d3f6      	bcc.n	8001764 <CopyDataInit>
	ldr	r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001778:	e002      	b.n	8001780 <LoopFillZerobss>

0800177a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800177a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800177c:	f842 3b04 	str.w	r3, [r2], #4

08001780 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LoopForever+0x16>)
	cmp	r2, r3
 8001782:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001784:	d3f9      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f003 fe9f 	bl	80054c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fc2f 	bl	8000fec <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001790:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001794:	0800a2a4 	.word	0x0800a2a4
	ldr	r0, =_sdata
 8001798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800179c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80017a0:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80017a4:	200007bc 	.word	0x200007bc

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_Init+0x3c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_Init+0x3c>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c2:	2003      	movs	r0, #3
 80017c4:	f000 f962 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f80f 	bl	80017ec <HAL_InitTick>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	e001      	b.n	80017de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017da:	f7ff fd91 	bl	8001300 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017de:	79fb      	ldrb	r3, [r7, #7]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40022000 	.word	0x40022000

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_InitTick+0x6c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d023      	beq.n	8001848 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_InitTick+0x70>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <HAL_InitTick+0x6c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f96d 	bl	8001af6 <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d809      	bhi.n	800183c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f000 f937 	bl	8001aa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001834:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <HAL_InitTick+0x74>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e007      	b.n	800184c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e004      	b.n	800184c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e001      	b.n	800184c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000008 	.word	0x20000008
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008
 8001888:	200007a8 	.word	0x200007a8

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200007a8 	.word	0x200007a8

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff3e 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff31 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e098      	b.n	8001c54 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b4d      	ldr	r3, [pc, #308]	; (8001c60 <HAL_DMA_Init+0x150>)
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d80f      	bhi.n	8001b4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_DMA_Init+0x154>)
 8001b36:	4413      	add	r3, r2
 8001b38:	4a4b      	ldr	r2, [pc, #300]	; (8001c68 <HAL_DMA_Init+0x158>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	009a      	lsls	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a48      	ldr	r2, [pc, #288]	; (8001c6c <HAL_DMA_Init+0x15c>)
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4c:	e00e      	b.n	8001b6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_DMA_Init+0x160>)
 8001b56:	4413      	add	r3, r2
 8001b58:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <HAL_DMA_Init+0x158>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	009a      	lsls	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_DMA_Init+0x164>)
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bc6:	d039      	beq.n	8001c3c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <HAL_DMA_Init+0x15c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11a      	bne.n	8001c08 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_DMA_Init+0x168>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f003 031c 	and.w	r3, r3, #28
 8001bde:	210f      	movs	r1, #15
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4924      	ldr	r1, [pc, #144]	; (8001c78 <HAL_DMA_Init+0x168>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_DMA_Init+0x168>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	f003 031c 	and.w	r3, r3, #28
 8001bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001c00:	491d      	ldr	r1, [pc, #116]	; (8001c78 <HAL_DMA_Init+0x168>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
 8001c06:	e019      	b.n	8001c3c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_DMA_Init+0x16c>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f003 031c 	and.w	r3, r3, #28
 8001c14:	210f      	movs	r1, #15
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4917      	ldr	r1, [pc, #92]	; (8001c7c <HAL_DMA_Init+0x16c>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_DMA_Init+0x16c>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6859      	ldr	r1, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f003 031c 	and.w	r3, r3, #28
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	4911      	ldr	r1, [pc, #68]	; (8001c7c <HAL_DMA_Init+0x16c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40020407 	.word	0x40020407
 8001c64:	bffdfff8 	.word	0xbffdfff8
 8001c68:	cccccccd 	.word	0xcccccccd
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	bffdfbf8 	.word	0xbffdfbf8
 8001c74:	40020400 	.word	0x40020400
 8001c78:	400200a8 	.word	0x400200a8
 8001c7c:	400204a8 	.word	0x400204a8

08001c80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_DMA_Start_IT+0x20>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e04b      	b.n	8001d38 <HAL_DMA_Start_IT+0xb8>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d13a      	bne.n	8001d2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f929 	bl	8001f30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 020e 	orr.w	r2, r2, #14
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e00f      	b.n	8001d18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0204 	bic.w	r2, r2, #4
 8001d06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 020a 	orr.w	r2, r2, #10
 8001d16:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e005      	b.n	8001d36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
 8001d34:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	f003 031c 	and.w	r3, r3, #28
 8001d60:	2204      	movs	r2, #4
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d026      	beq.n	8001dba <HAL_DMA_IRQHandler+0x7a>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d021      	beq.n	8001dba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0204 	bic.w	r2, r2, #4
 8001d92:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	f003 021c 	and.w	r2, r3, #28
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	2104      	movs	r1, #4
 8001da2:	fa01 f202 	lsl.w	r2, r1, r2
 8001da6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d071      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001db8:	e06c      	b.n	8001e94 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f003 031c 	and.w	r3, r3, #28
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02e      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xec>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d029      	beq.n	8001e2c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10b      	bne.n	8001dfe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 020a 	bic.w	r2, r2, #10
 8001df4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f003 021c 	and.w	r2, r3, #28
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d038      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e2a:	e033      	b.n	8001e94 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f003 031c 	and.w	r3, r3, #28
 8001e34:	2208      	movs	r2, #8
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d02a      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x156>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d025      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 020e 	bic.w	r2, r2, #14
 8001e58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f003 021c 	and.w	r2, r3, #28
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f202 	lsl.w	r2, r1, r2
 8001e6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
}
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_DMA_RegisterCallback+0x20>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e031      	b.n	8001f24 <HAL_DMA_RegisterCallback+0x84>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d120      	bne.n	8001f16 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8001ed4:	7afb      	ldrb	r3, [r7, #11]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d81a      	bhi.n	8001f10 <HAL_DMA_RegisterCallback+0x70>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <HAL_DMA_RegisterCallback+0x40>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001ef9 	.word	0x08001ef9
 8001ee8:	08001f01 	.word	0x08001f01
 8001eec:	08001f09 	.word	0x08001f09
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 8001ef6:	e010      	b.n	8001f1a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 8001efe:	e00c      	b.n	8001f1a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 8001f06:	e008      	b.n	8001f1a <HAL_DMA_RegisterCallback+0x7a>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 8001f0e:	e004      	b.n	8001f1a <HAL_DMA_RegisterCallback+0x7a>

     default:
           status = HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	75fb      	strb	r3, [r7, #23]
           break;
 8001f14:	e001      	b.n	8001f1a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 021c 	and.w	r2, r3, #28
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d108      	bne.n	8001f74 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f72:	e007      	b.n	8001f84 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9e:	e17f      	b.n	80022a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8171 	beq.w	800229a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_GPIO_Init+0x48>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b12      	cmp	r3, #18
 8001fd6:	d130      	bne.n	800203a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800200e:	2201      	movs	r2, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 0201 	and.w	r2, r3, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b03      	cmp	r3, #3
 8002044:	d118      	bne.n	8002078 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800204c:	2201      	movs	r2, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	08db      	lsrs	r3, r3, #3
 8002062:	f003 0201 	and.w	r2, r3, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x128>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b12      	cmp	r3, #18
 80020b6:	d123      	bne.n	8002100 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	6939      	ldr	r1, [r7, #16]
 80020fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0203 	and.w	r2, r3, #3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80ac 	beq.w	800229a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	4b5f      	ldr	r3, [pc, #380]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6613      	str	r3, [r2, #96]	; 0x60
 800214e:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800215a:	4a5a      	ldr	r2, [pc, #360]	; (80022c4 <HAL_GPIO_Init+0x334>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x242>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4f      	ldr	r2, [pc, #316]	; (80022c8 <HAL_GPIO_Init+0x338>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x23e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4e      	ldr	r2, [pc, #312]	; (80022cc <HAL_GPIO_Init+0x33c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x23a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <HAL_GPIO_Init+0x340>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x236>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_GPIO_Init+0x344>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x232>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <HAL_GPIO_Init+0x348>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x22e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <HAL_GPIO_Init+0x34c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x22a>
 80021b6:	2306      	movs	r3, #6
 80021b8:	e00c      	b.n	80021d4 <HAL_GPIO_Init+0x244>
 80021ba:	2307      	movs	r3, #7
 80021bc:	e00a      	b.n	80021d4 <HAL_GPIO_Init+0x244>
 80021be:	2305      	movs	r3, #5
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_Init+0x244>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_Init+0x244>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_Init+0x244>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_Init+0x244>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_Init+0x244>
 80021d2:	2300      	movs	r3, #0
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e4:	4937      	ldr	r1, [pc, #220]	; (80022c4 <HAL_GPIO_Init+0x334>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021f2:	4b3b      	ldr	r3, [pc, #236]	; (80022e0 <HAL_GPIO_Init+0x350>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002216:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_GPIO_Init+0x350>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	43db      	mvns	r3, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002240:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800226a:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_GPIO_Init+0x350>)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43db      	mvns	r3, r3
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002294:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <HAL_GPIO_Init+0x350>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f47f ae78 	bne.w	8001fa0 <HAL_GPIO_Init+0x10>
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010000 	.word	0x40010000
 80022c8:	48000400 	.word	0x48000400
 80022cc:	48000800 	.word	0x48000800
 80022d0:	48000c00 	.word	0x48000c00
 80022d4:	48001000 	.word	0x48001000
 80022d8:	48001400 	.word	0x48001400
 80022dc:	48001800 	.word	0x48001800
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e081      	b.n	80023fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff f81c 	bl	8001348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002334:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002344:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	e006      	b.n	800236c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800236a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d104      	bne.n	800237e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800237c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800238c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	ea42 0103 	orr.w	r1, r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	021a      	lsls	r2, r3, #8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69d9      	ldr	r1, [r3, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	817b      	strh	r3, [r7, #10]
 8002416:	460b      	mov	r3, r1
 8002418:	813b      	strh	r3, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	f040 80f9 	bne.w	800261e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_I2C_Mem_Write+0x34>
 8002432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0ed      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_I2C_Mem_Write+0x4e>
 800244e:	2302      	movs	r3, #2
 8002450:	e0e6      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800245a:	f7ff fa17 	bl	800188c <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2319      	movs	r3, #25
 8002466:	2201      	movs	r2, #1
 8002468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fac3 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d1      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2221      	movs	r2, #33	; 0x21
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024a4:	88f8      	ldrh	r0, [r7, #6]
 80024a6:	893a      	ldrh	r2, [r7, #8]
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4603      	mov	r3, r0
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f9d3 	bl	8002860 <I2C_RequestMemoryWrite>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0a9      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2bff      	cmp	r3, #255	; 0xff
 80024d4:	d90e      	bls.n	80024f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	22ff      	movs	r2, #255	; 0xff
 80024da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	8979      	ldrh	r1, [r7, #10]
 80024e4:	2300      	movs	r3, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fba5 	bl	8002c3c <I2C_TransferConfig>
 80024f2:	e00f      	b.n	8002514 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	b2da      	uxtb	r2, r3
 8002504:	8979      	ldrh	r1, [r7, #10]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fb94 	bl	8002c3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 faad 	bl	8002a78 <I2C_WaitOnTXISFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e07b      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d034      	beq.n	80025cc <HAL_I2C_Mem_Write+0x1c8>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d130      	bne.n	80025cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fa3f 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e04d      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	2bff      	cmp	r3, #255	; 0xff
 800258c:	d90e      	bls.n	80025ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	22ff      	movs	r2, #255	; 0xff
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	b2da      	uxtb	r2, r3
 800259a:	8979      	ldrh	r1, [r7, #10]
 800259c:	2300      	movs	r3, #0
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fb49 	bl	8002c3c <I2C_TransferConfig>
 80025aa:	e00f      	b.n	80025cc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	8979      	ldrh	r1, [r7, #10]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fb38 	bl	8002c3c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d19e      	bne.n	8002514 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fa8c 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e01a      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2220      	movs	r2, #32
 80025f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_I2C_Mem_Write+0x224>)
 80025fe:	400b      	ands	r3, r1
 8002600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	f040 80fd 	bne.w	800284e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_I2C_Mem_Read+0x34>
 800265a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0f1      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2C_Mem_Read+0x4e>
 8002676:	2302      	movs	r3, #2
 8002678:	e0ea      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002682:	f7ff f903 	bl	800188c <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2319      	movs	r3, #25
 800268e:	2201      	movs	r2, #1
 8002690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f9af 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d5      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2222      	movs	r2, #34	; 0x22
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026cc:	88f8      	ldrh	r0, [r7, #6]
 80026ce:	893a      	ldrh	r2, [r7, #8]
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4603      	mov	r3, r0
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f913 	bl	8002908 <I2C_RequestMemoryRead>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ad      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2bff      	cmp	r3, #255	; 0xff
 80026fc:	d90e      	bls.n	800271c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	22ff      	movs	r2, #255	; 0xff
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	4b52      	ldr	r3, [pc, #328]	; (8002858 <HAL_I2C_Mem_Read+0x22c>)
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fa91 	bl	8002c3c <I2C_TransferConfig>
 800271a:	e00f      	b.n	800273c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	b2da      	uxtb	r2, r3
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_I2C_Mem_Read+0x22c>)
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fa80 	bl	8002c3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	2200      	movs	r2, #0
 8002744:	2104      	movs	r1, #4
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f956 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07c      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d034      	beq.n	80027fc <HAL_I2C_Mem_Read+0x1d0>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d130      	bne.n	80027fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	2200      	movs	r2, #0
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f927 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e04d      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2bff      	cmp	r3, #255	; 0xff
 80027bc:	d90e      	bls.n	80027dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	22ff      	movs	r2, #255	; 0xff
 80027c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	8979      	ldrh	r1, [r7, #10]
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fa31 	bl	8002c3c <I2C_TransferConfig>
 80027da:	e00f      	b.n	80027fc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fa20 	bl	8002c3c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d19a      	bne.n	800273c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f974 	bl	8002af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e01a      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2220      	movs	r2, #32
 8002820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_I2C_Mem_Read+0x230>)
 800282e:	400b      	ands	r3, r1
 8002830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	80002400 	.word	0x80002400
 800285c:	fe00e800 	.word	0xfe00e800

08002860 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	461a      	mov	r2, r3
 800286e:	4603      	mov	r3, r0
 8002870:	817b      	strh	r3, [r7, #10]
 8002872:	460b      	mov	r3, r1
 8002874:	813b      	strh	r3, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	8979      	ldrh	r1, [r7, #10]
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <I2C_RequestMemoryWrite+0xa4>)
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f9d7 	bl	8002c3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	69b9      	ldr	r1, [r7, #24]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f8f0 	bl	8002a78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e02c      	b.n	80028fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028a8:	893b      	ldrh	r3, [r7, #8]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28
 80028b2:	e015      	b.n	80028e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028b4:	893b      	ldrh	r3, [r7, #8]
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	69b9      	ldr	r1, [r7, #24]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f8d6 	bl	8002a78 <I2C_WaitOnTXISFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e012      	b.n	80028fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2180      	movs	r1, #128	; 0x80
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f884 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	80002000 	.word	0x80002000

08002908 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	4608      	mov	r0, r1
 8002912:	4611      	mov	r1, r2
 8002914:	461a      	mov	r2, r3
 8002916:	4603      	mov	r3, r0
 8002918:	817b      	strh	r3, [r7, #10]
 800291a:	460b      	mov	r3, r1
 800291c:	813b      	strh	r3, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	4b20      	ldr	r3, [pc, #128]	; (80029ac <I2C_RequestMemoryRead+0xa4>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2300      	movs	r3, #0
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f984 	bl	8002c3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	69b9      	ldr	r1, [r7, #24]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f89d 	bl	8002a78 <I2C_WaitOnTXISFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e02c      	b.n	80029a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d105      	bne.n	800295a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800294e:	893b      	ldrh	r3, [r7, #8]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
 8002958:	e015      	b.n	8002986 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800295a:	893b      	ldrh	r3, [r7, #8]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	b29b      	uxth	r3, r3
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f883 	bl	8002a78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e012      	b.n	80029a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800297c:	893b      	ldrh	r3, [r7, #8]
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2200      	movs	r2, #0
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f831 	bl	80029f8 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	80002000 	.word	0x80002000

080029b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d103      	bne.n	80029ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d007      	beq.n	80029ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	619a      	str	r2, [r3, #24]
  }
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a08:	e022      	b.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d01e      	beq.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe ff3b 	bl	800188c <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d113      	bne.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e00f      	b.n	8002a70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d0cd      	beq.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a84:	e02c      	b.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f870 	bl	8002b70 <I2C_IsAcknowledgeFailed>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e02a      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d01e      	beq.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7fe fef3 	bl	800188c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d113      	bne.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d1cb      	bne.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b04:	e028      	b.n	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f830 	bl	8002b70 <I2C_IsAcknowledgeFailed>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e026      	b.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1a:	f7fe feb7 	bl	800188c <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d302      	bcc.n	8002b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d113      	bne.n	8002b58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d1cf      	bne.n	8002b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d151      	bne.n	8002c2e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b8a:	e022      	b.n	8002bd2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b92:	d01e      	beq.n	8002bd2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b94:	f7fe fe7a 	bl	800188c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d302      	bcc.n	8002baa <I2C_IsAcknowledgeFailed+0x3a>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d113      	bne.n	8002bd2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f043 0220 	orr.w	r2, r3, #32
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e02e      	b.n	8002c30 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d1d5      	bne.n	8002b8c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2220      	movs	r2, #32
 8002bee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f7ff fedd 	bl	80029b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <I2C_IsAcknowledgeFailed+0xc8>)
 8002c02:	400b      	ands	r3, r1
 8002c04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f043 0204 	orr.w	r2, r3, #4
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	fe00e800 	.word	0xfe00e800

08002c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	817b      	strh	r3, [r7, #10]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	0d5b      	lsrs	r3, r3, #21
 8002c58:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <I2C_TransferConfig+0x58>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	43db      	mvns	r3, r3
 8002c62:	ea02 0103 	and.w	r1, r2, r3
 8002c66:	897b      	ldrh	r3, [r7, #10]
 8002c68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c6c:	7a7b      	ldrb	r3, [r7, #9]
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	03ff63ff 	.word	0x03ff63ff

08002c98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d138      	bne.n	8002d20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e032      	b.n	8002d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d139      	bne.n	8002db8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e033      	b.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	; 0x24
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e000      	b.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002db8:	2302      	movs	r3, #2
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40007000 	.word	0x40007000

08002de4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df2:	d130      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df4:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e00:	d038      	beq.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2232      	movs	r2, #50	; 0x32
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0c9b      	lsrs	r3, r3, #18
 8002e24:	3301      	adds	r3, #1
 8002e26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e28:	e002      	b.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d102      	bne.n	8002e44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f2      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d110      	bne.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d007      	beq.n	8002e74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e6c:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40007000 	.word	0x40007000
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e3d4      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea2:	4ba1      	ldr	r3, [pc, #644]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eac:	4b9e      	ldr	r3, [pc, #632]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80e4 	beq.w	800308c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <HAL_RCC_OscConfig+0x4a>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	f040 808b 	bne.w	8002fe8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f040 8087 	bne.w	8002fe8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eda:	4b93      	ldr	r3, [pc, #588]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e3ac      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_RCC_OscConfig+0x7c>
 8002f02:	4b89      	ldr	r3, [pc, #548]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0a:	e005      	b.n	8002f18 <HAL_RCC_OscConfig+0x88>
 8002f0c:	4b86      	ldr	r3, [pc, #536]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d223      	bcs.n	8002f64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fd41 	bl	80039a8 <RCC_SetFlashLatencyFromMSIRange>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e38d      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f30:	4b7d      	ldr	r3, [pc, #500]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a7c      	ldr	r2, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f36:	f043 0308 	orr.w	r3, r3, #8
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	4b7a      	ldr	r3, [pc, #488]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4977      	ldr	r1, [pc, #476]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	4972      	ldr	r1, [pc, #456]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]
 8002f62:	e025      	b.n	8002fb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f64:	4b70      	ldr	r3, [pc, #448]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6f      	ldr	r2, [pc, #444]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f6a:	f043 0308 	orr.w	r3, r3, #8
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	496a      	ldr	r1, [pc, #424]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f82:	4b69      	ldr	r3, [pc, #420]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	4965      	ldr	r1, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fd01 	bl	80039a8 <RCC_SetFlashLatencyFromMSIRange>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e34d      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fb0:	f000 fc36 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b5c      	ldr	r3, [pc, #368]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	495a      	ldr	r1, [pc, #360]	; (800312c <HAL_RCC_OscConfig+0x29c>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	4a58      	ldr	r2, [pc, #352]	; (8003130 <HAL_RCC_OscConfig+0x2a0>)
 8002fce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fd0:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_RCC_OscConfig+0x2a4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fc09 	bl	80017ec <HAL_InitTick>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d052      	beq.n	800308a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	e331      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d032      	beq.n	8003056 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ff0:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a4c      	ldr	r2, [pc, #304]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fc46 	bl	800188c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003004:	f7fe fc42 	bl	800188c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e31a      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003016:	4b44      	ldr	r3, [pc, #272]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003022:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a40      	ldr	r2, [pc, #256]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003028:	f043 0308 	orr.w	r3, r3, #8
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	493b      	ldr	r1, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800303c:	4313      	orrs	r3, r2
 800303e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003040:	4b39      	ldr	r3, [pc, #228]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	4936      	ldr	r1, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003050:	4313      	orrs	r3, r2
 8003052:	604b      	str	r3, [r1, #4]
 8003054:	e01a      	b.n	800308c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a33      	ldr	r2, [pc, #204]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003062:	f7fe fc13 	bl	800188c <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800306a:	f7fe fc0f 	bl	800188c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e2e7      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x1da>
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800308a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	d074      	beq.n	8003182 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b08      	cmp	r3, #8
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x21a>
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d10e      	bne.n	80030c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d064      	beq.n	8003180 <HAL_RCC_OscConfig+0x2f0>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d160      	bne.n	8003180 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e2c4      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x24a>
 80030cc:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e01d      	b.n	8003116 <HAL_RCC_OscConfig+0x286>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e2:	d10c      	bne.n	80030fe <HAL_RCC_OscConfig+0x26e>
 80030e4:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e00b      	b.n	8003116 <HAL_RCC_OscConfig+0x286>
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a06      	ldr	r2, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x298>)
 8003110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01c      	beq.n	8003158 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311e:	f7fe fbb5 	bl	800188c <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003124:	e011      	b.n	800314a <HAL_RCC_OscConfig+0x2ba>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	08009d94 	.word	0x08009d94
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe fba8 	bl	800188c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e280      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	4baf      	ldr	r3, [pc, #700]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x2a8>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fb98 	bl	800188c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7fe fb94 	bl	800188c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e26c      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003172:	4ba5      	ldr	r3, [pc, #660]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x2d0>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d060      	beq.n	8003250 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_OscConfig+0x310>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d119      	bne.n	80031ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d116      	bne.n	80031ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a0:	4b99      	ldr	r3, [pc, #612]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_OscConfig+0x328>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e249      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b8:	4b93      	ldr	r3, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	061b      	lsls	r3, r3, #24
 80031c6:	4990      	ldr	r1, [pc, #576]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031cc:	e040      	b.n	8003250 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d023      	beq.n	800321e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d6:	4b8c      	ldr	r3, [pc, #560]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a8b      	ldr	r2, [pc, #556]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fe fb53 	bl	800188c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ea:	f7fe fb4f 	bl	800188c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e227      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fc:	4b82      	ldr	r3, [pc, #520]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b7f      	ldr	r3, [pc, #508]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	497c      	ldr	r1, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
 800321c:	e018      	b.n	8003250 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a79      	ldr	r2, [pc, #484]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fb2f 	bl	800188c <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe fb2b 	bl	800188c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e203      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003244:	4b70      	ldr	r3, [pc, #448]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d03c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01c      	beq.n	800329e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003264:	4b68      	ldr	r3, [pc, #416]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326a:	4a67      	ldr	r2, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fe fb0a 	bl	800188c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327c:	f7fe fb06 	bl	800188c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e1de      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800328e:	4b5e      	ldr	r3, [pc, #376]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ef      	beq.n	800327c <HAL_RCC_OscConfig+0x3ec>
 800329c:	e01b      	b.n	80032d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329e:	4b5a      	ldr	r3, [pc, #360]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fe faed 	bl	800188c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fe fae9 	bl	800188c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1c1      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1ef      	bne.n	80032b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 80a6 	beq.w	8003430 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032e8:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f4:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a43      	ldr	r2, [pc, #268]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80032fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330c:	2301      	movs	r3, #1
 800330e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003310:	4b3e      	ldr	r3, [pc, #248]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d118      	bne.n	800334e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3a      	ldr	r2, [pc, #232]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 8003322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003326:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003328:	f7fe fab0 	bl	800188c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003330:	f7fe faac 	bl	800188c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e184      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003342:	4b32      	ldr	r3, [pc, #200]	; (800340c <HAL_RCC_OscConfig+0x57c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d108      	bne.n	8003368 <HAL_RCC_OscConfig+0x4d8>
 8003356:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003366:	e024      	b.n	80033b2 <HAL_RCC_OscConfig+0x522>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b05      	cmp	r3, #5
 800336e:	d110      	bne.n	8003392 <HAL_RCC_OscConfig+0x502>
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	4a24      	ldr	r2, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003380:	4b21      	ldr	r3, [pc, #132]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003390:	e00f      	b.n	80033b2 <HAL_RCC_OscConfig+0x522>
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	4a17      	ldr	r2, [pc, #92]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80033aa:	f023 0304 	bic.w	r3, r3, #4
 80033ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fa67 	bl	800188c <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fa63 	bl	800188c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e139      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x578>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ed      	beq.n	80033c2 <HAL_RCC_OscConfig+0x532>
 80033e6:	e01a      	b.n	800341e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe fa50 	bl	800188c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ee:	e00f      	b.n	8003410 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe fa4c 	bl	800188c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d906      	bls.n	8003410 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e122      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003410:	4b90      	ldr	r3, [pc, #576]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e8      	bne.n	80033f0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800341e:	7ffb      	ldrb	r3, [r7, #31]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d105      	bne.n	8003430 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003424:	4b8b      	ldr	r3, [pc, #556]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	4a8a      	ldr	r2, [pc, #552]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 800342a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800342e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8108 	beq.w	800364a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	2b02      	cmp	r3, #2
 8003440:	f040 80d0 	bne.w	80035e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003444:	4b83      	ldr	r3, [pc, #524]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0203 	and.w	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	429a      	cmp	r2, r3
 8003456:	d130      	bne.n	80034ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	3b01      	subs	r3, #1
 8003464:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d127      	bne.n	80034ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d11f      	bne.n	80034ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003484:	2a07      	cmp	r2, #7
 8003486:	bf14      	ite	ne
 8003488:	2201      	movne	r2, #1
 800348a:	2200      	moveq	r2, #0
 800348c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800348e:	4293      	cmp	r3, r2
 8003490:	d113      	bne.n	80034ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d109      	bne.n	80034ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	3b01      	subs	r3, #1
 80034b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d06e      	beq.n	8003598 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	d069      	beq.n	8003594 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034c0:	4b64      	ldr	r3, [pc, #400]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034cc:	4b61      	ldr	r3, [pc, #388]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0b7      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034dc:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a5c      	ldr	r2, [pc, #368]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80034e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e8:	f7fe f9d0 	bl	800188c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe f9cc 	bl	800188c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0a4      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003502:	4b54      	ldr	r3, [pc, #336]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350e:	4b51      	ldr	r3, [pc, #324]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b51      	ldr	r3, [pc, #324]	; (8003658 <HAL_RCC_OscConfig+0x7c8>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800351e:	3a01      	subs	r2, #1
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003528:	0212      	lsls	r2, r2, #8
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003530:	0852      	lsrs	r2, r2, #1
 8003532:	3a01      	subs	r2, #1
 8003534:	0552      	lsls	r2, r2, #21
 8003536:	4311      	orrs	r1, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800353c:	0852      	lsrs	r2, r2, #1
 800353e:	3a01      	subs	r2, #1
 8003540:	0652      	lsls	r2, r2, #25
 8003542:	4311      	orrs	r1, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003548:	0912      	lsrs	r2, r2, #4
 800354a:	0452      	lsls	r2, r2, #17
 800354c:	430a      	orrs	r2, r1
 800354e:	4941      	ldr	r1, [pc, #260]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003554:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a3e      	ldr	r2, [pc, #248]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 800355a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003560:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	4a3b      	ldr	r2, [pc, #236]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800356c:	f7fe f98e 	bl	800188c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe f98a 	bl	800188c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e062      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003592:	e05a      	b.n	800364a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e059      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003598:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d152      	bne.n	800364a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b0:	4b28      	ldr	r3, [pc, #160]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a27      	ldr	r2, [pc, #156]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035bc:	f7fe f966 	bl	800188c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe f962 	bl	800188c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e03a      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x734>
 80035e2:	e032      	b.n	800364a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d02d      	beq.n	8003646 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a19      	ldr	r2, [pc, #100]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003602:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003608:	f023 0303 	bic.w	r3, r3, #3
 800360c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4a10      	ldr	r2, [pc, #64]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 8003614:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361e:	f7fe f935 	bl	800188c <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe f931 	bl	800188c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e009      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCC_OscConfig+0x7c4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x796>
 8003644:	e001      	b.n	800364a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	f99d808c 	.word	0xf99d808c

0800365c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0c8      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d910      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 0207 	bic.w	r2, r3, #7
 8003686:	4961      	ldr	r1, [pc, #388]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b5f      	ldr	r3, [pc, #380]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0b0      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d04c      	beq.n	8003746 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b4:	4b56      	ldr	r3, [pc, #344]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d121      	bne.n	8003704 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e09e      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d107      	bne.n	80036dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d115      	bne.n	8003704 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e092      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e086      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f4:	4b46      	ldr	r3, [pc, #280]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e07e      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003704:	4b42      	ldr	r3, [pc, #264]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 0203 	bic.w	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	493f      	ldr	r1, [pc, #252]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003716:	f7fe f8b9 	bl	800188c <HAL_GetTick>
 800371a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371c:	e00a      	b.n	8003734 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371e:	f7fe f8b5 	bl	800188c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	f241 3288 	movw	r2, #5000	; 0x1388
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e066      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 020c 	and.w	r2, r3, #12
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	429a      	cmp	r2, r3
 8003744:	d1eb      	bne.n	800371e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003752:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	492c      	ldr	r1, [pc, #176]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003764:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d210      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 0207 	bic.w	r2, r3, #7
 800377a:	4924      	ldr	r1, [pc, #144]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b22      	ldr	r3, [pc, #136]	; (800380c <HAL_RCC_ClockConfig+0x1b0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e036      	b.n	8003802 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4918      	ldr	r1, [pc, #96]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4910      	ldr	r1, [pc, #64]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037d2:	f000 f825 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_RCC_ClockConfig+0x1b4>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	490c      	ldr	r1, [pc, #48]	; (8003814 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	5ccb      	ldrb	r3, [r1, r3]
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	fa22 f303 	lsr.w	r3, r2, r3
 80037ee:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <HAL_RCC_ClockConfig+0x1c0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fff8 	bl	80017ec <HAL_InitTick>
 80037fc:	4603      	mov	r3, r0
 80037fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8003800:	7afb      	ldrb	r3, [r7, #11]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40022000 	.word	0x40022000
 8003810:	40021000 	.word	0x40021000
 8003814:	08009d94 	.word	0x08009d94
 8003818:	20000000 	.word	0x20000000
 800381c:	20000004 	.word	0x20000004

08003820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	2300      	movs	r3, #0
 800382c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382e:	4b3e      	ldr	r3, [pc, #248]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x34>
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d121      	bne.n	8003892 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d11e      	bne.n	8003892 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003860:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	e005      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800387c:	4a2b      	ldr	r2, [pc, #172]	; (800392c <HAL_RCC_GetSysClockFreq+0x10c>)
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003884:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10d      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d102      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <HAL_RCC_GetSysClockFreq+0x110>)
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	e004      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038a4:	4b23      	ldr	r3, [pc, #140]	; (8003934 <HAL_RCC_GetSysClockFreq+0x114>)
 80038a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0c      	cmp	r3, #12
 80038ac:	d134      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b03      	cmp	r3, #3
 80038c2:	d003      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0xac>
 80038c4:	e005      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCC_GetSysClockFreq+0x110>)
 80038c8:	617b      	str	r3, [r7, #20]
      break;
 80038ca:	e005      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038cc:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ce:	617b      	str	r3, [r7, #20]
      break;
 80038d0:	e002      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	617b      	str	r3, [r7, #20]
      break;
 80038d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	3301      	adds	r3, #1
 80038e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	fb02 f203 	mul.w	r2, r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <HAL_RCC_GetSysClockFreq+0x108>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	0e5b      	lsrs	r3, r3, #25
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	3301      	adds	r3, #1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003918:	69bb      	ldr	r3, [r7, #24]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	08009dac 	.word	0x08009dac
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003954:	f7ff fff0 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4904      	ldr	r1, [pc, #16]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	08009da4 	.word	0x08009da4

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003980:	f7ff ffda 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4904      	ldr	r1, [pc, #16]	; (80039a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	08009da4 	.word	0x08009da4

080039a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039b4:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039c0:	f7ff fa02 	bl	8002dc8 <HAL_PWREx_GetVoltageRange>
 80039c4:	6178      	str	r0, [r7, #20]
 80039c6:	e014      	b.n	80039f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	; 0x58
 80039d4:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039e0:	f7ff f9f2 	bl	8002dc8 <HAL_PWREx_GetVoltageRange>
 80039e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039e6:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f8:	d10b      	bne.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b80      	cmp	r3, #128	; 0x80
 80039fe:	d919      	bls.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2ba0      	cmp	r3, #160	; 0xa0
 8003a04:	d902      	bls.n	8003a0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a06:	2302      	movs	r3, #2
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	e013      	b.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	e010      	b.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d902      	bls.n	8003a1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a18:	2303      	movs	r3, #3
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	e00a      	b.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d102      	bne.n	8003a2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a24:	2302      	movs	r3, #2
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e004      	b.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b70      	cmp	r3, #112	; 0x70
 8003a2e:	d101      	bne.n	8003a34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a30:	2301      	movs	r3, #1
 8003a32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f023 0207 	bic.w	r2, r3, #7
 8003a3c:	4909      	ldr	r1, [pc, #36]	; (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d001      	beq.n	8003a56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40022000 	.word	0x40022000

08003a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a70:	2300      	movs	r3, #0
 8003a72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a74:	2300      	movs	r3, #0
 8003a76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d041      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a8c:	d02a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a92:	d824      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a98:	d008      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a9e:	d81e      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa8:	d010      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003aaa:	e018      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003aac:	4b86      	ldr	r3, [pc, #536]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a85      	ldr	r2, [pc, #532]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fabb 	bl	800403c <RCCEx_PLLSAI1_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aca:	e00c      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3320      	adds	r3, #32
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fba6 	bl	8004224 <RCCEx_PLLSAI2_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aec:	4b76      	ldr	r3, [pc, #472]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afa:	4973      	ldr	r1, [pc, #460]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b02:	e001      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d041      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b1c:	d02a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b22:	d824      	bhi.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b28:	d008      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b2e:	d81e      	bhi.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b38:	d010      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b3a:	e018      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b3c:	4b62      	ldr	r3, [pc, #392]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a61      	ldr	r2, [pc, #388]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b48:	e015      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fa73 	bl	800403c <RCCEx_PLLSAI1_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5a:	e00c      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3320      	adds	r3, #32
 8003b60:	2100      	movs	r1, #0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fb5e 	bl	8004224 <RCCEx_PLLSAI2_Config>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b6c:	e003      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	74fb      	strb	r3, [r7, #19]
      break;
 8003b72:	e000      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b76:	7cfb      	ldrb	r3, [r7, #19]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b7c:	4b52      	ldr	r3, [pc, #328]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8a:	494f      	ldr	r1, [pc, #316]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b92:	e001      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a0 	beq.w	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00d      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc0:	4b41      	ldr	r3, [pc, #260]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	4a40      	ldr	r2, [pc, #256]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6593      	str	r3, [r2, #88]	; 0x58
 8003bcc:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be8:	f7fd fe50 	bl	800188c <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bee:	e009      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf0:	f7fd fe4c 	bl	800188c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d902      	bls.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	74fb      	strb	r3, [r7, #19]
        break;
 8003c02:	e005      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c04:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ef      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d15c      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c16:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d019      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c60:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd fe0b 	bl	800188c <HAL_GetTick>
 8003c76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c78:	e00b      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fe07 	bl	800188c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d902      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	74fb      	strb	r3, [r7, #19]
            break;
 8003c90:	e006      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ec      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb6:	4904      	ldr	r1, [pc, #16]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cbe:	e009      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	74bb      	strb	r3, [r7, #18]
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd4:	7c7b      	ldrb	r3, [r7, #17]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b9e      	ldr	r3, [pc, #632]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	4a9d      	ldr	r2, [pc, #628]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf2:	4b98      	ldr	r3, [pc, #608]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f023 0203 	bic.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	4994      	ldr	r1, [pc, #592]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d14:	4b8f      	ldr	r3, [pc, #572]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 020c 	bic.w	r2, r3, #12
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	498c      	ldr	r1, [pc, #560]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d36:	4b87      	ldr	r3, [pc, #540]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	4983      	ldr	r1, [pc, #524]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d58:	4b7e      	ldr	r3, [pc, #504]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	497b      	ldr	r1, [pc, #492]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d7a:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d88:	4972      	ldr	r1, [pc, #456]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d9c:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	496a      	ldr	r1, [pc, #424]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	4961      	ldr	r1, [pc, #388]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de0:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	4959      	ldr	r1, [pc, #356]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e02:	4b54      	ldr	r3, [pc, #336]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e10:	4950      	ldr	r1, [pc, #320]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e24:	4b4b      	ldr	r3, [pc, #300]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	4948      	ldr	r1, [pc, #288]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e46:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e54:	493f      	ldr	r1, [pc, #252]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d028      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e68:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e76:	4937      	ldr	r1, [pc, #220]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e86:	d106      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
 8003e94:	e011      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f8c8 	bl	800403c <RCCEx_PLLSAI1_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d028      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec6:	4b23      	ldr	r3, [pc, #140]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	491f      	ldr	r1, [pc, #124]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee6:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ef0:	60d3      	str	r3, [r2, #12]
 8003ef2:	e011      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2101      	movs	r1, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f899 	bl	800403c <RCCEx_PLLSAI1_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f0e:	7cfb      	ldrb	r3, [r7, #19]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	4908      	ldr	r1, [pc, #32]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f42:	d109      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a02      	ldr	r2, [pc, #8]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
 8003f50:	e014      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f867 	bl	800403c <RCCEx_PLLSAI1_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02f      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f88:	4b2b      	ldr	r3, [pc, #172]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f96:	4928      	ldr	r1, [pc, #160]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa6:	d10d      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 f844 	bl	800403c <RCCEx_PLLSAI1_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d014      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	74bb      	strb	r3, [r7, #18]
 8003fc2:	e011      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3320      	adds	r3, #32
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 f925 	bl	8004224 <RCCEx_PLLSAI2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ff4:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004002:	490d      	ldr	r1, [pc, #52]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004026:	4904      	ldr	r1, [pc, #16]	; (8004038 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800402e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000

0800403c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800404a:	4b75      	ldr	r3, [pc, #468]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d018      	beq.n	8004088 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004056:	4b72      	ldr	r3, [pc, #456]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0203 	and.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d10d      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
       ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800406e:	4b6c      	ldr	r3, [pc, #432]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
       ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d047      	beq.n	8004112 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
 8004086:	e044      	b.n	8004112 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d018      	beq.n	80040c2 <RCCEx_PLLSAI1_Config+0x86>
 8004090:	2b03      	cmp	r3, #3
 8004092:	d825      	bhi.n	80040e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004094:	2b01      	cmp	r3, #1
 8004096:	d002      	beq.n	800409e <RCCEx_PLLSAI1_Config+0x62>
 8004098:	2b02      	cmp	r3, #2
 800409a:	d009      	beq.n	80040b0 <RCCEx_PLLSAI1_Config+0x74>
 800409c:	e020      	b.n	80040e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800409e:	4b60      	ldr	r3, [pc, #384]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11d      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ae:	e01a      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040b0:	4b5b      	ldr	r3, [pc, #364]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c0:	e013      	b.n	80040ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040c2:	4b57      	ldr	r3, [pc, #348]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ce:	4b54      	ldr	r3, [pc, #336]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040de:	e006      	b.n	80040ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e004      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10d      	bne.n	8004112 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040f6:	4b4a      	ldr	r3, [pc, #296]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	430b      	orrs	r3, r1
 800410c:	4944      	ldr	r1, [pc, #272]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d17d      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004118:	4b41      	ldr	r3, [pc, #260]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a40      	ldr	r2, [pc, #256]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fd fbb2 	bl	800188c <HAL_GetTick>
 8004128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800412a:	e009      	b.n	8004140 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800412c:	f7fd fbae 	bl	800188c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d902      	bls.n	8004140 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	73fb      	strb	r3, [r7, #15]
        break;
 800413e:	e005      	b.n	800414c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004140:	4b37      	ldr	r3, [pc, #220]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ef      	bne.n	800412c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d160      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d111      	bne.n	800417c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004158:	4b31      	ldr	r3, [pc, #196]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6892      	ldr	r2, [r2, #8]
 8004168:	0211      	lsls	r1, r2, #8
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	0912      	lsrs	r2, r2, #4
 8004170:	0452      	lsls	r2, r2, #17
 8004172:	430a      	orrs	r2, r1
 8004174:	492a      	ldr	r1, [pc, #168]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	610b      	str	r3, [r1, #16]
 800417a:	e027      	b.n	80041cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d112      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004182:	4b27      	ldr	r3, [pc, #156]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800418a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6892      	ldr	r2, [r2, #8]
 8004192:	0211      	lsls	r1, r2, #8
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6912      	ldr	r2, [r2, #16]
 8004198:	0852      	lsrs	r2, r2, #1
 800419a:	3a01      	subs	r2, #1
 800419c:	0552      	lsls	r2, r2, #21
 800419e:	430a      	orrs	r2, r1
 80041a0:	491f      	ldr	r1, [pc, #124]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]
 80041a6:	e011      	b.n	80041cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a8:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6892      	ldr	r2, [r2, #8]
 80041b8:	0211      	lsls	r1, r2, #8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6952      	ldr	r2, [r2, #20]
 80041be:	0852      	lsrs	r2, r2, #1
 80041c0:	3a01      	subs	r2, #1
 80041c2:	0652      	lsls	r2, r2, #25
 80041c4:	430a      	orrs	r2, r1
 80041c6:	4916      	ldr	r1, [pc, #88]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041cc:	4b14      	ldr	r3, [pc, #80]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fd fb58 	bl	800188c <HAL_GetTick>
 80041dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041de:	e009      	b.n	80041f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e0:	f7fd fb54 	bl	800188c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d902      	bls.n	80041f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	73fb      	strb	r3, [r7, #15]
          break;
 80041f2:	e005      	b.n	8004200 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ef      	beq.n	80041e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004206:	4b06      	ldr	r3, [pc, #24]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	4904      	ldr	r1, [pc, #16]	; (8004220 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004210:	4313      	orrs	r3, r2
 8004212:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000

08004224 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004232:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d018      	beq.n	8004270 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800423e:	4b67      	ldr	r3, [pc, #412]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0203 	and.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d10d      	bne.n	800426a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
       ||
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004256:	4b61      	ldr	r3, [pc, #388]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
       ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d047      	beq.n	80042fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	e044      	b.n	80042fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d018      	beq.n	80042aa <RCCEx_PLLSAI2_Config+0x86>
 8004278:	2b03      	cmp	r3, #3
 800427a:	d825      	bhi.n	80042c8 <RCCEx_PLLSAI2_Config+0xa4>
 800427c:	2b01      	cmp	r3, #1
 800427e:	d002      	beq.n	8004286 <RCCEx_PLLSAI2_Config+0x62>
 8004280:	2b02      	cmp	r3, #2
 8004282:	d009      	beq.n	8004298 <RCCEx_PLLSAI2_Config+0x74>
 8004284:	e020      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004286:	4b55      	ldr	r3, [pc, #340]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d11d      	bne.n	80042ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004296:	e01a      	b.n	80042ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004298:	4b50      	ldr	r3, [pc, #320]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d116      	bne.n	80042d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a8:	e013      	b.n	80042d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042aa:	4b4c      	ldr	r3, [pc, #304]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042b6:	4b49      	ldr	r3, [pc, #292]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042c6:	e006      	b.n	80042d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      break;
 80042cc:	e004      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ce:	bf00      	nop
 80042d0:	e002      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042d2:	bf00      	nop
 80042d4:	e000      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10d      	bne.n	80042fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042de:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	430b      	orrs	r3, r1
 80042f4:	4939      	ldr	r1, [pc, #228]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d167      	bne.n	80043d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a35      	ldr	r2, [pc, #212]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fd fabe 	bl	800188c <HAL_GetTick>
 8004310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004312:	e009      	b.n	8004328 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004314:	f7fd faba 	bl	800188c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d902      	bls.n	8004328 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	73fb      	strb	r3, [r7, #15]
        break;
 8004326:	e005      	b.n	8004334 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1ef      	bne.n	8004314 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d14a      	bne.n	80043d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d111      	bne.n	8004364 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004340:	4b26      	ldr	r3, [pc, #152]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6892      	ldr	r2, [r2, #8]
 8004350:	0211      	lsls	r1, r2, #8
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	68d2      	ldr	r2, [r2, #12]
 8004356:	0912      	lsrs	r2, r2, #4
 8004358:	0452      	lsls	r2, r2, #17
 800435a:	430a      	orrs	r2, r1
 800435c:	491f      	ldr	r1, [pc, #124]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800435e:	4313      	orrs	r3, r2
 8004360:	614b      	str	r3, [r1, #20]
 8004362:	e011      	b.n	8004388 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800436c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6892      	ldr	r2, [r2, #8]
 8004374:	0211      	lsls	r1, r2, #8
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6912      	ldr	r2, [r2, #16]
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	3a01      	subs	r2, #1
 800437e:	0652      	lsls	r2, r2, #25
 8004380:	430a      	orrs	r2, r1
 8004382:	4916      	ldr	r1, [pc, #88]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004384:	4313      	orrs	r3, r2
 8004386:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004392:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004394:	f7fd fa7a 	bl	800188c <HAL_GetTick>
 8004398:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800439a:	e009      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800439c:	f7fd fa76 	bl	800188c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d902      	bls.n	80043b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	73fb      	strb	r3, [r7, #15]
          break;
 80043ae:	e005      	b.n	80043bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ef      	beq.n	800439c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	4904      	ldr	r1, [pc, #16]	; (80043dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40021000 	.word	0x40021000

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e049      	b.n	8004486 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc ffe2 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 f89e 	bl	8004560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d001      	beq.n	80044a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e047      	b.n	8004538 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <HAL_TIM_Base_Start+0xb4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c2:	d018      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1f      	ldr	r2, [pc, #124]	; (8004548 <HAL_TIM_Base_Start+0xb8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d013      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1e      	ldr	r2, [pc, #120]	; (800454c <HAL_TIM_Base_Start+0xbc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00e      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <HAL_TIM_Base_Start+0xc0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1b      	ldr	r2, [pc, #108]	; (8004554 <HAL_TIM_Base_Start+0xc4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIM_Base_Start+0x66>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <HAL_TIM_Base_Start+0xc8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d115      	bne.n	8004522 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <HAL_TIM_Base_Start+0xcc>)
 80044fe:	4013      	ands	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d015      	beq.n	8004534 <HAL_TIM_Base_Start+0xa4>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d011      	beq.n	8004534 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	e008      	b.n	8004534 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e000      	b.n	8004536 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004534:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40012c00 	.word	0x40012c00
 8004548:	40000400 	.word	0x40000400
 800454c:	40000800 	.word	0x40000800
 8004550:	40000c00 	.word	0x40000c00
 8004554:	40013400 	.word	0x40013400
 8004558:	40014000 	.word	0x40014000
 800455c:	00010007 	.word	0x00010007

08004560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a40      	ldr	r2, [pc, #256]	; (8004674 <TIM_Base_SetConfig+0x114>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d013      	beq.n	80045a0 <TIM_Base_SetConfig+0x40>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457e:	d00f      	beq.n	80045a0 <TIM_Base_SetConfig+0x40>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a3d      	ldr	r2, [pc, #244]	; (8004678 <TIM_Base_SetConfig+0x118>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0x40>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a3c      	ldr	r2, [pc, #240]	; (800467c <TIM_Base_SetConfig+0x11c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0x40>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a3b      	ldr	r2, [pc, #236]	; (8004680 <TIM_Base_SetConfig+0x120>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0x40>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a3a      	ldr	r2, [pc, #232]	; (8004684 <TIM_Base_SetConfig+0x124>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d108      	bne.n	80045b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2f      	ldr	r2, [pc, #188]	; (8004674 <TIM_Base_SetConfig+0x114>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01f      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d01b      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <TIM_Base_SetConfig+0x118>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d017      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2b      	ldr	r2, [pc, #172]	; (800467c <TIM_Base_SetConfig+0x11c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <TIM_Base_SetConfig+0x120>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00f      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a29      	ldr	r2, [pc, #164]	; (8004684 <TIM_Base_SetConfig+0x124>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a28      	ldr	r2, [pc, #160]	; (8004688 <TIM_Base_SetConfig+0x128>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a27      	ldr	r2, [pc, #156]	; (800468c <TIM_Base_SetConfig+0x12c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <TIM_Base_SetConfig+0x130>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a10      	ldr	r2, [pc, #64]	; (8004674 <TIM_Base_SetConfig+0x114>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00f      	beq.n	8004658 <TIM_Base_SetConfig+0xf8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <TIM_Base_SetConfig+0x124>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00b      	beq.n	8004658 <TIM_Base_SetConfig+0xf8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <TIM_Base_SetConfig+0x128>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d007      	beq.n	8004658 <TIM_Base_SetConfig+0xf8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a10      	ldr	r2, [pc, #64]	; (800468c <TIM_Base_SetConfig+0x12c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <TIM_Base_SetConfig+0xf8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a0f      	ldr	r2, [pc, #60]	; (8004690 <TIM_Base_SetConfig+0x130>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d103      	bne.n	8004660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	615a      	str	r2, [r3, #20]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40000400 	.word	0x40000400
 800467c:	40000800 	.word	0x40000800
 8004680:	40000c00 	.word	0x40000c00
 8004684:	40013400 	.word	0x40013400
 8004688:	40014000 	.word	0x40014000
 800468c:	40014400 	.word	0x40014400
 8004690:	40014800 	.word	0x40014800

08004694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e040      	b.n	8004728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc feaa 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f82c 	bl	8004730 <UART_SetConfig>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e022      	b.n	8004728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 faaa 	bl	8004c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800470e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fb31 	bl	8004d88 <UART_CheckIdleState>
 8004726:	4603      	mov	r3, r0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	b5b0      	push	{r4, r5, r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	4313      	orrs	r3, r2
 8004752:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4bad      	ldr	r3, [pc, #692]	; (8004a10 <UART_SetConfig+0x2e0>)
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	69f9      	ldr	r1, [r7, #28]
 8004764:	430b      	orrs	r3, r1
 8004766:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4aa2      	ldr	r2, [pc, #648]	; (8004a14 <UART_SetConfig+0x2e4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	4313      	orrs	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a99      	ldr	r2, [pc, #612]	; (8004a18 <UART_SetConfig+0x2e8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d121      	bne.n	80047fa <UART_SetConfig+0xca>
 80047b6:	4b99      	ldr	r3, [pc, #612]	; (8004a1c <UART_SetConfig+0x2ec>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d817      	bhi.n	80047f4 <UART_SetConfig+0xc4>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0x9c>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047e9 	.word	0x080047e9
 80047d4:	080047e3 	.word	0x080047e3
 80047d8:	080047ef 	.word	0x080047ef
 80047dc:	2301      	movs	r3, #1
 80047de:	76fb      	strb	r3, [r7, #27]
 80047e0:	e0e7      	b.n	80049b2 <UART_SetConfig+0x282>
 80047e2:	2302      	movs	r3, #2
 80047e4:	76fb      	strb	r3, [r7, #27]
 80047e6:	e0e4      	b.n	80049b2 <UART_SetConfig+0x282>
 80047e8:	2304      	movs	r3, #4
 80047ea:	76fb      	strb	r3, [r7, #27]
 80047ec:	e0e1      	b.n	80049b2 <UART_SetConfig+0x282>
 80047ee:	2308      	movs	r3, #8
 80047f0:	76fb      	strb	r3, [r7, #27]
 80047f2:	e0de      	b.n	80049b2 <UART_SetConfig+0x282>
 80047f4:	2310      	movs	r3, #16
 80047f6:	76fb      	strb	r3, [r7, #27]
 80047f8:	e0db      	b.n	80049b2 <UART_SetConfig+0x282>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a88      	ldr	r2, [pc, #544]	; (8004a20 <UART_SetConfig+0x2f0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d132      	bne.n	800486a <UART_SetConfig+0x13a>
 8004804:	4b85      	ldr	r3, [pc, #532]	; (8004a1c <UART_SetConfig+0x2ec>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f003 030c 	and.w	r3, r3, #12
 800480e:	2b0c      	cmp	r3, #12
 8004810:	d828      	bhi.n	8004864 <UART_SetConfig+0x134>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0xe8>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	0800484d 	.word	0x0800484d
 800481c:	08004865 	.word	0x08004865
 8004820:	08004865 	.word	0x08004865
 8004824:	08004865 	.word	0x08004865
 8004828:	08004859 	.word	0x08004859
 800482c:	08004865 	.word	0x08004865
 8004830:	08004865 	.word	0x08004865
 8004834:	08004865 	.word	0x08004865
 8004838:	08004853 	.word	0x08004853
 800483c:	08004865 	.word	0x08004865
 8004840:	08004865 	.word	0x08004865
 8004844:	08004865 	.word	0x08004865
 8004848:	0800485f 	.word	0x0800485f
 800484c:	2300      	movs	r3, #0
 800484e:	76fb      	strb	r3, [r7, #27]
 8004850:	e0af      	b.n	80049b2 <UART_SetConfig+0x282>
 8004852:	2302      	movs	r3, #2
 8004854:	76fb      	strb	r3, [r7, #27]
 8004856:	e0ac      	b.n	80049b2 <UART_SetConfig+0x282>
 8004858:	2304      	movs	r3, #4
 800485a:	76fb      	strb	r3, [r7, #27]
 800485c:	e0a9      	b.n	80049b2 <UART_SetConfig+0x282>
 800485e:	2308      	movs	r3, #8
 8004860:	76fb      	strb	r3, [r7, #27]
 8004862:	e0a6      	b.n	80049b2 <UART_SetConfig+0x282>
 8004864:	2310      	movs	r3, #16
 8004866:	76fb      	strb	r3, [r7, #27]
 8004868:	e0a3      	b.n	80049b2 <UART_SetConfig+0x282>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a6d      	ldr	r2, [pc, #436]	; (8004a24 <UART_SetConfig+0x2f4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d120      	bne.n	80048b6 <UART_SetConfig+0x186>
 8004874:	4b69      	ldr	r3, [pc, #420]	; (8004a1c <UART_SetConfig+0x2ec>)
 8004876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800487e:	2b30      	cmp	r3, #48	; 0x30
 8004880:	d013      	beq.n	80048aa <UART_SetConfig+0x17a>
 8004882:	2b30      	cmp	r3, #48	; 0x30
 8004884:	d814      	bhi.n	80048b0 <UART_SetConfig+0x180>
 8004886:	2b20      	cmp	r3, #32
 8004888:	d009      	beq.n	800489e <UART_SetConfig+0x16e>
 800488a:	2b20      	cmp	r3, #32
 800488c:	d810      	bhi.n	80048b0 <UART_SetConfig+0x180>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <UART_SetConfig+0x168>
 8004892:	2b10      	cmp	r3, #16
 8004894:	d006      	beq.n	80048a4 <UART_SetConfig+0x174>
 8004896:	e00b      	b.n	80048b0 <UART_SetConfig+0x180>
 8004898:	2300      	movs	r3, #0
 800489a:	76fb      	strb	r3, [r7, #27]
 800489c:	e089      	b.n	80049b2 <UART_SetConfig+0x282>
 800489e:	2302      	movs	r3, #2
 80048a0:	76fb      	strb	r3, [r7, #27]
 80048a2:	e086      	b.n	80049b2 <UART_SetConfig+0x282>
 80048a4:	2304      	movs	r3, #4
 80048a6:	76fb      	strb	r3, [r7, #27]
 80048a8:	e083      	b.n	80049b2 <UART_SetConfig+0x282>
 80048aa:	2308      	movs	r3, #8
 80048ac:	76fb      	strb	r3, [r7, #27]
 80048ae:	e080      	b.n	80049b2 <UART_SetConfig+0x282>
 80048b0:	2310      	movs	r3, #16
 80048b2:	76fb      	strb	r3, [r7, #27]
 80048b4:	e07d      	b.n	80049b2 <UART_SetConfig+0x282>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a5b      	ldr	r2, [pc, #364]	; (8004a28 <UART_SetConfig+0x2f8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d120      	bne.n	8004902 <UART_SetConfig+0x1d2>
 80048c0:	4b56      	ldr	r3, [pc, #344]	; (8004a1c <UART_SetConfig+0x2ec>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048ca:	2bc0      	cmp	r3, #192	; 0xc0
 80048cc:	d013      	beq.n	80048f6 <UART_SetConfig+0x1c6>
 80048ce:	2bc0      	cmp	r3, #192	; 0xc0
 80048d0:	d814      	bhi.n	80048fc <UART_SetConfig+0x1cc>
 80048d2:	2b80      	cmp	r3, #128	; 0x80
 80048d4:	d009      	beq.n	80048ea <UART_SetConfig+0x1ba>
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d810      	bhi.n	80048fc <UART_SetConfig+0x1cc>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <UART_SetConfig+0x1b4>
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d006      	beq.n	80048f0 <UART_SetConfig+0x1c0>
 80048e2:	e00b      	b.n	80048fc <UART_SetConfig+0x1cc>
 80048e4:	2300      	movs	r3, #0
 80048e6:	76fb      	strb	r3, [r7, #27]
 80048e8:	e063      	b.n	80049b2 <UART_SetConfig+0x282>
 80048ea:	2302      	movs	r3, #2
 80048ec:	76fb      	strb	r3, [r7, #27]
 80048ee:	e060      	b.n	80049b2 <UART_SetConfig+0x282>
 80048f0:	2304      	movs	r3, #4
 80048f2:	76fb      	strb	r3, [r7, #27]
 80048f4:	e05d      	b.n	80049b2 <UART_SetConfig+0x282>
 80048f6:	2308      	movs	r3, #8
 80048f8:	76fb      	strb	r3, [r7, #27]
 80048fa:	e05a      	b.n	80049b2 <UART_SetConfig+0x282>
 80048fc:	2310      	movs	r3, #16
 80048fe:	76fb      	strb	r3, [r7, #27]
 8004900:	e057      	b.n	80049b2 <UART_SetConfig+0x282>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a49      	ldr	r2, [pc, #292]	; (8004a2c <UART_SetConfig+0x2fc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d125      	bne.n	8004958 <UART_SetConfig+0x228>
 800490c:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <UART_SetConfig+0x2ec>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491a:	d017      	beq.n	800494c <UART_SetConfig+0x21c>
 800491c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004920:	d817      	bhi.n	8004952 <UART_SetConfig+0x222>
 8004922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004926:	d00b      	beq.n	8004940 <UART_SetConfig+0x210>
 8004928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492c:	d811      	bhi.n	8004952 <UART_SetConfig+0x222>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <UART_SetConfig+0x20a>
 8004932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004936:	d006      	beq.n	8004946 <UART_SetConfig+0x216>
 8004938:	e00b      	b.n	8004952 <UART_SetConfig+0x222>
 800493a:	2300      	movs	r3, #0
 800493c:	76fb      	strb	r3, [r7, #27]
 800493e:	e038      	b.n	80049b2 <UART_SetConfig+0x282>
 8004940:	2302      	movs	r3, #2
 8004942:	76fb      	strb	r3, [r7, #27]
 8004944:	e035      	b.n	80049b2 <UART_SetConfig+0x282>
 8004946:	2304      	movs	r3, #4
 8004948:	76fb      	strb	r3, [r7, #27]
 800494a:	e032      	b.n	80049b2 <UART_SetConfig+0x282>
 800494c:	2308      	movs	r3, #8
 800494e:	76fb      	strb	r3, [r7, #27]
 8004950:	e02f      	b.n	80049b2 <UART_SetConfig+0x282>
 8004952:	2310      	movs	r3, #16
 8004954:	76fb      	strb	r3, [r7, #27]
 8004956:	e02c      	b.n	80049b2 <UART_SetConfig+0x282>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2d      	ldr	r2, [pc, #180]	; (8004a14 <UART_SetConfig+0x2e4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d125      	bne.n	80049ae <UART_SetConfig+0x27e>
 8004962:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <UART_SetConfig+0x2ec>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800496c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004970:	d017      	beq.n	80049a2 <UART_SetConfig+0x272>
 8004972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004976:	d817      	bhi.n	80049a8 <UART_SetConfig+0x278>
 8004978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800497c:	d00b      	beq.n	8004996 <UART_SetConfig+0x266>
 800497e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004982:	d811      	bhi.n	80049a8 <UART_SetConfig+0x278>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <UART_SetConfig+0x260>
 8004988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498c:	d006      	beq.n	800499c <UART_SetConfig+0x26c>
 800498e:	e00b      	b.n	80049a8 <UART_SetConfig+0x278>
 8004990:	2300      	movs	r3, #0
 8004992:	76fb      	strb	r3, [r7, #27]
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x282>
 8004996:	2302      	movs	r3, #2
 8004998:	76fb      	strb	r3, [r7, #27]
 800499a:	e00a      	b.n	80049b2 <UART_SetConfig+0x282>
 800499c:	2304      	movs	r3, #4
 800499e:	76fb      	strb	r3, [r7, #27]
 80049a0:	e007      	b.n	80049b2 <UART_SetConfig+0x282>
 80049a2:	2308      	movs	r3, #8
 80049a4:	76fb      	strb	r3, [r7, #27]
 80049a6:	e004      	b.n	80049b2 <UART_SetConfig+0x282>
 80049a8:	2310      	movs	r3, #16
 80049aa:	76fb      	strb	r3, [r7, #27]
 80049ac:	e001      	b.n	80049b2 <UART_SetConfig+0x282>
 80049ae:	2310      	movs	r3, #16
 80049b0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <UART_SetConfig+0x2e4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	f040 8087 	bne.w	8004acc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049be:	7efb      	ldrb	r3, [r7, #27]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d837      	bhi.n	8004a34 <UART_SetConfig+0x304>
 80049c4:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x29c>)
 80049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ca:	bf00      	nop
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	08004a35 	.word	0x08004a35
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a35 	.word	0x08004a35
 80049dc:	080049ff 	.word	0x080049ff
 80049e0:	08004a35 	.word	0x08004a35
 80049e4:	08004a35 	.word	0x08004a35
 80049e8:	08004a35 	.word	0x08004a35
 80049ec:	08004a07 	.word	0x08004a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fe ffae 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 80049f4:	6178      	str	r0, [r7, #20]
        break;
 80049f6:	e022      	b.n	8004a3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f8:	4b0d      	ldr	r3, [pc, #52]	; (8004a30 <UART_SetConfig+0x300>)
 80049fa:	617b      	str	r3, [r7, #20]
        break;
 80049fc:	e01f      	b.n	8004a3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fe:	f7fe ff0f 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8004a02:	6178      	str	r0, [r7, #20]
        break;
 8004a04:	e01b      	b.n	8004a3e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	617b      	str	r3, [r7, #20]
        break;
 8004a0c:	e017      	b.n	8004a3e <UART_SetConfig+0x30e>
 8004a0e:	bf00      	nop
 8004a10:	efff69f3 	.word	0xefff69f3
 8004a14:	40008000 	.word	0x40008000
 8004a18:	40013800 	.word	0x40013800
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	40004400 	.word	0x40004400
 8004a24:	40004800 	.word	0x40004800
 8004a28:	40004c00 	.word	0x40004c00
 8004a2c:	40005000 	.word	0x40005000
 8004a30:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	76bb      	strb	r3, [r7, #26]
        break;
 8004a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80f1 	beq.w	8004c28 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d305      	bcc.n	8004a62 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d902      	bls.n	8004a68 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	76bb      	strb	r3, [r7, #26]
 8004a66:	e0df      	b.n	8004c28 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	020b      	lsls	r3, r1, #8
 8004a7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a7e:	0202      	lsls	r2, r0, #8
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	6849      	ldr	r1, [r1, #4]
 8004a84:	0849      	lsrs	r1, r1, #1
 8004a86:	4608      	mov	r0, r1
 8004a88:	f04f 0100 	mov.w	r1, #0
 8004a8c:	1814      	adds	r4, r2, r0
 8004a8e:	eb43 0501 	adc.w	r5, r3, r1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	f7fc f8f2 	bl	8000c88 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab2:	d308      	bcc.n	8004ac6 <UART_SetConfig+0x396>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aba:	d204      	bcs.n	8004ac6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	e0b0      	b.n	8004c28 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	76bb      	strb	r3, [r7, #26]
 8004aca:	e0ad      	b.n	8004c28 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad4:	d15c      	bne.n	8004b90 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004ad6:	7efb      	ldrb	r3, [r7, #27]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d828      	bhi.n	8004b2e <UART_SetConfig+0x3fe>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <UART_SetConfig+0x3b4>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b1f 	.word	0x08004b1f
 8004af8:	08004b2f 	.word	0x08004b2f
 8004afc:	08004b2f 	.word	0x08004b2f
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b27 	.word	0x08004b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fe ff22 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004b0c:	6178      	str	r0, [r7, #20]
        break;
 8004b0e:	e013      	b.n	8004b38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b10:	f7fe ff34 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8004b14:	6178      	str	r0, [r7, #20]
        break;
 8004b16:	e00f      	b.n	8004b38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b18:	4b49      	ldr	r3, [pc, #292]	; (8004c40 <UART_SetConfig+0x510>)
 8004b1a:	617b      	str	r3, [r7, #20]
        break;
 8004b1c:	e00c      	b.n	8004b38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7fe fe7f 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8004b22:	6178      	str	r0, [r7, #20]
        break;
 8004b24:	e008      	b.n	8004b38 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b2a:	617b      	str	r3, [r7, #20]
        break;
 8004b2c:	e004      	b.n	8004b38 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	76bb      	strb	r3, [r7, #26]
        break;
 8004b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d074      	beq.n	8004c28 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	005a      	lsls	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	441a      	add	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d916      	bls.n	8004b8a <UART_SetConfig+0x45a>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b62:	d212      	bcs.n	8004b8a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f023 030f 	bic.w	r3, r3, #15
 8004b6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	89fb      	ldrh	r3, [r7, #14]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	89fa      	ldrh	r2, [r7, #14]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	e04e      	b.n	8004c28 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	76bb      	strb	r3, [r7, #26]
 8004b8e:	e04b      	b.n	8004c28 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b90:	7efb      	ldrb	r3, [r7, #27]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d827      	bhi.n	8004be6 <UART_SetConfig+0x4b6>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x46c>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004be7 	.word	0x08004be7
 8004bac:	08004bd7 	.word	0x08004bd7
 8004bb0:	08004be7 	.word	0x08004be7
 8004bb4:	08004be7 	.word	0x08004be7
 8004bb8:	08004be7 	.word	0x08004be7
 8004bbc:	08004bdf 	.word	0x08004bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f7fe fec6 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	6178      	str	r0, [r7, #20]
        break;
 8004bc6:	e013      	b.n	8004bf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bc8:	f7fe fed8 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8004bcc:	6178      	str	r0, [r7, #20]
        break;
 8004bce:	e00f      	b.n	8004bf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <UART_SetConfig+0x510>)
 8004bd2:	617b      	str	r3, [r7, #20]
        break;
 8004bd4:	e00c      	b.n	8004bf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd6:	f7fe fe23 	bl	8003820 <HAL_RCC_GetSysClockFreq>
 8004bda:	6178      	str	r0, [r7, #20]
        break;
 8004bdc:	e008      	b.n	8004bf0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be2:	617b      	str	r3, [r7, #20]
        break;
 8004be4:	e004      	b.n	8004bf0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	76bb      	strb	r3, [r7, #26]
        break;
 8004bee:	bf00      	nop
    }

    if (pclk != 0U)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	085a      	lsrs	r2, r3, #1
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	441a      	add	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b0f      	cmp	r3, #15
 8004c10:	d908      	bls.n	8004c24 <UART_SetConfig+0x4f4>
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c18:	d204      	bcs.n	8004c24 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	e001      	b.n	8004c28 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c34:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	00f42400 	.word	0x00f42400

08004c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01a      	beq.n	8004d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d42:	d10a      	bne.n	8004d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	605a      	str	r2, [r3, #4]
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d98:	f7fc fd78 	bl	800188c <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d10e      	bne.n	8004dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f82d 	bl	8004e1a <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e023      	b.n	8004e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d10e      	bne.n	8004df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f817 	bl	8004e1a <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e00d      	b.n	8004e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	603b      	str	r3, [r7, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2a:	e05e      	b.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d05a      	beq.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e34:	f7fc fd2a 	bl	800188c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d302      	bcc.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11b      	bne.n	8004e82 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e58:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0201 	bic.w	r2, r2, #1
 8004e68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e043      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02c      	beq.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9e:	d124      	bne.n	8004eea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eb8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e00f      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d091      	beq.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <lis2dh12_Init>:

void DMATransferComplete(DMA_HandleTypeDef *hdma);

/* Main Example --------------------------------------------------------------*/
void lis2dh12_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8004f18:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f1a:	4a19      	ldr	r2, [pc, #100]	; (8004f80 <lis2dh12_Init+0x6c>)
 8004f1c:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f20:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <lis2dh12_Init+0x70>)
 8004f22:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 8004f24:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f26:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <lis2dh12_Init+0x74>)
 8004f28:	609a      	str	r2, [r3, #8]

  /* Wait boot time and initialize platform specific hardware */
  platform_init();
 8004f2a:	f000 f902 	bl	8005132 <platform_init>

  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <lis2dh12_Init+0x78>)
 8004f30:	2100      	movs	r1, #0
 8004f32:	4817      	ldr	r0, [pc, #92]	; (8004f90 <lis2dh12_Init+0x7c>)
 8004f34:	f7fc ffb4 	bl	8001ea0 <HAL_DMA_RegisterCallback>

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8004f38:	2005      	movs	r0, #5
 8004f3a:	f000 f8ef 	bl	800511c <platform_delay>

  /* Check device ID */
  lis2dh12_device_id_get(&dev_ctx, &whoamI);
 8004f3e:	4915      	ldr	r1, [pc, #84]	; (8004f94 <lis2dh12_Init+0x80>)
 8004f40:	480e      	ldr	r0, [pc, #56]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f42:	f000 faaa 	bl	800549a <lis2dh12_device_id_get>
  while (whoamI != LIS2DH12_ID){
 8004f46:	bf00      	nop
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <lis2dh12_Init+0x80>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b33      	cmp	r3, #51	; 0x33
 8004f4e:	d1fb      	bne.n	8004f48 <lis2dh12_Init+0x34>
      /* manage here device not found */
    //}
  }

  /* Enable Block Data Update. */
  lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8004f50:	2101      	movs	r1, #1
 8004f52:	480a      	ldr	r0, [pc, #40]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f54:	f000 fa17 	bl	8005386 <lis2dh12_block_data_update_set>

  /* Set Output Data Rate to 1Hz. */
  lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_400Hz);
 8004f58:	2107      	movs	r1, #7
 8004f5a:	4808      	ldr	r0, [pc, #32]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f5c:	f000 f9c7 	bl	80052ee <lis2dh12_data_rate_set>

  /* Set full scale to 2g. */
  lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 8004f60:	2100      	movs	r1, #0
 8004f62:	4806      	ldr	r0, [pc, #24]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f64:	f000 f9e9 	bl	800533a <lis2dh12_full_scale_set>

  /* Enable temperature sensor. */
  lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
 8004f68:	2103      	movs	r1, #3
 8004f6a:	4804      	ldr	r0, [pc, #16]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f6c:	f000 f944 	bl	80051f8 <lis2dh12_temperature_meas_set>

  /* Set device in continuous mode with 12 bit resol. */
  lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 8004f70:	2100      	movs	r1, #0
 8004f72:	4802      	ldr	r0, [pc, #8]	; (8004f7c <lis2dh12_Init+0x68>)
 8004f74:	f000 f966 	bl	8005244 <lis2dh12_operating_mode_set>
}
 8004f78:	bf00      	nop
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000600 	.word	0x20000600
 8004f80:	08005099 	.word	0x08005099
 8004f84:	080050db 	.word	0x080050db
 8004f88:	20000620 	.word	0x20000620
 8004f8c:	08005141 	.word	0x08005141
 8004f90:	2000068c 	.word	0x2000068c
 8004f94:	20000214 	.word	0x20000214

08004f98 <lis2dh12_read_data_polling>:

float * lis2dh12_read_data_polling(void)
{
 8004f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af04      	add	r7, sp, #16
  /* Read samples in polling mode (no int) */
    lis2dh12_reg_t reg;

    /* Read output only if new value available */
    lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 8004fa0:	1d3b      	adds	r3, r7, #4
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4835      	ldr	r0, [pc, #212]	; (800507c <lis2dh12_read_data_polling+0xe4>)
 8004fa6:	f000 fa14 	bl	80053d2 <lis2dh12_xl_data_ready_get>
    if (reg.byte) {
 8004faa:	793b      	ldrb	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d060      	beq.n	8005072 <lis2dh12_read_data_polling+0xda>
      /* Read accelerometer data */
      memset(data_raw_acceleration, 0x00, 3*sizeof(int16_t));
 8004fb0:	2206      	movs	r2, #6
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	4832      	ldr	r0, [pc, #200]	; (8005080 <lis2dh12_read_data_polling+0xe8>)
 8004fb6:	f000 faab 	bl	8005510 <memset>
      lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8004fba:	4931      	ldr	r1, [pc, #196]	; (8005080 <lis2dh12_read_data_polling+0xe8>)
 8004fbc:	482f      	ldr	r0, [pc, #188]	; (800507c <lis2dh12_read_data_polling+0xe4>)
 8004fbe:	f000 fa21 	bl	8005404 <lis2dh12_acceleration_raw_get>
      acceleration_mg[0] =
        lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <lis2dh12_read_data_polling+0xe8>)
 8004fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f8fd 	bl	80051c8 <lis2dh12_from_fs2_hr_to_mg>
 8004fce:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <lis2dh12_read_data_polling+0xec>)
 8004fd4:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] =
        lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8004fd8:	4b29      	ldr	r3, [pc, #164]	; (8005080 <lis2dh12_read_data_polling+0xe8>)
 8004fda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f8f2 	bl	80051c8 <lis2dh12_from_fs2_hr_to_mg>
 8004fe4:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 8004fe8:	4b26      	ldr	r3, [pc, #152]	; (8005084 <lis2dh12_read_data_polling+0xec>)
 8004fea:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] =
        lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <lis2dh12_read_data_polling+0xe8>)
 8004ff0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f8e7 	bl	80051c8 <lis2dh12_from_fs2_hr_to_mg>
 8004ffa:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 8004ffe:	4b21      	ldr	r3, [pc, #132]	; (8005084 <lis2dh12_read_data_polling+0xec>)
 8005000:	edc3 7a02 	vstr	s15, [r3, #8]
     
      //sprintf((char*)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
      sprintf((char*)tx_buffer, "%.0f,%.0f,%.0f\r\n", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8005004:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <lis2dh12_read_data_polling+0xec>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb fa9d 	bl	8000548 <__aeabi_f2d>
 800500e:	4680      	mov	r8, r0
 8005010:	4689      	mov	r9, r1
 8005012:	4b1c      	ldr	r3, [pc, #112]	; (8005084 <lis2dh12_read_data_polling+0xec>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fb fa96 	bl	8000548 <__aeabi_f2d>
 800501c:	4604      	mov	r4, r0
 800501e:	460d      	mov	r5, r1
 8005020:	4b18      	ldr	r3, [pc, #96]	; (8005084 <lis2dh12_read_data_polling+0xec>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb fa8f 	bl	8000548 <__aeabi_f2d>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005032:	e9cd 4500 	strd	r4, r5, [sp]
 8005036:	4642      	mov	r2, r8
 8005038:	464b      	mov	r3, r9
 800503a:	4913      	ldr	r1, [pc, #76]	; (8005088 <lis2dh12_read_data_polling+0xf0>)
 800503c:	4813      	ldr	r0, [pc, #76]	; (800508c <lis2dh12_read_data_polling+0xf4>)
 800503e:	f001 f8ef 	bl	8006220 <siprintf>
//
//      tx_com(tx_buffer, strlen((char const*)tx_buffer));

	  huart2.Instance->CR3 |= USART_CR3_DMAT;
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <lis2dh12_read_data_polling+0xf8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <lis2dh12_read_data_polling+0xf8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005050:	609a      	str	r2, [r3, #8]
	  HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)tx_buffer, (uint32_t)&huart2.Instance->TDR, strlen((char const*)tx_buffer));
 8005052:	4c0e      	ldr	r4, [pc, #56]	; (800508c <lis2dh12_read_data_polling+0xf4>)
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <lis2dh12_read_data_polling+0xf8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3328      	adds	r3, #40	; 0x28
 800505a:	461d      	mov	r5, r3
 800505c:	480b      	ldr	r0, [pc, #44]	; (800508c <lis2dh12_read_data_polling+0xf4>)
 800505e:	f7fb f8b7 	bl	80001d0 <strlen>
 8005062:	4603      	mov	r3, r0
 8005064:	462a      	mov	r2, r5
 8005066:	4621      	mov	r1, r4
 8005068:	480a      	ldr	r0, [pc, #40]	; (8005094 <lis2dh12_read_data_polling+0xfc>)
 800506a:	f7fc fe09 	bl	8001c80 <HAL_DMA_Start_IT>
	  return acceleration_mg;
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <lis2dh12_read_data_polling+0xec>)
 8005070:	e7ff      	b.n	8005072 <lis2dh12_read_data_polling+0xda>
              "Temperature [degC]:%6.2f\r\n",
              temperature_degC);
      tx_com(tx_buffer, strlen((char const*)tx_buffer));
    }
  */
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800507c:	20000600 	.word	0x20000600
 8005080:	20000200 	.word	0x20000200
 8005084:	20000208 	.word	0x20000208
 8005088:	08009d80 	.word	0x08009d80
 800508c:	20000218 	.word	0x20000218
 8005090:	200006d8 	.word	0x200006d8
 8005094:	2000068c 	.word	0x2000068c

08005098 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,
                              uint16_t len)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af04      	add	r7, sp, #16
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	461a      	mov	r2, r3
 80050a4:	460b      	mov	r3, r1
 80050a6:	72fb      	strb	r3, [r7, #11]
 80050a8:	4613      	mov	r3, r2
 80050aa:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F411RE)
  /* Write multiple command */
  reg |= 0x80;
 80050ac:	7afb      	ldrb	r3, [r7, #11]
 80050ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050b2:	72fb      	strb	r3, [r7, #11]
  //HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  HAL_I2C_Mem_Write(handle, LIS2DH12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80050b4:	7afb      	ldrb	r3, [r7, #11]
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050bc:	9302      	str	r3, [sp, #8]
 80050be:	893b      	ldrh	r3, [r7, #8]
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	2301      	movs	r3, #1
 80050c8:	2133      	movs	r1, #51	; 0x33
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7fd f99a 	bl	8002404 <HAL_I2C_Mem_Write>
#elif defined(SPC584B_DIS)
  /* Write multiple command */
  reg |= 0x80;
  i2c_lld_write(handle,  LIS2DH12_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b088      	sub	sp, #32
 80050de:	af04      	add	r7, sp, #16
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	607a      	str	r2, [r7, #4]
 80050e4:	461a      	mov	r2, r3
 80050e6:	460b      	mov	r3, r1
 80050e8:	72fb      	strb	r3, [r7, #11]
 80050ea:	4613      	mov	r3, r2
 80050ec:	813b      	strh	r3, [r7, #8]
#if defined(NUCLEO_F411RE)
  /* Read multiple command */
  reg |= 0x80;
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050f4:	72fb      	strb	r3, [r7, #11]
  //HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  HAL_I2C_Mem_Read(handle, LIS2DH12_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80050f6:	7afb      	ldrb	r3, [r7, #11]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050fe:	9302      	str	r3, [sp, #8]
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2301      	movs	r3, #1
 800510a:	2133      	movs	r1, #51	; 0x33
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7fd fa8d 	bl	800262c <HAL_I2C_Mem_Read>
#elif defined(SPC584B_DIS)
  /* Read multiple command */
  reg |= 0x80;
  i2c_lld_read(handle, LIS2DH12_I2C_ADD_L & 0xFE, reg, bufp, len);
#endif
  return 0;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
#if defined(NUCLEO_F411RE) | defined(STEVAL_MKI109V3)
  HAL_Delay(ms);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7fc fbbd 	bl	80018a4 <HAL_Delay>
#elif defined(SPC584B_DIS)
  osalThreadDelayMilliseconds(ms);
#endif
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <platform_init>:

/*
 * @brief  platform specific initialization (platform dependent)
 */
static void platform_init(void)
{
 8005132:	b480      	push	{r7}
 8005134:	af00      	add	r7, sp, #0
  TIM3->CCR2 = PWM_3V3;
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  HAL_Delay(1000);
#endif
}
 8005136:	bf00      	nop
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <DMATransferComplete>:

void DMATransferComplete(DMA_HandleTypeDef *hdma){
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
	huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8005148:	4b06      	ldr	r3, [pc, #24]	; (8005164 <DMATransferComplete+0x24>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <DMATransferComplete+0x24>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	200006d8 	.word	0x200006d8

08005168 <lis2dh12_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	461a      	mov	r2, r3
 8005174:	460b      	mov	r3, r1
 8005176:	72fb      	strb	r3, [r7, #11]
 8005178:	4613      	mov	r3, r2
 800517a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685c      	ldr	r4, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6898      	ldr	r0, [r3, #8]
 8005184:	893b      	ldrh	r3, [r7, #8]
 8005186:	7af9      	ldrb	r1, [r7, #11]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	47a0      	blx	r4
 800518c:	6178      	str	r0, [r7, #20]
  return ret;
 800518e:	697b      	ldr	r3, [r7, #20]
}
 8005190:	4618      	mov	r0, r3
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	bd90      	pop	{r4, r7, pc}

08005198 <lis2dh12_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                           uint16_t len)
{
 8005198:	b590      	push	{r4, r7, lr}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	461a      	mov	r2, r3
 80051a4:	460b      	mov	r3, r1
 80051a6:	72fb      	strb	r3, [r7, #11]
 80051a8:	4613      	mov	r3, r2
 80051aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681c      	ldr	r4, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6898      	ldr	r0, [r3, #8]
 80051b4:	893b      	ldrh	r3, [r7, #8]
 80051b6:	7af9      	ldrb	r1, [r7, #11]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	47a0      	blx	r4
 80051bc:	6178      	str	r0, [r7, #20]
  return ret;
 80051be:	697b      	ldr	r3, [r7, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd90      	pop	{r4, r7, pc}

080051c8 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	80fb      	strh	r3, [r7, #6]
  return ( (float_t)lsb / 16.0f ) * 1.0f;
 80051d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051de:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80051e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051e6:	eef0 7a66 	vmov.f32	s15, s13
}
 80051ea:	eeb0 0a67 	vmov.f32	s0, s15
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(stmdev_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
 8005204:	f107 0208 	add.w	r2, r7, #8
 8005208:	2301      	movs	r3, #1
 800520a:	211f      	movs	r1, #31
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ffab 	bl	8005168 <lis2dh12_read_reg>
 8005212:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <lis2dh12_temperature_meas_set+0x42>
    temp_cfg_reg.temp_en = (uint8_t) val;
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	b2da      	uxtb	r2, r3
 8005222:	7a3b      	ldrb	r3, [r7, #8]
 8005224:	f362 1387 	bfi	r3, r2, #6, #2
 8005228:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG, (uint8_t*)&temp_cfg_reg, 1);
 800522a:	f107 0208 	add.w	r2, r7, #8
 800522e:	2301      	movs	r3, #1
 8005230:	211f      	movs	r1, #31
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff ffb0 	bl	8005198 <lis2dh12_write_reg>
 8005238:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800523a:	68fb      	ldr	r3, [r7, #12]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <lis2dh12_operating_mode_set>:
  *                  and HR in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(stmdev_ctx_t *ctx, lis2dh12_op_md_t val)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8005250:	f107 0210 	add.w	r2, r7, #16
 8005254:	2301      	movs	r3, #1
 8005256:	2120      	movs	r1, #32
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff85 	bl	8005168 <lis2dh12_read_reg>
 800525e:	6178      	str	r0, [r7, #20]
                          (uint8_t*)&ctrl_reg1, 1);
  if (ret == 0) {
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <lis2dh12_operating_mode_set+0x32>
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8005266:	f107 020c 	add.w	r2, r7, #12
 800526a:	2301      	movs	r3, #1
 800526c:	2123      	movs	r1, #35	; 0x23
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff ff7a 	bl	8005168 <lis2dh12_read_reg>
 8005274:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&ctrl_reg4, 1);
  } 
  if (ret == 0) {
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d128      	bne.n	80052ce <lis2dh12_operating_mode_set+0x8a>
    if ( val == LIS2DH12_HR_12bit ) {
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <lis2dh12_operating_mode_set+0x4e>
      ctrl_reg1.lpen = 0;
 8005282:	7c3b      	ldrb	r3, [r7, #16]
 8005284:	f36f 03c3 	bfc	r3, #3, #1
 8005288:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 800528a:	7b3b      	ldrb	r3, [r7, #12]
 800528c:	f043 0308 	orr.w	r3, r3, #8
 8005290:	733b      	strb	r3, [r7, #12]
    }
    if (val == LIS2DH12_NM_10bit) {
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <lis2dh12_operating_mode_set+0x64>
      ctrl_reg1.lpen = 0;
 8005298:	7c3b      	ldrb	r3, [r7, #16]
 800529a:	f36f 03c3 	bfc	r3, #3, #1
 800529e:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 80052a0:	7b3b      	ldrb	r3, [r7, #12]
 80052a2:	f36f 03c3 	bfc	r3, #3, #1
 80052a6:	733b      	strb	r3, [r7, #12]
    }
    if (val == LIS2DH12_LP_8bit) {
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d107      	bne.n	80052be <lis2dh12_operating_mode_set+0x7a>
      ctrl_reg1.lpen = 1;
 80052ae:	7c3b      	ldrb	r3, [r7, #16]
 80052b0:	f043 0308 	orr.w	r3, r3, #8
 80052b4:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 80052b6:	7b3b      	ldrb	r3, [r7, #12]
 80052b8:	f36f 03c3 	bfc	r3, #3, #1
 80052bc:	733b      	strb	r3, [r7, #12]
    }
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80052be:	f107 0210 	add.w	r2, r7, #16
 80052c2:	2301      	movs	r3, #1
 80052c4:	2120      	movs	r1, #32
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff ff66 	bl	8005198 <lis2dh12_write_reg>
 80052cc:	6178      	str	r0, [r7, #20]
  } 
  if (ret == 0) {
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d107      	bne.n	80052e4 <lis2dh12_operating_mode_set+0xa0>
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 80052d4:	f107 020c 	add.w	r2, r7, #12
 80052d8:	2301      	movs	r3, #1
 80052da:	2123      	movs	r1, #35	; 0x23
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ff5b 	bl	8005198 <lis2dh12_write_reg>
 80052e2:	6178      	str	r0, [r7, #20]
  }
  return ret;
 80052e4:	697b      	ldr	r3, [r7, #20]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 80052fa:	f107 0208 	add.w	r2, r7, #8
 80052fe:	2301      	movs	r3, #1
 8005300:	2120      	movs	r1, #32
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff ff30 	bl	8005168 <lis2dh12_read_reg>
 8005308:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10f      	bne.n	8005330 <lis2dh12_data_rate_set+0x42>
    ctrl_reg1.odr = (uint8_t)val;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	b2da      	uxtb	r2, r3
 8005318:	7a3b      	ldrb	r3, [r7, #8]
 800531a:	f362 1307 	bfi	r3, r2, #4, #4
 800531e:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
 8005320:	f107 0208 	add.w	r2, r7, #8
 8005324:	2301      	movs	r3, #1
 8005326:	2120      	movs	r1, #32
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff35 	bl	8005198 <lis2dh12_write_reg>
 800532e:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8005346:	f107 0208 	add.w	r2, r7, #8
 800534a:	2301      	movs	r3, #1
 800534c:	2123      	movs	r1, #35	; 0x23
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ff0a 	bl	8005168 <lis2dh12_read_reg>
 8005354:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10f      	bne.n	800537c <lis2dh12_full_scale_set+0x42>
    ctrl_reg4.fs = (uint8_t)val;
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	b2da      	uxtb	r2, r3
 8005364:	7a3b      	ldrb	r3, [r7, #8]
 8005366:	f362 1305 	bfi	r3, r2, #4, #2
 800536a:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 800536c:	f107 0208 	add.w	r2, r7, #8
 8005370:	2301      	movs	r3, #1
 8005372:	2123      	movs	r1, #35	; 0x23
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff ff0f 	bl	8005198 <lis2dh12_write_reg>
 800537a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800537c:	68fb      	ldr	r3, [r7, #12]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 8005392:	f107 0208 	add.w	r2, r7, #8
 8005396:	2301      	movs	r3, #1
 8005398:	2123      	movs	r1, #35	; 0x23
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff fee4 	bl	8005168 <lis2dh12_read_reg>
 80053a0:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10f      	bne.n	80053c8 <lis2dh12_block_data_update_set+0x42>
    ctrl_reg4.bdu = val;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	7a3b      	ldrb	r3, [r7, #8]
 80053b2:	f362 13c7 	bfi	r3, r2, #7, #1
 80053b6:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4, (uint8_t*)&ctrl_reg4, 1);
 80053b8:	f107 0208 	add.w	r2, r7, #8
 80053bc:	2301      	movs	r3, #1
 80053be:	2123      	movs	r1, #35	; 0x23
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff fee9 	bl	8005198 <lis2dh12_write_reg>
 80053c6:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG, (uint8_t*)&status_reg, 1);
 80053dc:	f107 0208 	add.w	r2, r7, #8
 80053e0:	2301      	movs	r3, #1
 80053e2:	2127      	movs	r1, #39	; 0x27
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff febf 	bl	8005168 <lis2dh12_read_reg>
 80053ea:	60f8      	str	r0, [r7, #12]
  *val = status_reg.zyxda;
 80053ec:	7a3b      	ldrb	r3, [r7, #8]
 80053ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	701a      	strb	r2, [r3, #0]

  return ret;
 80053fa:	68fb      	ldr	r3, [r7, #12]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 800540e:	f107 020c 	add.w	r2, r7, #12
 8005412:	2306      	movs	r3, #6
 8005414:	2128      	movs	r1, #40	; 0x28
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fea6 	bl	8005168 <lis2dh12_read_reg>
 800541c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800541e:	7b7b      	ldrb	r3, [r7, #13]
 8005420:	b21a      	sxth	r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800542c:	b29b      	uxth	r3, r3
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	b29a      	uxth	r2, r3
 8005432:	7b3b      	ldrb	r3, [r7, #12]
 8005434:	b29b      	uxth	r3, r3
 8005436:	4413      	add	r3, r2
 8005438:	b29b      	uxth	r3, r3
 800543a:	b21a      	sxth	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	3302      	adds	r3, #2
 8005446:	b212      	sxth	r2, r2
 8005448:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	3302      	adds	r3, #2
 800544e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005452:	b29b      	uxth	r3, r3
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	b29a      	uxth	r2, r3
 8005458:	7bbb      	ldrb	r3, [r7, #14]
 800545a:	b29b      	uxth	r3, r3
 800545c:	4413      	add	r3, r2
 800545e:	b29a      	uxth	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	3302      	adds	r3, #2
 8005464:	b212      	sxth	r2, r2
 8005466:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005468:	7c7a      	ldrb	r2, [r7, #17]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	3304      	adds	r3, #4
 800546e:	b212      	sxth	r2, r2
 8005470:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800547a:	b29b      	uxth	r3, r3
 800547c:	021b      	lsls	r3, r3, #8
 800547e:	b29a      	uxth	r2, r3
 8005480:	7c3b      	ldrb	r3, [r7, #16]
 8005482:	b29b      	uxth	r3, r3
 8005484:	4413      	add	r3, r2
 8005486:	b29a      	uxth	r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	3304      	adds	r3, #4
 800548c:	b212      	sxth	r2, r2
 800548e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005490:	697b      	ldr	r3, [r7, #20]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
 80054a4:	2301      	movs	r3, #1
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	210f      	movs	r1, #15
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fe5c 	bl	8005168 <lis2dh12_read_reg>
 80054b0:	60f8      	str	r0, [r7, #12]
  return ret;
 80054b2:	68fb      	ldr	r3, [r7, #12]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <__errno>:
 80054bc:	4b01      	ldr	r3, [pc, #4]	; (80054c4 <__errno+0x8>)
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2000000c 	.word	0x2000000c

080054c8 <__libc_init_array>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	4d0d      	ldr	r5, [pc, #52]	; (8005500 <__libc_init_array+0x38>)
 80054cc:	4c0d      	ldr	r4, [pc, #52]	; (8005504 <__libc_init_array+0x3c>)
 80054ce:	1b64      	subs	r4, r4, r5
 80054d0:	10a4      	asrs	r4, r4, #2
 80054d2:	2600      	movs	r6, #0
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	d109      	bne.n	80054ec <__libc_init_array+0x24>
 80054d8:	4d0b      	ldr	r5, [pc, #44]	; (8005508 <__libc_init_array+0x40>)
 80054da:	4c0c      	ldr	r4, [pc, #48]	; (800550c <__libc_init_array+0x44>)
 80054dc:	f004 fc44 	bl	8009d68 <_init>
 80054e0:	1b64      	subs	r4, r4, r5
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	2600      	movs	r6, #0
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	d105      	bne.n	80054f6 <__libc_init_array+0x2e>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f0:	4798      	blx	r3
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7ee      	b.n	80054d4 <__libc_init_array+0xc>
 80054f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fa:	4798      	blx	r3
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7f2      	b.n	80054e6 <__libc_init_array+0x1e>
 8005500:	0800a29c 	.word	0x0800a29c
 8005504:	0800a29c 	.word	0x0800a29c
 8005508:	0800a29c 	.word	0x0800a29c
 800550c:	0800a2a0 	.word	0x0800a2a0

08005510 <memset>:
 8005510:	4402      	add	r2, r0
 8005512:	4603      	mov	r3, r0
 8005514:	4293      	cmp	r3, r2
 8005516:	d100      	bne.n	800551a <memset+0xa>
 8005518:	4770      	bx	lr
 800551a:	f803 1b01 	strb.w	r1, [r3], #1
 800551e:	e7f9      	b.n	8005514 <memset+0x4>

08005520 <__cvt>:
 8005520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	ec55 4b10 	vmov	r4, r5, d0
 8005528:	2d00      	cmp	r5, #0
 800552a:	460e      	mov	r6, r1
 800552c:	4619      	mov	r1, r3
 800552e:	462b      	mov	r3, r5
 8005530:	bfbb      	ittet	lt
 8005532:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005536:	461d      	movlt	r5, r3
 8005538:	2300      	movge	r3, #0
 800553a:	232d      	movlt	r3, #45	; 0x2d
 800553c:	700b      	strb	r3, [r1, #0]
 800553e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005540:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005544:	4691      	mov	r9, r2
 8005546:	f023 0820 	bic.w	r8, r3, #32
 800554a:	bfbc      	itt	lt
 800554c:	4622      	movlt	r2, r4
 800554e:	4614      	movlt	r4, r2
 8005550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005554:	d005      	beq.n	8005562 <__cvt+0x42>
 8005556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800555a:	d100      	bne.n	800555e <__cvt+0x3e>
 800555c:	3601      	adds	r6, #1
 800555e:	2102      	movs	r1, #2
 8005560:	e000      	b.n	8005564 <__cvt+0x44>
 8005562:	2103      	movs	r1, #3
 8005564:	ab03      	add	r3, sp, #12
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	ab02      	add	r3, sp, #8
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	ec45 4b10 	vmov	d0, r4, r5
 8005570:	4653      	mov	r3, sl
 8005572:	4632      	mov	r2, r6
 8005574:	f001 fdb4 	bl	80070e0 <_dtoa_r>
 8005578:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800557c:	4607      	mov	r7, r0
 800557e:	d102      	bne.n	8005586 <__cvt+0x66>
 8005580:	f019 0f01 	tst.w	r9, #1
 8005584:	d022      	beq.n	80055cc <__cvt+0xac>
 8005586:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800558a:	eb07 0906 	add.w	r9, r7, r6
 800558e:	d110      	bne.n	80055b2 <__cvt+0x92>
 8005590:	783b      	ldrb	r3, [r7, #0]
 8005592:	2b30      	cmp	r3, #48	; 0x30
 8005594:	d10a      	bne.n	80055ac <__cvt+0x8c>
 8005596:	2200      	movs	r2, #0
 8005598:	2300      	movs	r3, #0
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	f7fb fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a2:	b918      	cbnz	r0, 80055ac <__cvt+0x8c>
 80055a4:	f1c6 0601 	rsb	r6, r6, #1
 80055a8:	f8ca 6000 	str.w	r6, [sl]
 80055ac:	f8da 3000 	ldr.w	r3, [sl]
 80055b0:	4499      	add	r9, r3
 80055b2:	2200      	movs	r2, #0
 80055b4:	2300      	movs	r3, #0
 80055b6:	4620      	mov	r0, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	f7fb fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 80055be:	b108      	cbz	r0, 80055c4 <__cvt+0xa4>
 80055c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80055c4:	2230      	movs	r2, #48	; 0x30
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	454b      	cmp	r3, r9
 80055ca:	d307      	bcc.n	80055dc <__cvt+0xbc>
 80055cc:	9b03      	ldr	r3, [sp, #12]
 80055ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055d0:	1bdb      	subs	r3, r3, r7
 80055d2:	4638      	mov	r0, r7
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	b004      	add	sp, #16
 80055d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055dc:	1c59      	adds	r1, r3, #1
 80055de:	9103      	str	r1, [sp, #12]
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	e7f0      	b.n	80055c6 <__cvt+0xa6>

080055e4 <__exponent>:
 80055e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055e6:	4603      	mov	r3, r0
 80055e8:	2900      	cmp	r1, #0
 80055ea:	bfb8      	it	lt
 80055ec:	4249      	neglt	r1, r1
 80055ee:	f803 2b02 	strb.w	r2, [r3], #2
 80055f2:	bfb4      	ite	lt
 80055f4:	222d      	movlt	r2, #45	; 0x2d
 80055f6:	222b      	movge	r2, #43	; 0x2b
 80055f8:	2909      	cmp	r1, #9
 80055fa:	7042      	strb	r2, [r0, #1]
 80055fc:	dd2a      	ble.n	8005654 <__exponent+0x70>
 80055fe:	f10d 0407 	add.w	r4, sp, #7
 8005602:	46a4      	mov	ip, r4
 8005604:	270a      	movs	r7, #10
 8005606:	46a6      	mov	lr, r4
 8005608:	460a      	mov	r2, r1
 800560a:	fb91 f6f7 	sdiv	r6, r1, r7
 800560e:	fb07 1516 	mls	r5, r7, r6, r1
 8005612:	3530      	adds	r5, #48	; 0x30
 8005614:	2a63      	cmp	r2, #99	; 0x63
 8005616:	f104 34ff 	add.w	r4, r4, #4294967295
 800561a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800561e:	4631      	mov	r1, r6
 8005620:	dcf1      	bgt.n	8005606 <__exponent+0x22>
 8005622:	3130      	adds	r1, #48	; 0x30
 8005624:	f1ae 0502 	sub.w	r5, lr, #2
 8005628:	f804 1c01 	strb.w	r1, [r4, #-1]
 800562c:	1c44      	adds	r4, r0, #1
 800562e:	4629      	mov	r1, r5
 8005630:	4561      	cmp	r1, ip
 8005632:	d30a      	bcc.n	800564a <__exponent+0x66>
 8005634:	f10d 0209 	add.w	r2, sp, #9
 8005638:	eba2 020e 	sub.w	r2, r2, lr
 800563c:	4565      	cmp	r5, ip
 800563e:	bf88      	it	hi
 8005640:	2200      	movhi	r2, #0
 8005642:	4413      	add	r3, r2
 8005644:	1a18      	subs	r0, r3, r0
 8005646:	b003      	add	sp, #12
 8005648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800564a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800564e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005652:	e7ed      	b.n	8005630 <__exponent+0x4c>
 8005654:	2330      	movs	r3, #48	; 0x30
 8005656:	3130      	adds	r1, #48	; 0x30
 8005658:	7083      	strb	r3, [r0, #2]
 800565a:	70c1      	strb	r1, [r0, #3]
 800565c:	1d03      	adds	r3, r0, #4
 800565e:	e7f1      	b.n	8005644 <__exponent+0x60>

08005660 <_printf_float>:
 8005660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	ed2d 8b02 	vpush	{d8}
 8005668:	b08d      	sub	sp, #52	; 0x34
 800566a:	460c      	mov	r4, r1
 800566c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005670:	4616      	mov	r6, r2
 8005672:	461f      	mov	r7, r3
 8005674:	4605      	mov	r5, r0
 8005676:	f002 fe8f 	bl	8008398 <_localeconv_r>
 800567a:	f8d0 a000 	ldr.w	sl, [r0]
 800567e:	4650      	mov	r0, sl
 8005680:	f7fa fda6 	bl	80001d0 <strlen>
 8005684:	2300      	movs	r3, #0
 8005686:	930a      	str	r3, [sp, #40]	; 0x28
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	9305      	str	r3, [sp, #20]
 800568c:	f8d8 3000 	ldr.w	r3, [r8]
 8005690:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005694:	3307      	adds	r3, #7
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	f103 0208 	add.w	r2, r3, #8
 800569e:	f8c8 2000 	str.w	r2, [r8]
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056b2:	9307      	str	r3, [sp, #28]
 80056b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80056b8:	ee08 0a10 	vmov	s16, r0
 80056bc:	4b9f      	ldr	r3, [pc, #636]	; (800593c <_printf_float+0x2dc>)
 80056be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295
 80056c6:	f7fb fa31 	bl	8000b2c <__aeabi_dcmpun>
 80056ca:	bb88      	cbnz	r0, 8005730 <_printf_float+0xd0>
 80056cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056d0:	4b9a      	ldr	r3, [pc, #616]	; (800593c <_printf_float+0x2dc>)
 80056d2:	f04f 32ff 	mov.w	r2, #4294967295
 80056d6:	f7fb fa0b 	bl	8000af0 <__aeabi_dcmple>
 80056da:	bb48      	cbnz	r0, 8005730 <_printf_float+0xd0>
 80056dc:	2200      	movs	r2, #0
 80056de:	2300      	movs	r3, #0
 80056e0:	4640      	mov	r0, r8
 80056e2:	4649      	mov	r1, r9
 80056e4:	f7fb f9fa 	bl	8000adc <__aeabi_dcmplt>
 80056e8:	b110      	cbz	r0, 80056f0 <_printf_float+0x90>
 80056ea:	232d      	movs	r3, #45	; 0x2d
 80056ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f0:	4b93      	ldr	r3, [pc, #588]	; (8005940 <_printf_float+0x2e0>)
 80056f2:	4894      	ldr	r0, [pc, #592]	; (8005944 <_printf_float+0x2e4>)
 80056f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056f8:	bf94      	ite	ls
 80056fa:	4698      	movls	r8, r3
 80056fc:	4680      	movhi	r8, r0
 80056fe:	2303      	movs	r3, #3
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	9b05      	ldr	r3, [sp, #20]
 8005704:	f023 0204 	bic.w	r2, r3, #4
 8005708:	6022      	str	r2, [r4, #0]
 800570a:	f04f 0900 	mov.w	r9, #0
 800570e:	9700      	str	r7, [sp, #0]
 8005710:	4633      	mov	r3, r6
 8005712:	aa0b      	add	r2, sp, #44	; 0x2c
 8005714:	4621      	mov	r1, r4
 8005716:	4628      	mov	r0, r5
 8005718:	f000 f9d8 	bl	8005acc <_printf_common>
 800571c:	3001      	adds	r0, #1
 800571e:	f040 8090 	bne.w	8005842 <_printf_float+0x1e2>
 8005722:	f04f 30ff 	mov.w	r0, #4294967295
 8005726:	b00d      	add	sp, #52	; 0x34
 8005728:	ecbd 8b02 	vpop	{d8}
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	f7fb f9f8 	bl	8000b2c <__aeabi_dcmpun>
 800573c:	b140      	cbz	r0, 8005750 <_printf_float+0xf0>
 800573e:	464b      	mov	r3, r9
 8005740:	2b00      	cmp	r3, #0
 8005742:	bfbc      	itt	lt
 8005744:	232d      	movlt	r3, #45	; 0x2d
 8005746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800574a:	487f      	ldr	r0, [pc, #508]	; (8005948 <_printf_float+0x2e8>)
 800574c:	4b7f      	ldr	r3, [pc, #508]	; (800594c <_printf_float+0x2ec>)
 800574e:	e7d1      	b.n	80056f4 <_printf_float+0x94>
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005756:	9206      	str	r2, [sp, #24]
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	d13f      	bne.n	80057dc <_printf_float+0x17c>
 800575c:	2306      	movs	r3, #6
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	6861      	ldr	r1, [r4, #4]
 8005764:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005768:	2300      	movs	r3, #0
 800576a:	9303      	str	r3, [sp, #12]
 800576c:	ab0a      	add	r3, sp, #40	; 0x28
 800576e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005772:	ab09      	add	r3, sp, #36	; 0x24
 8005774:	ec49 8b10 	vmov	d0, r8, r9
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	6022      	str	r2, [r4, #0]
 800577c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff fecd 	bl	8005520 <__cvt>
 8005786:	9b06      	ldr	r3, [sp, #24]
 8005788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800578a:	2b47      	cmp	r3, #71	; 0x47
 800578c:	4680      	mov	r8, r0
 800578e:	d108      	bne.n	80057a2 <_printf_float+0x142>
 8005790:	1cc8      	adds	r0, r1, #3
 8005792:	db02      	blt.n	800579a <_printf_float+0x13a>
 8005794:	6863      	ldr	r3, [r4, #4]
 8005796:	4299      	cmp	r1, r3
 8005798:	dd41      	ble.n	800581e <_printf_float+0x1be>
 800579a:	f1ab 0b02 	sub.w	fp, fp, #2
 800579e:	fa5f fb8b 	uxtb.w	fp, fp
 80057a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057a6:	d820      	bhi.n	80057ea <_printf_float+0x18a>
 80057a8:	3901      	subs	r1, #1
 80057aa:	465a      	mov	r2, fp
 80057ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057b0:	9109      	str	r1, [sp, #36]	; 0x24
 80057b2:	f7ff ff17 	bl	80055e4 <__exponent>
 80057b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057b8:	1813      	adds	r3, r2, r0
 80057ba:	2a01      	cmp	r2, #1
 80057bc:	4681      	mov	r9, r0
 80057be:	6123      	str	r3, [r4, #16]
 80057c0:	dc02      	bgt.n	80057c8 <_printf_float+0x168>
 80057c2:	6822      	ldr	r2, [r4, #0]
 80057c4:	07d2      	lsls	r2, r2, #31
 80057c6:	d501      	bpl.n	80057cc <_printf_float+0x16c>
 80057c8:	3301      	adds	r3, #1
 80057ca:	6123      	str	r3, [r4, #16]
 80057cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d09c      	beq.n	800570e <_printf_float+0xae>
 80057d4:	232d      	movs	r3, #45	; 0x2d
 80057d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057da:	e798      	b.n	800570e <_printf_float+0xae>
 80057dc:	9a06      	ldr	r2, [sp, #24]
 80057de:	2a47      	cmp	r2, #71	; 0x47
 80057e0:	d1be      	bne.n	8005760 <_printf_float+0x100>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1bc      	bne.n	8005760 <_printf_float+0x100>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e7b9      	b.n	800575e <_printf_float+0xfe>
 80057ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80057ee:	d118      	bne.n	8005822 <_printf_float+0x1c2>
 80057f0:	2900      	cmp	r1, #0
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	dd0b      	ble.n	800580e <_printf_float+0x1ae>
 80057f6:	6121      	str	r1, [r4, #16]
 80057f8:	b913      	cbnz	r3, 8005800 <_printf_float+0x1a0>
 80057fa:	6822      	ldr	r2, [r4, #0]
 80057fc:	07d0      	lsls	r0, r2, #31
 80057fe:	d502      	bpl.n	8005806 <_printf_float+0x1a6>
 8005800:	3301      	adds	r3, #1
 8005802:	440b      	add	r3, r1
 8005804:	6123      	str	r3, [r4, #16]
 8005806:	65a1      	str	r1, [r4, #88]	; 0x58
 8005808:	f04f 0900 	mov.w	r9, #0
 800580c:	e7de      	b.n	80057cc <_printf_float+0x16c>
 800580e:	b913      	cbnz	r3, 8005816 <_printf_float+0x1b6>
 8005810:	6822      	ldr	r2, [r4, #0]
 8005812:	07d2      	lsls	r2, r2, #31
 8005814:	d501      	bpl.n	800581a <_printf_float+0x1ba>
 8005816:	3302      	adds	r3, #2
 8005818:	e7f4      	b.n	8005804 <_printf_float+0x1a4>
 800581a:	2301      	movs	r3, #1
 800581c:	e7f2      	b.n	8005804 <_printf_float+0x1a4>
 800581e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005824:	4299      	cmp	r1, r3
 8005826:	db05      	blt.n	8005834 <_printf_float+0x1d4>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	6121      	str	r1, [r4, #16]
 800582c:	07d8      	lsls	r0, r3, #31
 800582e:	d5ea      	bpl.n	8005806 <_printf_float+0x1a6>
 8005830:	1c4b      	adds	r3, r1, #1
 8005832:	e7e7      	b.n	8005804 <_printf_float+0x1a4>
 8005834:	2900      	cmp	r1, #0
 8005836:	bfd4      	ite	le
 8005838:	f1c1 0202 	rsble	r2, r1, #2
 800583c:	2201      	movgt	r2, #1
 800583e:	4413      	add	r3, r2
 8005840:	e7e0      	b.n	8005804 <_printf_float+0x1a4>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	055a      	lsls	r2, r3, #21
 8005846:	d407      	bmi.n	8005858 <_printf_float+0x1f8>
 8005848:	6923      	ldr	r3, [r4, #16]
 800584a:	4642      	mov	r2, r8
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	d12c      	bne.n	80058b0 <_printf_float+0x250>
 8005856:	e764      	b.n	8005722 <_printf_float+0xc2>
 8005858:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800585c:	f240 80e0 	bls.w	8005a20 <_printf_float+0x3c0>
 8005860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005864:	2200      	movs	r2, #0
 8005866:	2300      	movs	r3, #0
 8005868:	f7fb f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800586c:	2800      	cmp	r0, #0
 800586e:	d034      	beq.n	80058da <_printf_float+0x27a>
 8005870:	4a37      	ldr	r2, [pc, #220]	; (8005950 <_printf_float+0x2f0>)
 8005872:	2301      	movs	r3, #1
 8005874:	4631      	mov	r1, r6
 8005876:	4628      	mov	r0, r5
 8005878:	47b8      	blx	r7
 800587a:	3001      	adds	r0, #1
 800587c:	f43f af51 	beq.w	8005722 <_printf_float+0xc2>
 8005880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005884:	429a      	cmp	r2, r3
 8005886:	db02      	blt.n	800588e <_printf_float+0x22e>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	07d8      	lsls	r0, r3, #31
 800588c:	d510      	bpl.n	80058b0 <_printf_float+0x250>
 800588e:	ee18 3a10 	vmov	r3, s16
 8005892:	4652      	mov	r2, sl
 8005894:	4631      	mov	r1, r6
 8005896:	4628      	mov	r0, r5
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	f43f af41 	beq.w	8005722 <_printf_float+0xc2>
 80058a0:	f04f 0800 	mov.w	r8, #0
 80058a4:	f104 091a 	add.w	r9, r4, #26
 80058a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058aa:	3b01      	subs	r3, #1
 80058ac:	4543      	cmp	r3, r8
 80058ae:	dc09      	bgt.n	80058c4 <_printf_float+0x264>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	079b      	lsls	r3, r3, #30
 80058b4:	f100 8105 	bmi.w	8005ac2 <_printf_float+0x462>
 80058b8:	68e0      	ldr	r0, [r4, #12]
 80058ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058bc:	4298      	cmp	r0, r3
 80058be:	bfb8      	it	lt
 80058c0:	4618      	movlt	r0, r3
 80058c2:	e730      	b.n	8005726 <_printf_float+0xc6>
 80058c4:	2301      	movs	r3, #1
 80058c6:	464a      	mov	r2, r9
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f af27 	beq.w	8005722 <_printf_float+0xc2>
 80058d4:	f108 0801 	add.w	r8, r8, #1
 80058d8:	e7e6      	b.n	80058a8 <_printf_float+0x248>
 80058da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dc39      	bgt.n	8005954 <_printf_float+0x2f4>
 80058e0:	4a1b      	ldr	r2, [pc, #108]	; (8005950 <_printf_float+0x2f0>)
 80058e2:	2301      	movs	r3, #1
 80058e4:	4631      	mov	r1, r6
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b8      	blx	r7
 80058ea:	3001      	adds	r0, #1
 80058ec:	f43f af19 	beq.w	8005722 <_printf_float+0xc2>
 80058f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058f4:	4313      	orrs	r3, r2
 80058f6:	d102      	bne.n	80058fe <_printf_float+0x29e>
 80058f8:	6823      	ldr	r3, [r4, #0]
 80058fa:	07d9      	lsls	r1, r3, #31
 80058fc:	d5d8      	bpl.n	80058b0 <_printf_float+0x250>
 80058fe:	ee18 3a10 	vmov	r3, s16
 8005902:	4652      	mov	r2, sl
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f af09 	beq.w	8005722 <_printf_float+0xc2>
 8005910:	f04f 0900 	mov.w	r9, #0
 8005914:	f104 0a1a 	add.w	sl, r4, #26
 8005918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591a:	425b      	negs	r3, r3
 800591c:	454b      	cmp	r3, r9
 800591e:	dc01      	bgt.n	8005924 <_printf_float+0x2c4>
 8005920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005922:	e792      	b.n	800584a <_printf_float+0x1ea>
 8005924:	2301      	movs	r3, #1
 8005926:	4652      	mov	r2, sl
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	f43f aef7 	beq.w	8005722 <_printf_float+0xc2>
 8005934:	f109 0901 	add.w	r9, r9, #1
 8005938:	e7ee      	b.n	8005918 <_printf_float+0x2b8>
 800593a:	bf00      	nop
 800593c:	7fefffff 	.word	0x7fefffff
 8005940:	08009de0 	.word	0x08009de0
 8005944:	08009de4 	.word	0x08009de4
 8005948:	08009dec 	.word	0x08009dec
 800594c:	08009de8 	.word	0x08009de8
 8005950:	08009df0 	.word	0x08009df0
 8005954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005958:	429a      	cmp	r2, r3
 800595a:	bfa8      	it	ge
 800595c:	461a      	movge	r2, r3
 800595e:	2a00      	cmp	r2, #0
 8005960:	4691      	mov	r9, r2
 8005962:	dc37      	bgt.n	80059d4 <_printf_float+0x374>
 8005964:	f04f 0b00 	mov.w	fp, #0
 8005968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800596c:	f104 021a 	add.w	r2, r4, #26
 8005970:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005972:	9305      	str	r3, [sp, #20]
 8005974:	eba3 0309 	sub.w	r3, r3, r9
 8005978:	455b      	cmp	r3, fp
 800597a:	dc33      	bgt.n	80059e4 <_printf_float+0x384>
 800597c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005980:	429a      	cmp	r2, r3
 8005982:	db3b      	blt.n	80059fc <_printf_float+0x39c>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	07da      	lsls	r2, r3, #31
 8005988:	d438      	bmi.n	80059fc <_printf_float+0x39c>
 800598a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800598c:	9b05      	ldr	r3, [sp, #20]
 800598e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	eba2 0901 	sub.w	r9, r2, r1
 8005996:	4599      	cmp	r9, r3
 8005998:	bfa8      	it	ge
 800599a:	4699      	movge	r9, r3
 800599c:	f1b9 0f00 	cmp.w	r9, #0
 80059a0:	dc35      	bgt.n	8005a0e <_printf_float+0x3ae>
 80059a2:	f04f 0800 	mov.w	r8, #0
 80059a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059aa:	f104 0a1a 	add.w	sl, r4, #26
 80059ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059b2:	1a9b      	subs	r3, r3, r2
 80059b4:	eba3 0309 	sub.w	r3, r3, r9
 80059b8:	4543      	cmp	r3, r8
 80059ba:	f77f af79 	ble.w	80058b0 <_printf_float+0x250>
 80059be:	2301      	movs	r3, #1
 80059c0:	4652      	mov	r2, sl
 80059c2:	4631      	mov	r1, r6
 80059c4:	4628      	mov	r0, r5
 80059c6:	47b8      	blx	r7
 80059c8:	3001      	adds	r0, #1
 80059ca:	f43f aeaa 	beq.w	8005722 <_printf_float+0xc2>
 80059ce:	f108 0801 	add.w	r8, r8, #1
 80059d2:	e7ec      	b.n	80059ae <_printf_float+0x34e>
 80059d4:	4613      	mov	r3, r2
 80059d6:	4631      	mov	r1, r6
 80059d8:	4642      	mov	r2, r8
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	d1c0      	bne.n	8005964 <_printf_float+0x304>
 80059e2:	e69e      	b.n	8005722 <_printf_float+0xc2>
 80059e4:	2301      	movs	r3, #1
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	9205      	str	r2, [sp, #20]
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	f43f ae97 	beq.w	8005722 <_printf_float+0xc2>
 80059f4:	9a05      	ldr	r2, [sp, #20]
 80059f6:	f10b 0b01 	add.w	fp, fp, #1
 80059fa:	e7b9      	b.n	8005970 <_printf_float+0x310>
 80059fc:	ee18 3a10 	vmov	r3, s16
 8005a00:	4652      	mov	r2, sl
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d1be      	bne.n	800598a <_printf_float+0x32a>
 8005a0c:	e689      	b.n	8005722 <_printf_float+0xc2>
 8005a0e:	9a05      	ldr	r2, [sp, #20]
 8005a10:	464b      	mov	r3, r9
 8005a12:	4442      	add	r2, r8
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d1c1      	bne.n	80059a2 <_printf_float+0x342>
 8005a1e:	e680      	b.n	8005722 <_printf_float+0xc2>
 8005a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a22:	2a01      	cmp	r2, #1
 8005a24:	dc01      	bgt.n	8005a2a <_printf_float+0x3ca>
 8005a26:	07db      	lsls	r3, r3, #31
 8005a28:	d538      	bpl.n	8005a9c <_printf_float+0x43c>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	4631      	mov	r1, r6
 8005a30:	4628      	mov	r0, r5
 8005a32:	47b8      	blx	r7
 8005a34:	3001      	adds	r0, #1
 8005a36:	f43f ae74 	beq.w	8005722 <_printf_float+0xc2>
 8005a3a:	ee18 3a10 	vmov	r3, s16
 8005a3e:	4652      	mov	r2, sl
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f ae6b 	beq.w	8005722 <_printf_float+0xc2>
 8005a4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a50:	2200      	movs	r2, #0
 8005a52:	2300      	movs	r3, #0
 8005a54:	f7fb f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a58:	b9d8      	cbnz	r0, 8005a92 <_printf_float+0x432>
 8005a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5c:	f108 0201 	add.w	r2, r8, #1
 8005a60:	3b01      	subs	r3, #1
 8005a62:	4631      	mov	r1, r6
 8005a64:	4628      	mov	r0, r5
 8005a66:	47b8      	blx	r7
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d10e      	bne.n	8005a8a <_printf_float+0x42a>
 8005a6c:	e659      	b.n	8005722 <_printf_float+0xc2>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4652      	mov	r2, sl
 8005a72:	4631      	mov	r1, r6
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b8      	blx	r7
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f43f ae52 	beq.w	8005722 <_printf_float+0xc2>
 8005a7e:	f108 0801 	add.w	r8, r8, #1
 8005a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a84:	3b01      	subs	r3, #1
 8005a86:	4543      	cmp	r3, r8
 8005a88:	dcf1      	bgt.n	8005a6e <_printf_float+0x40e>
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a90:	e6dc      	b.n	800584c <_printf_float+0x1ec>
 8005a92:	f04f 0800 	mov.w	r8, #0
 8005a96:	f104 0a1a 	add.w	sl, r4, #26
 8005a9a:	e7f2      	b.n	8005a82 <_printf_float+0x422>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	e7df      	b.n	8005a62 <_printf_float+0x402>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	464a      	mov	r2, r9
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	f43f ae38 	beq.w	8005722 <_printf_float+0xc2>
 8005ab2:	f108 0801 	add.w	r8, r8, #1
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aba:	1a5b      	subs	r3, r3, r1
 8005abc:	4543      	cmp	r3, r8
 8005abe:	dcf0      	bgt.n	8005aa2 <_printf_float+0x442>
 8005ac0:	e6fa      	b.n	80058b8 <_printf_float+0x258>
 8005ac2:	f04f 0800 	mov.w	r8, #0
 8005ac6:	f104 0919 	add.w	r9, r4, #25
 8005aca:	e7f4      	b.n	8005ab6 <_printf_float+0x456>

08005acc <_printf_common>:
 8005acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	4699      	mov	r9, r3
 8005ad4:	688a      	ldr	r2, [r1, #8]
 8005ad6:	690b      	ldr	r3, [r1, #16]
 8005ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bfb8      	it	lt
 8005ae0:	4613      	movlt	r3, r2
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ae8:	4607      	mov	r7, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	b10a      	cbz	r2, 8005af2 <_printf_common+0x26>
 8005aee:	3301      	adds	r3, #1
 8005af0:	6033      	str	r3, [r6, #0]
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	0699      	lsls	r1, r3, #26
 8005af6:	bf42      	ittt	mi
 8005af8:	6833      	ldrmi	r3, [r6, #0]
 8005afa:	3302      	addmi	r3, #2
 8005afc:	6033      	strmi	r3, [r6, #0]
 8005afe:	6825      	ldr	r5, [r4, #0]
 8005b00:	f015 0506 	ands.w	r5, r5, #6
 8005b04:	d106      	bne.n	8005b14 <_printf_common+0x48>
 8005b06:	f104 0a19 	add.w	sl, r4, #25
 8005b0a:	68e3      	ldr	r3, [r4, #12]
 8005b0c:	6832      	ldr	r2, [r6, #0]
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	42ab      	cmp	r3, r5
 8005b12:	dc26      	bgt.n	8005b62 <_printf_common+0x96>
 8005b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b18:	1e13      	subs	r3, r2, #0
 8005b1a:	6822      	ldr	r2, [r4, #0]
 8005b1c:	bf18      	it	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	0692      	lsls	r2, r2, #26
 8005b22:	d42b      	bmi.n	8005b7c <_printf_common+0xb0>
 8005b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b28:	4649      	mov	r1, r9
 8005b2a:	4638      	mov	r0, r7
 8005b2c:	47c0      	blx	r8
 8005b2e:	3001      	adds	r0, #1
 8005b30:	d01e      	beq.n	8005b70 <_printf_common+0xa4>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	68e5      	ldr	r5, [r4, #12]
 8005b36:	6832      	ldr	r2, [r6, #0]
 8005b38:	f003 0306 	and.w	r3, r3, #6
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	bf08      	it	eq
 8005b40:	1aad      	subeq	r5, r5, r2
 8005b42:	68a3      	ldr	r3, [r4, #8]
 8005b44:	6922      	ldr	r2, [r4, #16]
 8005b46:	bf0c      	ite	eq
 8005b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b4c:	2500      	movne	r5, #0
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	bfc4      	itt	gt
 8005b52:	1a9b      	subgt	r3, r3, r2
 8005b54:	18ed      	addgt	r5, r5, r3
 8005b56:	2600      	movs	r6, #0
 8005b58:	341a      	adds	r4, #26
 8005b5a:	42b5      	cmp	r5, r6
 8005b5c:	d11a      	bne.n	8005b94 <_printf_common+0xc8>
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e008      	b.n	8005b74 <_printf_common+0xa8>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4652      	mov	r2, sl
 8005b66:	4649      	mov	r1, r9
 8005b68:	4638      	mov	r0, r7
 8005b6a:	47c0      	blx	r8
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d103      	bne.n	8005b78 <_printf_common+0xac>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b78:	3501      	adds	r5, #1
 8005b7a:	e7c6      	b.n	8005b0a <_printf_common+0x3e>
 8005b7c:	18e1      	adds	r1, r4, r3
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	2030      	movs	r0, #48	; 0x30
 8005b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b86:	4422      	add	r2, r4
 8005b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b90:	3302      	adds	r3, #2
 8005b92:	e7c7      	b.n	8005b24 <_printf_common+0x58>
 8005b94:	2301      	movs	r3, #1
 8005b96:	4622      	mov	r2, r4
 8005b98:	4649      	mov	r1, r9
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	47c0      	blx	r8
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d0e6      	beq.n	8005b70 <_printf_common+0xa4>
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7d9      	b.n	8005b5a <_printf_common+0x8e>
	...

08005ba8 <_printf_i>:
 8005ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	460c      	mov	r4, r1
 8005bae:	4691      	mov	r9, r2
 8005bb0:	7e27      	ldrb	r7, [r4, #24]
 8005bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bb4:	2f78      	cmp	r7, #120	; 0x78
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	469a      	mov	sl, r3
 8005bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bbe:	d807      	bhi.n	8005bd0 <_printf_i+0x28>
 8005bc0:	2f62      	cmp	r7, #98	; 0x62
 8005bc2:	d80a      	bhi.n	8005bda <_printf_i+0x32>
 8005bc4:	2f00      	cmp	r7, #0
 8005bc6:	f000 80d8 	beq.w	8005d7a <_printf_i+0x1d2>
 8005bca:	2f58      	cmp	r7, #88	; 0x58
 8005bcc:	f000 80a3 	beq.w	8005d16 <_printf_i+0x16e>
 8005bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bd8:	e03a      	b.n	8005c50 <_printf_i+0xa8>
 8005bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bde:	2b15      	cmp	r3, #21
 8005be0:	d8f6      	bhi.n	8005bd0 <_printf_i+0x28>
 8005be2:	a001      	add	r0, pc, #4	; (adr r0, 8005be8 <_printf_i+0x40>)
 8005be4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005be8:	08005c41 	.word	0x08005c41
 8005bec:	08005c55 	.word	0x08005c55
 8005bf0:	08005bd1 	.word	0x08005bd1
 8005bf4:	08005bd1 	.word	0x08005bd1
 8005bf8:	08005bd1 	.word	0x08005bd1
 8005bfc:	08005bd1 	.word	0x08005bd1
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005bd1 	.word	0x08005bd1
 8005c08:	08005bd1 	.word	0x08005bd1
 8005c0c:	08005bd1 	.word	0x08005bd1
 8005c10:	08005bd1 	.word	0x08005bd1
 8005c14:	08005d61 	.word	0x08005d61
 8005c18:	08005c85 	.word	0x08005c85
 8005c1c:	08005d43 	.word	0x08005d43
 8005c20:	08005bd1 	.word	0x08005bd1
 8005c24:	08005bd1 	.word	0x08005bd1
 8005c28:	08005d83 	.word	0x08005d83
 8005c2c:	08005bd1 	.word	0x08005bd1
 8005c30:	08005c85 	.word	0x08005c85
 8005c34:	08005bd1 	.word	0x08005bd1
 8005c38:	08005bd1 	.word	0x08005bd1
 8005c3c:	08005d4b 	.word	0x08005d4b
 8005c40:	680b      	ldr	r3, [r1, #0]
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	600a      	str	r2, [r1, #0]
 8005c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0a3      	b.n	8005d9c <_printf_i+0x1f4>
 8005c54:	6825      	ldr	r5, [r4, #0]
 8005c56:	6808      	ldr	r0, [r1, #0]
 8005c58:	062e      	lsls	r6, r5, #24
 8005c5a:	f100 0304 	add.w	r3, r0, #4
 8005c5e:	d50a      	bpl.n	8005c76 <_printf_i+0xce>
 8005c60:	6805      	ldr	r5, [r0, #0]
 8005c62:	600b      	str	r3, [r1, #0]
 8005c64:	2d00      	cmp	r5, #0
 8005c66:	da03      	bge.n	8005c70 <_printf_i+0xc8>
 8005c68:	232d      	movs	r3, #45	; 0x2d
 8005c6a:	426d      	negs	r5, r5
 8005c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c70:	485e      	ldr	r0, [pc, #376]	; (8005dec <_printf_i+0x244>)
 8005c72:	230a      	movs	r3, #10
 8005c74:	e019      	b.n	8005caa <_printf_i+0x102>
 8005c76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c7a:	6805      	ldr	r5, [r0, #0]
 8005c7c:	600b      	str	r3, [r1, #0]
 8005c7e:	bf18      	it	ne
 8005c80:	b22d      	sxthne	r5, r5
 8005c82:	e7ef      	b.n	8005c64 <_printf_i+0xbc>
 8005c84:	680b      	ldr	r3, [r1, #0]
 8005c86:	6825      	ldr	r5, [r4, #0]
 8005c88:	1d18      	adds	r0, r3, #4
 8005c8a:	6008      	str	r0, [r1, #0]
 8005c8c:	0628      	lsls	r0, r5, #24
 8005c8e:	d501      	bpl.n	8005c94 <_printf_i+0xec>
 8005c90:	681d      	ldr	r5, [r3, #0]
 8005c92:	e002      	b.n	8005c9a <_printf_i+0xf2>
 8005c94:	0669      	lsls	r1, r5, #25
 8005c96:	d5fb      	bpl.n	8005c90 <_printf_i+0xe8>
 8005c98:	881d      	ldrh	r5, [r3, #0]
 8005c9a:	4854      	ldr	r0, [pc, #336]	; (8005dec <_printf_i+0x244>)
 8005c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2308      	moveq	r3, #8
 8005ca2:	230a      	movne	r3, #10
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005caa:	6866      	ldr	r6, [r4, #4]
 8005cac:	60a6      	str	r6, [r4, #8]
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	bfa2      	ittt	ge
 8005cb2:	6821      	ldrge	r1, [r4, #0]
 8005cb4:	f021 0104 	bicge.w	r1, r1, #4
 8005cb8:	6021      	strge	r1, [r4, #0]
 8005cba:	b90d      	cbnz	r5, 8005cc0 <_printf_i+0x118>
 8005cbc:	2e00      	cmp	r6, #0
 8005cbe:	d04d      	beq.n	8005d5c <_printf_i+0x1b4>
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8005cca:	5dc7      	ldrb	r7, [r0, r7]
 8005ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cd0:	462f      	mov	r7, r5
 8005cd2:	42bb      	cmp	r3, r7
 8005cd4:	460d      	mov	r5, r1
 8005cd6:	d9f4      	bls.n	8005cc2 <_printf_i+0x11a>
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d10b      	bne.n	8005cf4 <_printf_i+0x14c>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	07df      	lsls	r7, r3, #31
 8005ce0:	d508      	bpl.n	8005cf4 <_printf_i+0x14c>
 8005ce2:	6923      	ldr	r3, [r4, #16]
 8005ce4:	6861      	ldr	r1, [r4, #4]
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	bfde      	ittt	le
 8005cea:	2330      	movle	r3, #48	; 0x30
 8005cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cf4:	1b92      	subs	r2, r2, r6
 8005cf6:	6122      	str	r2, [r4, #16]
 8005cf8:	f8cd a000 	str.w	sl, [sp]
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	aa03      	add	r2, sp, #12
 8005d00:	4621      	mov	r1, r4
 8005d02:	4640      	mov	r0, r8
 8005d04:	f7ff fee2 	bl	8005acc <_printf_common>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d14c      	bne.n	8005da6 <_printf_i+0x1fe>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	b004      	add	sp, #16
 8005d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d16:	4835      	ldr	r0, [pc, #212]	; (8005dec <_printf_i+0x244>)
 8005d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	680e      	ldr	r6, [r1, #0]
 8005d20:	061f      	lsls	r7, r3, #24
 8005d22:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d26:	600e      	str	r6, [r1, #0]
 8005d28:	d514      	bpl.n	8005d54 <_printf_i+0x1ac>
 8005d2a:	07d9      	lsls	r1, r3, #31
 8005d2c:	bf44      	itt	mi
 8005d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d32:	6023      	strmi	r3, [r4, #0]
 8005d34:	b91d      	cbnz	r5, 8005d3e <_printf_i+0x196>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f023 0320 	bic.w	r3, r3, #32
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	2310      	movs	r3, #16
 8005d40:	e7b0      	b.n	8005ca4 <_printf_i+0xfc>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	f043 0320 	orr.w	r3, r3, #32
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	2378      	movs	r3, #120	; 0x78
 8005d4c:	4828      	ldr	r0, [pc, #160]	; (8005df0 <_printf_i+0x248>)
 8005d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d52:	e7e3      	b.n	8005d1c <_printf_i+0x174>
 8005d54:	065e      	lsls	r6, r3, #25
 8005d56:	bf48      	it	mi
 8005d58:	b2ad      	uxthmi	r5, r5
 8005d5a:	e7e6      	b.n	8005d2a <_printf_i+0x182>
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	e7bb      	b.n	8005cd8 <_printf_i+0x130>
 8005d60:	680b      	ldr	r3, [r1, #0]
 8005d62:	6826      	ldr	r6, [r4, #0]
 8005d64:	6960      	ldr	r0, [r4, #20]
 8005d66:	1d1d      	adds	r5, r3, #4
 8005d68:	600d      	str	r5, [r1, #0]
 8005d6a:	0635      	lsls	r5, r6, #24
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	d501      	bpl.n	8005d74 <_printf_i+0x1cc>
 8005d70:	6018      	str	r0, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <_printf_i+0x1d2>
 8005d74:	0671      	lsls	r1, r6, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_printf_i+0x1c8>
 8005d78:	8018      	strh	r0, [r3, #0]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	4616      	mov	r6, r2
 8005d80:	e7ba      	b.n	8005cf8 <_printf_i+0x150>
 8005d82:	680b      	ldr	r3, [r1, #0]
 8005d84:	1d1a      	adds	r2, r3, #4
 8005d86:	600a      	str	r2, [r1, #0]
 8005d88:	681e      	ldr	r6, [r3, #0]
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f7fa fa26 	bl	80001e0 <memchr>
 8005d94:	b108      	cbz	r0, 8005d9a <_printf_i+0x1f2>
 8005d96:	1b80      	subs	r0, r0, r6
 8005d98:	6060      	str	r0, [r4, #4]
 8005d9a:	6863      	ldr	r3, [r4, #4]
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da4:	e7a8      	b.n	8005cf8 <_printf_i+0x150>
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	4632      	mov	r2, r6
 8005daa:	4649      	mov	r1, r9
 8005dac:	4640      	mov	r0, r8
 8005dae:	47d0      	blx	sl
 8005db0:	3001      	adds	r0, #1
 8005db2:	d0ab      	beq.n	8005d0c <_printf_i+0x164>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	079b      	lsls	r3, r3, #30
 8005db8:	d413      	bmi.n	8005de2 <_printf_i+0x23a>
 8005dba:	68e0      	ldr	r0, [r4, #12]
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	4298      	cmp	r0, r3
 8005dc0:	bfb8      	it	lt
 8005dc2:	4618      	movlt	r0, r3
 8005dc4:	e7a4      	b.n	8005d10 <_printf_i+0x168>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4632      	mov	r2, r6
 8005dca:	4649      	mov	r1, r9
 8005dcc:	4640      	mov	r0, r8
 8005dce:	47d0      	blx	sl
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d09b      	beq.n	8005d0c <_printf_i+0x164>
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	68e3      	ldr	r3, [r4, #12]
 8005dd8:	9903      	ldr	r1, [sp, #12]
 8005dda:	1a5b      	subs	r3, r3, r1
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	dcf2      	bgt.n	8005dc6 <_printf_i+0x21e>
 8005de0:	e7eb      	b.n	8005dba <_printf_i+0x212>
 8005de2:	2500      	movs	r5, #0
 8005de4:	f104 0619 	add.w	r6, r4, #25
 8005de8:	e7f5      	b.n	8005dd6 <_printf_i+0x22e>
 8005dea:	bf00      	nop
 8005dec:	08009df2 	.word	0x08009df2
 8005df0:	08009e03 	.word	0x08009e03

08005df4 <_scanf_float>:
 8005df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	4617      	mov	r7, r2
 8005dfc:	9303      	str	r3, [sp, #12]
 8005dfe:	688b      	ldr	r3, [r1, #8]
 8005e00:	1e5a      	subs	r2, r3, #1
 8005e02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005e06:	bf83      	ittte	hi
 8005e08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005e0c:	195b      	addhi	r3, r3, r5
 8005e0e:	9302      	strhi	r3, [sp, #8]
 8005e10:	2300      	movls	r3, #0
 8005e12:	bf86      	itte	hi
 8005e14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005e18:	608b      	strhi	r3, [r1, #8]
 8005e1a:	9302      	strls	r3, [sp, #8]
 8005e1c:	680b      	ldr	r3, [r1, #0]
 8005e1e:	468b      	mov	fp, r1
 8005e20:	2500      	movs	r5, #0
 8005e22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005e26:	f84b 3b1c 	str.w	r3, [fp], #28
 8005e2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005e2e:	4680      	mov	r8, r0
 8005e30:	460c      	mov	r4, r1
 8005e32:	465e      	mov	r6, fp
 8005e34:	46aa      	mov	sl, r5
 8005e36:	46a9      	mov	r9, r5
 8005e38:	9501      	str	r5, [sp, #4]
 8005e3a:	68a2      	ldr	r2, [r4, #8]
 8005e3c:	b152      	cbz	r2, 8005e54 <_scanf_float+0x60>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b4e      	cmp	r3, #78	; 0x4e
 8005e44:	d864      	bhi.n	8005f10 <_scanf_float+0x11c>
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d83c      	bhi.n	8005ec4 <_scanf_float+0xd0>
 8005e4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005e4e:	b2c8      	uxtb	r0, r1
 8005e50:	280e      	cmp	r0, #14
 8005e52:	d93a      	bls.n	8005eca <_scanf_float+0xd6>
 8005e54:	f1b9 0f00 	cmp.w	r9, #0
 8005e58:	d003      	beq.n	8005e62 <_scanf_float+0x6e>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e66:	f1ba 0f01 	cmp.w	sl, #1
 8005e6a:	f200 8113 	bhi.w	8006094 <_scanf_float+0x2a0>
 8005e6e:	455e      	cmp	r6, fp
 8005e70:	f200 8105 	bhi.w	800607e <_scanf_float+0x28a>
 8005e74:	2501      	movs	r5, #1
 8005e76:	4628      	mov	r0, r5
 8005e78:	b007      	add	sp, #28
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e82:	2a0d      	cmp	r2, #13
 8005e84:	d8e6      	bhi.n	8005e54 <_scanf_float+0x60>
 8005e86:	a101      	add	r1, pc, #4	; (adr r1, 8005e8c <_scanf_float+0x98>)
 8005e88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e8c:	08005fcb 	.word	0x08005fcb
 8005e90:	08005e55 	.word	0x08005e55
 8005e94:	08005e55 	.word	0x08005e55
 8005e98:	08005e55 	.word	0x08005e55
 8005e9c:	0800602b 	.word	0x0800602b
 8005ea0:	08006003 	.word	0x08006003
 8005ea4:	08005e55 	.word	0x08005e55
 8005ea8:	08005e55 	.word	0x08005e55
 8005eac:	08005fd9 	.word	0x08005fd9
 8005eb0:	08005e55 	.word	0x08005e55
 8005eb4:	08005e55 	.word	0x08005e55
 8005eb8:	08005e55 	.word	0x08005e55
 8005ebc:	08005e55 	.word	0x08005e55
 8005ec0:	08005f91 	.word	0x08005f91
 8005ec4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005ec8:	e7db      	b.n	8005e82 <_scanf_float+0x8e>
 8005eca:	290e      	cmp	r1, #14
 8005ecc:	d8c2      	bhi.n	8005e54 <_scanf_float+0x60>
 8005ece:	a001      	add	r0, pc, #4	; (adr r0, 8005ed4 <_scanf_float+0xe0>)
 8005ed0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ed4:	08005f83 	.word	0x08005f83
 8005ed8:	08005e55 	.word	0x08005e55
 8005edc:	08005f83 	.word	0x08005f83
 8005ee0:	08006017 	.word	0x08006017
 8005ee4:	08005e55 	.word	0x08005e55
 8005ee8:	08005f31 	.word	0x08005f31
 8005eec:	08005f6d 	.word	0x08005f6d
 8005ef0:	08005f6d 	.word	0x08005f6d
 8005ef4:	08005f6d 	.word	0x08005f6d
 8005ef8:	08005f6d 	.word	0x08005f6d
 8005efc:	08005f6d 	.word	0x08005f6d
 8005f00:	08005f6d 	.word	0x08005f6d
 8005f04:	08005f6d 	.word	0x08005f6d
 8005f08:	08005f6d 	.word	0x08005f6d
 8005f0c:	08005f6d 	.word	0x08005f6d
 8005f10:	2b6e      	cmp	r3, #110	; 0x6e
 8005f12:	d809      	bhi.n	8005f28 <_scanf_float+0x134>
 8005f14:	2b60      	cmp	r3, #96	; 0x60
 8005f16:	d8b2      	bhi.n	8005e7e <_scanf_float+0x8a>
 8005f18:	2b54      	cmp	r3, #84	; 0x54
 8005f1a:	d077      	beq.n	800600c <_scanf_float+0x218>
 8005f1c:	2b59      	cmp	r3, #89	; 0x59
 8005f1e:	d199      	bne.n	8005e54 <_scanf_float+0x60>
 8005f20:	2d07      	cmp	r5, #7
 8005f22:	d197      	bne.n	8005e54 <_scanf_float+0x60>
 8005f24:	2508      	movs	r5, #8
 8005f26:	e029      	b.n	8005f7c <_scanf_float+0x188>
 8005f28:	2b74      	cmp	r3, #116	; 0x74
 8005f2a:	d06f      	beq.n	800600c <_scanf_float+0x218>
 8005f2c:	2b79      	cmp	r3, #121	; 0x79
 8005f2e:	e7f6      	b.n	8005f1e <_scanf_float+0x12a>
 8005f30:	6821      	ldr	r1, [r4, #0]
 8005f32:	05c8      	lsls	r0, r1, #23
 8005f34:	d51a      	bpl.n	8005f6c <_scanf_float+0x178>
 8005f36:	9b02      	ldr	r3, [sp, #8]
 8005f38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f3c:	6021      	str	r1, [r4, #0]
 8005f3e:	f109 0901 	add.w	r9, r9, #1
 8005f42:	b11b      	cbz	r3, 8005f4c <_scanf_float+0x158>
 8005f44:	3b01      	subs	r3, #1
 8005f46:	3201      	adds	r2, #1
 8005f48:	9302      	str	r3, [sp, #8]
 8005f4a:	60a2      	str	r2, [r4, #8]
 8005f4c:	68a3      	ldr	r3, [r4, #8]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	60a3      	str	r3, [r4, #8]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	3301      	adds	r3, #1
 8005f56:	6123      	str	r3, [r4, #16]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	f340 8084 	ble.w	800606c <_scanf_float+0x278>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	e766      	b.n	8005e3a <_scanf_float+0x46>
 8005f6c:	eb1a 0f05 	cmn.w	sl, r5
 8005f70:	f47f af70 	bne.w	8005e54 <_scanf_float+0x60>
 8005f74:	6822      	ldr	r2, [r4, #0]
 8005f76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005f7a:	6022      	str	r2, [r4, #0]
 8005f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8005f80:	e7e4      	b.n	8005f4c <_scanf_float+0x158>
 8005f82:	6822      	ldr	r2, [r4, #0]
 8005f84:	0610      	lsls	r0, r2, #24
 8005f86:	f57f af65 	bpl.w	8005e54 <_scanf_float+0x60>
 8005f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f8e:	e7f4      	b.n	8005f7a <_scanf_float+0x186>
 8005f90:	f1ba 0f00 	cmp.w	sl, #0
 8005f94:	d10e      	bne.n	8005fb4 <_scanf_float+0x1c0>
 8005f96:	f1b9 0f00 	cmp.w	r9, #0
 8005f9a:	d10e      	bne.n	8005fba <_scanf_float+0x1c6>
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005fa2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005fa6:	d108      	bne.n	8005fba <_scanf_float+0x1c6>
 8005fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	f04f 0a01 	mov.w	sl, #1
 8005fb2:	e7e3      	b.n	8005f7c <_scanf_float+0x188>
 8005fb4:	f1ba 0f02 	cmp.w	sl, #2
 8005fb8:	d055      	beq.n	8006066 <_scanf_float+0x272>
 8005fba:	2d01      	cmp	r5, #1
 8005fbc:	d002      	beq.n	8005fc4 <_scanf_float+0x1d0>
 8005fbe:	2d04      	cmp	r5, #4
 8005fc0:	f47f af48 	bne.w	8005e54 <_scanf_float+0x60>
 8005fc4:	3501      	adds	r5, #1
 8005fc6:	b2ed      	uxtb	r5, r5
 8005fc8:	e7d8      	b.n	8005f7c <_scanf_float+0x188>
 8005fca:	f1ba 0f01 	cmp.w	sl, #1
 8005fce:	f47f af41 	bne.w	8005e54 <_scanf_float+0x60>
 8005fd2:	f04f 0a02 	mov.w	sl, #2
 8005fd6:	e7d1      	b.n	8005f7c <_scanf_float+0x188>
 8005fd8:	b97d      	cbnz	r5, 8005ffa <_scanf_float+0x206>
 8005fda:	f1b9 0f00 	cmp.w	r9, #0
 8005fde:	f47f af3c 	bne.w	8005e5a <_scanf_float+0x66>
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005fe8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005fec:	f47f af39 	bne.w	8005e62 <_scanf_float+0x6e>
 8005ff0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ff4:	6022      	str	r2, [r4, #0]
 8005ff6:	2501      	movs	r5, #1
 8005ff8:	e7c0      	b.n	8005f7c <_scanf_float+0x188>
 8005ffa:	2d03      	cmp	r5, #3
 8005ffc:	d0e2      	beq.n	8005fc4 <_scanf_float+0x1d0>
 8005ffe:	2d05      	cmp	r5, #5
 8006000:	e7de      	b.n	8005fc0 <_scanf_float+0x1cc>
 8006002:	2d02      	cmp	r5, #2
 8006004:	f47f af26 	bne.w	8005e54 <_scanf_float+0x60>
 8006008:	2503      	movs	r5, #3
 800600a:	e7b7      	b.n	8005f7c <_scanf_float+0x188>
 800600c:	2d06      	cmp	r5, #6
 800600e:	f47f af21 	bne.w	8005e54 <_scanf_float+0x60>
 8006012:	2507      	movs	r5, #7
 8006014:	e7b2      	b.n	8005f7c <_scanf_float+0x188>
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	0591      	lsls	r1, r2, #22
 800601a:	f57f af1b 	bpl.w	8005e54 <_scanf_float+0x60>
 800601e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006022:	6022      	str	r2, [r4, #0]
 8006024:	f8cd 9004 	str.w	r9, [sp, #4]
 8006028:	e7a8      	b.n	8005f7c <_scanf_float+0x188>
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006030:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006034:	d006      	beq.n	8006044 <_scanf_float+0x250>
 8006036:	0550      	lsls	r0, r2, #21
 8006038:	f57f af0c 	bpl.w	8005e54 <_scanf_float+0x60>
 800603c:	f1b9 0f00 	cmp.w	r9, #0
 8006040:	f43f af0f 	beq.w	8005e62 <_scanf_float+0x6e>
 8006044:	0591      	lsls	r1, r2, #22
 8006046:	bf58      	it	pl
 8006048:	9901      	ldrpl	r1, [sp, #4]
 800604a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800604e:	bf58      	it	pl
 8006050:	eba9 0101 	subpl.w	r1, r9, r1
 8006054:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006058:	bf58      	it	pl
 800605a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800605e:	6022      	str	r2, [r4, #0]
 8006060:	f04f 0900 	mov.w	r9, #0
 8006064:	e78a      	b.n	8005f7c <_scanf_float+0x188>
 8006066:	f04f 0a03 	mov.w	sl, #3
 800606a:	e787      	b.n	8005f7c <_scanf_float+0x188>
 800606c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006070:	4639      	mov	r1, r7
 8006072:	4640      	mov	r0, r8
 8006074:	4798      	blx	r3
 8006076:	2800      	cmp	r0, #0
 8006078:	f43f aedf 	beq.w	8005e3a <_scanf_float+0x46>
 800607c:	e6ea      	b.n	8005e54 <_scanf_float+0x60>
 800607e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006082:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006086:	463a      	mov	r2, r7
 8006088:	4640      	mov	r0, r8
 800608a:	4798      	blx	r3
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	3b01      	subs	r3, #1
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	e6ec      	b.n	8005e6e <_scanf_float+0x7a>
 8006094:	1e6b      	subs	r3, r5, #1
 8006096:	2b06      	cmp	r3, #6
 8006098:	d825      	bhi.n	80060e6 <_scanf_float+0x2f2>
 800609a:	2d02      	cmp	r5, #2
 800609c:	d836      	bhi.n	800610c <_scanf_float+0x318>
 800609e:	455e      	cmp	r6, fp
 80060a0:	f67f aee8 	bls.w	8005e74 <_scanf_float+0x80>
 80060a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060ac:	463a      	mov	r2, r7
 80060ae:	4640      	mov	r0, r8
 80060b0:	4798      	blx	r3
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	e7f1      	b.n	800609e <_scanf_float+0x2aa>
 80060ba:	9802      	ldr	r0, [sp, #8]
 80060bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	463a      	mov	r2, r7
 80060c8:	4640      	mov	r0, r8
 80060ca:	4798      	blx	r3
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060d6:	fa5f fa8a 	uxtb.w	sl, sl
 80060da:	f1ba 0f02 	cmp.w	sl, #2
 80060de:	d1ec      	bne.n	80060ba <_scanf_float+0x2c6>
 80060e0:	3d03      	subs	r5, #3
 80060e2:	b2ed      	uxtb	r5, r5
 80060e4:	1b76      	subs	r6, r6, r5
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	05da      	lsls	r2, r3, #23
 80060ea:	d52f      	bpl.n	800614c <_scanf_float+0x358>
 80060ec:	055b      	lsls	r3, r3, #21
 80060ee:	d510      	bpl.n	8006112 <_scanf_float+0x31e>
 80060f0:	455e      	cmp	r6, fp
 80060f2:	f67f aebf 	bls.w	8005e74 <_scanf_float+0x80>
 80060f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80060fe:	463a      	mov	r2, r7
 8006100:	4640      	mov	r0, r8
 8006102:	4798      	blx	r3
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	3b01      	subs	r3, #1
 8006108:	6123      	str	r3, [r4, #16]
 800610a:	e7f1      	b.n	80060f0 <_scanf_float+0x2fc>
 800610c:	46aa      	mov	sl, r5
 800610e:	9602      	str	r6, [sp, #8]
 8006110:	e7df      	b.n	80060d2 <_scanf_float+0x2de>
 8006112:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	2965      	cmp	r1, #101	; 0x65
 800611a:	f103 33ff 	add.w	r3, r3, #4294967295
 800611e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006122:	6123      	str	r3, [r4, #16]
 8006124:	d00c      	beq.n	8006140 <_scanf_float+0x34c>
 8006126:	2945      	cmp	r1, #69	; 0x45
 8006128:	d00a      	beq.n	8006140 <_scanf_float+0x34c>
 800612a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800612e:	463a      	mov	r2, r7
 8006130:	4640      	mov	r0, r8
 8006132:	4798      	blx	r3
 8006134:	6923      	ldr	r3, [r4, #16]
 8006136:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800613a:	3b01      	subs	r3, #1
 800613c:	1eb5      	subs	r5, r6, #2
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006144:	463a      	mov	r2, r7
 8006146:	4640      	mov	r0, r8
 8006148:	4798      	blx	r3
 800614a:	462e      	mov	r6, r5
 800614c:	6825      	ldr	r5, [r4, #0]
 800614e:	f015 0510 	ands.w	r5, r5, #16
 8006152:	d158      	bne.n	8006206 <_scanf_float+0x412>
 8006154:	7035      	strb	r5, [r6, #0]
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800615c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006160:	d11c      	bne.n	800619c <_scanf_float+0x3a8>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	454b      	cmp	r3, r9
 8006166:	eba3 0209 	sub.w	r2, r3, r9
 800616a:	d124      	bne.n	80061b6 <_scanf_float+0x3c2>
 800616c:	2200      	movs	r2, #0
 800616e:	4659      	mov	r1, fp
 8006170:	4640      	mov	r0, r8
 8006172:	f000 fe9b 	bl	8006eac <_strtod_r>
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	6821      	ldr	r1, [r4, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f011 0f02 	tst.w	r1, #2
 8006180:	ec57 6b10 	vmov	r6, r7, d0
 8006184:	f103 0204 	add.w	r2, r3, #4
 8006188:	d020      	beq.n	80061cc <_scanf_float+0x3d8>
 800618a:	9903      	ldr	r1, [sp, #12]
 800618c:	600a      	str	r2, [r1, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	e9c3 6700 	strd	r6, r7, [r3]
 8006194:	68e3      	ldr	r3, [r4, #12]
 8006196:	3301      	adds	r3, #1
 8006198:	60e3      	str	r3, [r4, #12]
 800619a:	e66c      	b.n	8005e76 <_scanf_float+0x82>
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0e4      	beq.n	800616c <_scanf_float+0x378>
 80061a2:	9905      	ldr	r1, [sp, #20]
 80061a4:	230a      	movs	r3, #10
 80061a6:	462a      	mov	r2, r5
 80061a8:	3101      	adds	r1, #1
 80061aa:	4640      	mov	r0, r8
 80061ac:	f000 ff08 	bl	8006fc0 <_strtol_r>
 80061b0:	9b04      	ldr	r3, [sp, #16]
 80061b2:	9e05      	ldr	r6, [sp, #20]
 80061b4:	1ac2      	subs	r2, r0, r3
 80061b6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80061ba:	429e      	cmp	r6, r3
 80061bc:	bf28      	it	cs
 80061be:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80061c2:	4912      	ldr	r1, [pc, #72]	; (800620c <_scanf_float+0x418>)
 80061c4:	4630      	mov	r0, r6
 80061c6:	f000 f82b 	bl	8006220 <siprintf>
 80061ca:	e7cf      	b.n	800616c <_scanf_float+0x378>
 80061cc:	f011 0f04 	tst.w	r1, #4
 80061d0:	9903      	ldr	r1, [sp, #12]
 80061d2:	600a      	str	r2, [r1, #0]
 80061d4:	d1db      	bne.n	800618e <_scanf_float+0x39a>
 80061d6:	f8d3 8000 	ldr.w	r8, [r3]
 80061da:	ee10 2a10 	vmov	r2, s0
 80061de:	ee10 0a10 	vmov	r0, s0
 80061e2:	463b      	mov	r3, r7
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fa fca1 	bl	8000b2c <__aeabi_dcmpun>
 80061ea:	b128      	cbz	r0, 80061f8 <_scanf_float+0x404>
 80061ec:	4808      	ldr	r0, [pc, #32]	; (8006210 <_scanf_float+0x41c>)
 80061ee:	f000 f811 	bl	8006214 <nanf>
 80061f2:	ed88 0a00 	vstr	s0, [r8]
 80061f6:	e7cd      	b.n	8006194 <_scanf_float+0x3a0>
 80061f8:	4630      	mov	r0, r6
 80061fa:	4639      	mov	r1, r7
 80061fc:	f7fa fcf4 	bl	8000be8 <__aeabi_d2f>
 8006200:	f8c8 0000 	str.w	r0, [r8]
 8006204:	e7c6      	b.n	8006194 <_scanf_float+0x3a0>
 8006206:	2500      	movs	r5, #0
 8006208:	e635      	b.n	8005e76 <_scanf_float+0x82>
 800620a:	bf00      	nop
 800620c:	08009e14 	.word	0x08009e14
 8006210:	0800a230 	.word	0x0800a230

08006214 <nanf>:
 8006214:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800621c <nanf+0x8>
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	7fc00000 	.word	0x7fc00000

08006220 <siprintf>:
 8006220:	b40e      	push	{r1, r2, r3}
 8006222:	b500      	push	{lr}
 8006224:	b09c      	sub	sp, #112	; 0x70
 8006226:	ab1d      	add	r3, sp, #116	; 0x74
 8006228:	9002      	str	r0, [sp, #8]
 800622a:	9006      	str	r0, [sp, #24]
 800622c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006230:	4809      	ldr	r0, [pc, #36]	; (8006258 <siprintf+0x38>)
 8006232:	9107      	str	r1, [sp, #28]
 8006234:	9104      	str	r1, [sp, #16]
 8006236:	4909      	ldr	r1, [pc, #36]	; (800625c <siprintf+0x3c>)
 8006238:	f853 2b04 	ldr.w	r2, [r3], #4
 800623c:	9105      	str	r1, [sp, #20]
 800623e:	6800      	ldr	r0, [r0, #0]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	a902      	add	r1, sp, #8
 8006244:	f002 fea4 	bl	8008f90 <_svfiprintf_r>
 8006248:	9b02      	ldr	r3, [sp, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	b01c      	add	sp, #112	; 0x70
 8006250:	f85d eb04 	ldr.w	lr, [sp], #4
 8006254:	b003      	add	sp, #12
 8006256:	4770      	bx	lr
 8006258:	2000000c 	.word	0x2000000c
 800625c:	ffff0208 	.word	0xffff0208

08006260 <sulp>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4604      	mov	r4, r0
 8006264:	460d      	mov	r5, r1
 8006266:	ec45 4b10 	vmov	d0, r4, r5
 800626a:	4616      	mov	r6, r2
 800626c:	f002 fc2c 	bl	8008ac8 <__ulp>
 8006270:	ec51 0b10 	vmov	r0, r1, d0
 8006274:	b17e      	cbz	r6, 8006296 <sulp+0x36>
 8006276:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800627a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800627e:	2b00      	cmp	r3, #0
 8006280:	dd09      	ble.n	8006296 <sulp+0x36>
 8006282:	051b      	lsls	r3, r3, #20
 8006284:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006288:	2400      	movs	r4, #0
 800628a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800628e:	4622      	mov	r2, r4
 8006290:	462b      	mov	r3, r5
 8006292:	f7fa f9b1 	bl	80005f8 <__aeabi_dmul>
 8006296:	bd70      	pop	{r4, r5, r6, pc}

08006298 <_strtod_l>:
 8006298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	b0a3      	sub	sp, #140	; 0x8c
 800629e:	461f      	mov	r7, r3
 80062a0:	2300      	movs	r3, #0
 80062a2:	931e      	str	r3, [sp, #120]	; 0x78
 80062a4:	4ba4      	ldr	r3, [pc, #656]	; (8006538 <_strtod_l+0x2a0>)
 80062a6:	9219      	str	r2, [sp, #100]	; 0x64
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	9307      	str	r3, [sp, #28]
 80062ac:	4604      	mov	r4, r0
 80062ae:	4618      	mov	r0, r3
 80062b0:	4688      	mov	r8, r1
 80062b2:	f7f9 ff8d 	bl	80001d0 <strlen>
 80062b6:	f04f 0a00 	mov.w	sl, #0
 80062ba:	4605      	mov	r5, r0
 80062bc:	f04f 0b00 	mov.w	fp, #0
 80062c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80062c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062c6:	781a      	ldrb	r2, [r3, #0]
 80062c8:	2a2b      	cmp	r2, #43	; 0x2b
 80062ca:	d04c      	beq.n	8006366 <_strtod_l+0xce>
 80062cc:	d839      	bhi.n	8006342 <_strtod_l+0xaa>
 80062ce:	2a0d      	cmp	r2, #13
 80062d0:	d832      	bhi.n	8006338 <_strtod_l+0xa0>
 80062d2:	2a08      	cmp	r2, #8
 80062d4:	d832      	bhi.n	800633c <_strtod_l+0xa4>
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	d03c      	beq.n	8006354 <_strtod_l+0xbc>
 80062da:	2300      	movs	r3, #0
 80062dc:	930e      	str	r3, [sp, #56]	; 0x38
 80062de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80062e0:	7833      	ldrb	r3, [r6, #0]
 80062e2:	2b30      	cmp	r3, #48	; 0x30
 80062e4:	f040 80b4 	bne.w	8006450 <_strtod_l+0x1b8>
 80062e8:	7873      	ldrb	r3, [r6, #1]
 80062ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062ee:	2b58      	cmp	r3, #88	; 0x58
 80062f0:	d16c      	bne.n	80063cc <_strtod_l+0x134>
 80062f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	ab1e      	add	r3, sp, #120	; 0x78
 80062f8:	9702      	str	r7, [sp, #8]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4a8f      	ldr	r2, [pc, #572]	; (800653c <_strtod_l+0x2a4>)
 80062fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8006300:	a91d      	add	r1, sp, #116	; 0x74
 8006302:	4620      	mov	r0, r4
 8006304:	f001 fd40 	bl	8007d88 <__gethex>
 8006308:	f010 0707 	ands.w	r7, r0, #7
 800630c:	4605      	mov	r5, r0
 800630e:	d005      	beq.n	800631c <_strtod_l+0x84>
 8006310:	2f06      	cmp	r7, #6
 8006312:	d12a      	bne.n	800636a <_strtod_l+0xd2>
 8006314:	3601      	adds	r6, #1
 8006316:	2300      	movs	r3, #0
 8006318:	961d      	str	r6, [sp, #116]	; 0x74
 800631a:	930e      	str	r3, [sp, #56]	; 0x38
 800631c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 8596 	bne.w	8006e50 <_strtod_l+0xbb8>
 8006324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006326:	b1db      	cbz	r3, 8006360 <_strtod_l+0xc8>
 8006328:	4652      	mov	r2, sl
 800632a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800632e:	ec43 2b10 	vmov	d0, r2, r3
 8006332:	b023      	add	sp, #140	; 0x8c
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	2a20      	cmp	r2, #32
 800633a:	d1ce      	bne.n	80062da <_strtod_l+0x42>
 800633c:	3301      	adds	r3, #1
 800633e:	931d      	str	r3, [sp, #116]	; 0x74
 8006340:	e7c0      	b.n	80062c4 <_strtod_l+0x2c>
 8006342:	2a2d      	cmp	r2, #45	; 0x2d
 8006344:	d1c9      	bne.n	80062da <_strtod_l+0x42>
 8006346:	2201      	movs	r2, #1
 8006348:	920e      	str	r2, [sp, #56]	; 0x38
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	921d      	str	r2, [sp, #116]	; 0x74
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1c4      	bne.n	80062de <_strtod_l+0x46>
 8006354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006356:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800635a:	2b00      	cmp	r3, #0
 800635c:	f040 8576 	bne.w	8006e4c <_strtod_l+0xbb4>
 8006360:	4652      	mov	r2, sl
 8006362:	465b      	mov	r3, fp
 8006364:	e7e3      	b.n	800632e <_strtod_l+0x96>
 8006366:	2200      	movs	r2, #0
 8006368:	e7ee      	b.n	8006348 <_strtod_l+0xb0>
 800636a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800636c:	b13a      	cbz	r2, 800637e <_strtod_l+0xe6>
 800636e:	2135      	movs	r1, #53	; 0x35
 8006370:	a820      	add	r0, sp, #128	; 0x80
 8006372:	f002 fcb4 	bl	8008cde <__copybits>
 8006376:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006378:	4620      	mov	r0, r4
 800637a:	f002 f879 	bl	8008470 <_Bfree>
 800637e:	3f01      	subs	r7, #1
 8006380:	2f05      	cmp	r7, #5
 8006382:	d807      	bhi.n	8006394 <_strtod_l+0xfc>
 8006384:	e8df f007 	tbb	[pc, r7]
 8006388:	1d180b0e 	.word	0x1d180b0e
 800638c:	030e      	.short	0x030e
 800638e:	f04f 0b00 	mov.w	fp, #0
 8006392:	46da      	mov	sl, fp
 8006394:	0728      	lsls	r0, r5, #28
 8006396:	d5c1      	bpl.n	800631c <_strtod_l+0x84>
 8006398:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800639c:	e7be      	b.n	800631c <_strtod_l+0x84>
 800639e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80063a2:	e7f7      	b.n	8006394 <_strtod_l+0xfc>
 80063a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80063a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80063aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80063b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80063b6:	e7ed      	b.n	8006394 <_strtod_l+0xfc>
 80063b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006540 <_strtod_l+0x2a8>
 80063bc:	f04f 0a00 	mov.w	sl, #0
 80063c0:	e7e8      	b.n	8006394 <_strtod_l+0xfc>
 80063c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80063c6:	f04f 3aff 	mov.w	sl, #4294967295
 80063ca:	e7e3      	b.n	8006394 <_strtod_l+0xfc>
 80063cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	921d      	str	r2, [sp, #116]	; 0x74
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b30      	cmp	r3, #48	; 0x30
 80063d6:	d0f9      	beq.n	80063cc <_strtod_l+0x134>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d09f      	beq.n	800631c <_strtod_l+0x84>
 80063dc:	2301      	movs	r3, #1
 80063de:	f04f 0900 	mov.w	r9, #0
 80063e2:	9304      	str	r3, [sp, #16]
 80063e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063e6:	930a      	str	r3, [sp, #40]	; 0x28
 80063e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063ec:	464f      	mov	r7, r9
 80063ee:	220a      	movs	r2, #10
 80063f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80063f2:	7806      	ldrb	r6, [r0, #0]
 80063f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80063f8:	b2d9      	uxtb	r1, r3
 80063fa:	2909      	cmp	r1, #9
 80063fc:	d92a      	bls.n	8006454 <_strtod_l+0x1bc>
 80063fe:	9907      	ldr	r1, [sp, #28]
 8006400:	462a      	mov	r2, r5
 8006402:	f002 fedd 	bl	80091c0 <strncmp>
 8006406:	b398      	cbz	r0, 8006470 <_strtod_l+0x1d8>
 8006408:	2000      	movs	r0, #0
 800640a:	4633      	mov	r3, r6
 800640c:	463d      	mov	r5, r7
 800640e:	9007      	str	r0, [sp, #28]
 8006410:	4602      	mov	r2, r0
 8006412:	2b65      	cmp	r3, #101	; 0x65
 8006414:	d001      	beq.n	800641a <_strtod_l+0x182>
 8006416:	2b45      	cmp	r3, #69	; 0x45
 8006418:	d118      	bne.n	800644c <_strtod_l+0x1b4>
 800641a:	b91d      	cbnz	r5, 8006424 <_strtod_l+0x18c>
 800641c:	9b04      	ldr	r3, [sp, #16]
 800641e:	4303      	orrs	r3, r0
 8006420:	d098      	beq.n	8006354 <_strtod_l+0xbc>
 8006422:	2500      	movs	r5, #0
 8006424:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006428:	f108 0301 	add.w	r3, r8, #1
 800642c:	931d      	str	r3, [sp, #116]	; 0x74
 800642e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006432:	2b2b      	cmp	r3, #43	; 0x2b
 8006434:	d075      	beq.n	8006522 <_strtod_l+0x28a>
 8006436:	2b2d      	cmp	r3, #45	; 0x2d
 8006438:	d07b      	beq.n	8006532 <_strtod_l+0x29a>
 800643a:	f04f 0c00 	mov.w	ip, #0
 800643e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006442:	2909      	cmp	r1, #9
 8006444:	f240 8082 	bls.w	800654c <_strtod_l+0x2b4>
 8006448:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800644c:	2600      	movs	r6, #0
 800644e:	e09d      	b.n	800658c <_strtod_l+0x2f4>
 8006450:	2300      	movs	r3, #0
 8006452:	e7c4      	b.n	80063de <_strtod_l+0x146>
 8006454:	2f08      	cmp	r7, #8
 8006456:	bfd8      	it	le
 8006458:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800645a:	f100 0001 	add.w	r0, r0, #1
 800645e:	bfda      	itte	le
 8006460:	fb02 3301 	mlale	r3, r2, r1, r3
 8006464:	9309      	strle	r3, [sp, #36]	; 0x24
 8006466:	fb02 3909 	mlagt	r9, r2, r9, r3
 800646a:	3701      	adds	r7, #1
 800646c:	901d      	str	r0, [sp, #116]	; 0x74
 800646e:	e7bf      	b.n	80063f0 <_strtod_l+0x158>
 8006470:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006472:	195a      	adds	r2, r3, r5
 8006474:	921d      	str	r2, [sp, #116]	; 0x74
 8006476:	5d5b      	ldrb	r3, [r3, r5]
 8006478:	2f00      	cmp	r7, #0
 800647a:	d037      	beq.n	80064ec <_strtod_l+0x254>
 800647c:	9007      	str	r0, [sp, #28]
 800647e:	463d      	mov	r5, r7
 8006480:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006484:	2a09      	cmp	r2, #9
 8006486:	d912      	bls.n	80064ae <_strtod_l+0x216>
 8006488:	2201      	movs	r2, #1
 800648a:	e7c2      	b.n	8006412 <_strtod_l+0x17a>
 800648c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	921d      	str	r2, [sp, #116]	; 0x74
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	3001      	adds	r0, #1
 8006496:	2b30      	cmp	r3, #48	; 0x30
 8006498:	d0f8      	beq.n	800648c <_strtod_l+0x1f4>
 800649a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800649e:	2a08      	cmp	r2, #8
 80064a0:	f200 84db 	bhi.w	8006e5a <_strtod_l+0xbc2>
 80064a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80064a6:	9007      	str	r0, [sp, #28]
 80064a8:	2000      	movs	r0, #0
 80064aa:	920a      	str	r2, [sp, #40]	; 0x28
 80064ac:	4605      	mov	r5, r0
 80064ae:	3b30      	subs	r3, #48	; 0x30
 80064b0:	f100 0201 	add.w	r2, r0, #1
 80064b4:	d014      	beq.n	80064e0 <_strtod_l+0x248>
 80064b6:	9907      	ldr	r1, [sp, #28]
 80064b8:	4411      	add	r1, r2
 80064ba:	9107      	str	r1, [sp, #28]
 80064bc:	462a      	mov	r2, r5
 80064be:	eb00 0e05 	add.w	lr, r0, r5
 80064c2:	210a      	movs	r1, #10
 80064c4:	4572      	cmp	r2, lr
 80064c6:	d113      	bne.n	80064f0 <_strtod_l+0x258>
 80064c8:	182a      	adds	r2, r5, r0
 80064ca:	2a08      	cmp	r2, #8
 80064cc:	f105 0501 	add.w	r5, r5, #1
 80064d0:	4405      	add	r5, r0
 80064d2:	dc1c      	bgt.n	800650e <_strtod_l+0x276>
 80064d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064d6:	220a      	movs	r2, #10
 80064d8:	fb02 3301 	mla	r3, r2, r1, r3
 80064dc:	9309      	str	r3, [sp, #36]	; 0x24
 80064de:	2200      	movs	r2, #0
 80064e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064e2:	1c59      	adds	r1, r3, #1
 80064e4:	911d      	str	r1, [sp, #116]	; 0x74
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	4610      	mov	r0, r2
 80064ea:	e7c9      	b.n	8006480 <_strtod_l+0x1e8>
 80064ec:	4638      	mov	r0, r7
 80064ee:	e7d2      	b.n	8006496 <_strtod_l+0x1fe>
 80064f0:	2a08      	cmp	r2, #8
 80064f2:	dc04      	bgt.n	80064fe <_strtod_l+0x266>
 80064f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80064f6:	434e      	muls	r6, r1
 80064f8:	9609      	str	r6, [sp, #36]	; 0x24
 80064fa:	3201      	adds	r2, #1
 80064fc:	e7e2      	b.n	80064c4 <_strtod_l+0x22c>
 80064fe:	f102 0c01 	add.w	ip, r2, #1
 8006502:	f1bc 0f10 	cmp.w	ip, #16
 8006506:	bfd8      	it	le
 8006508:	fb01 f909 	mulle.w	r9, r1, r9
 800650c:	e7f5      	b.n	80064fa <_strtod_l+0x262>
 800650e:	2d10      	cmp	r5, #16
 8006510:	bfdc      	itt	le
 8006512:	220a      	movle	r2, #10
 8006514:	fb02 3909 	mlale	r9, r2, r9, r3
 8006518:	e7e1      	b.n	80064de <_strtod_l+0x246>
 800651a:	2300      	movs	r3, #0
 800651c:	9307      	str	r3, [sp, #28]
 800651e:	2201      	movs	r2, #1
 8006520:	e77c      	b.n	800641c <_strtod_l+0x184>
 8006522:	f04f 0c00 	mov.w	ip, #0
 8006526:	f108 0302 	add.w	r3, r8, #2
 800652a:	931d      	str	r3, [sp, #116]	; 0x74
 800652c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006530:	e785      	b.n	800643e <_strtod_l+0x1a6>
 8006532:	f04f 0c01 	mov.w	ip, #1
 8006536:	e7f6      	b.n	8006526 <_strtod_l+0x28e>
 8006538:	0800a070 	.word	0x0800a070
 800653c:	08009e1c 	.word	0x08009e1c
 8006540:	7ff00000 	.word	0x7ff00000
 8006544:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	911d      	str	r1, [sp, #116]	; 0x74
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	2b30      	cmp	r3, #48	; 0x30
 800654e:	d0f9      	beq.n	8006544 <_strtod_l+0x2ac>
 8006550:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006554:	2908      	cmp	r1, #8
 8006556:	f63f af79 	bhi.w	800644c <_strtod_l+0x1b4>
 800655a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800655e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006560:	9308      	str	r3, [sp, #32]
 8006562:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006564:	1c59      	adds	r1, r3, #1
 8006566:	911d      	str	r1, [sp, #116]	; 0x74
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800656e:	2e09      	cmp	r6, #9
 8006570:	d937      	bls.n	80065e2 <_strtod_l+0x34a>
 8006572:	9e08      	ldr	r6, [sp, #32]
 8006574:	1b89      	subs	r1, r1, r6
 8006576:	2908      	cmp	r1, #8
 8006578:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800657c:	dc02      	bgt.n	8006584 <_strtod_l+0x2ec>
 800657e:	4576      	cmp	r6, lr
 8006580:	bfa8      	it	ge
 8006582:	4676      	movge	r6, lr
 8006584:	f1bc 0f00 	cmp.w	ip, #0
 8006588:	d000      	beq.n	800658c <_strtod_l+0x2f4>
 800658a:	4276      	negs	r6, r6
 800658c:	2d00      	cmp	r5, #0
 800658e:	d14f      	bne.n	8006630 <_strtod_l+0x398>
 8006590:	9904      	ldr	r1, [sp, #16]
 8006592:	4301      	orrs	r1, r0
 8006594:	f47f aec2 	bne.w	800631c <_strtod_l+0x84>
 8006598:	2a00      	cmp	r2, #0
 800659a:	f47f aedb 	bne.w	8006354 <_strtod_l+0xbc>
 800659e:	2b69      	cmp	r3, #105	; 0x69
 80065a0:	d027      	beq.n	80065f2 <_strtod_l+0x35a>
 80065a2:	dc24      	bgt.n	80065ee <_strtod_l+0x356>
 80065a4:	2b49      	cmp	r3, #73	; 0x49
 80065a6:	d024      	beq.n	80065f2 <_strtod_l+0x35a>
 80065a8:	2b4e      	cmp	r3, #78	; 0x4e
 80065aa:	f47f aed3 	bne.w	8006354 <_strtod_l+0xbc>
 80065ae:	499e      	ldr	r1, [pc, #632]	; (8006828 <_strtod_l+0x590>)
 80065b0:	a81d      	add	r0, sp, #116	; 0x74
 80065b2:	f001 fe41 	bl	8008238 <__match>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f43f aecc 	beq.w	8006354 <_strtod_l+0xbc>
 80065bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b28      	cmp	r3, #40	; 0x28
 80065c2:	d12d      	bne.n	8006620 <_strtod_l+0x388>
 80065c4:	4999      	ldr	r1, [pc, #612]	; (800682c <_strtod_l+0x594>)
 80065c6:	aa20      	add	r2, sp, #128	; 0x80
 80065c8:	a81d      	add	r0, sp, #116	; 0x74
 80065ca:	f001 fe49 	bl	8008260 <__hexnan>
 80065ce:	2805      	cmp	r0, #5
 80065d0:	d126      	bne.n	8006620 <_strtod_l+0x388>
 80065d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80065d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80065dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80065e0:	e69c      	b.n	800631c <_strtod_l+0x84>
 80065e2:	210a      	movs	r1, #10
 80065e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80065e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80065ec:	e7b9      	b.n	8006562 <_strtod_l+0x2ca>
 80065ee:	2b6e      	cmp	r3, #110	; 0x6e
 80065f0:	e7db      	b.n	80065aa <_strtod_l+0x312>
 80065f2:	498f      	ldr	r1, [pc, #572]	; (8006830 <_strtod_l+0x598>)
 80065f4:	a81d      	add	r0, sp, #116	; 0x74
 80065f6:	f001 fe1f 	bl	8008238 <__match>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	f43f aeaa 	beq.w	8006354 <_strtod_l+0xbc>
 8006600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006602:	498c      	ldr	r1, [pc, #560]	; (8006834 <_strtod_l+0x59c>)
 8006604:	3b01      	subs	r3, #1
 8006606:	a81d      	add	r0, sp, #116	; 0x74
 8006608:	931d      	str	r3, [sp, #116]	; 0x74
 800660a:	f001 fe15 	bl	8008238 <__match>
 800660e:	b910      	cbnz	r0, 8006616 <_strtod_l+0x37e>
 8006610:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006612:	3301      	adds	r3, #1
 8006614:	931d      	str	r3, [sp, #116]	; 0x74
 8006616:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006844 <_strtod_l+0x5ac>
 800661a:	f04f 0a00 	mov.w	sl, #0
 800661e:	e67d      	b.n	800631c <_strtod_l+0x84>
 8006620:	4885      	ldr	r0, [pc, #532]	; (8006838 <_strtod_l+0x5a0>)
 8006622:	f002 fdb5 	bl	8009190 <nan>
 8006626:	ed8d 0b04 	vstr	d0, [sp, #16]
 800662a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800662e:	e675      	b.n	800631c <_strtod_l+0x84>
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006634:	1af3      	subs	r3, r6, r3
 8006636:	2f00      	cmp	r7, #0
 8006638:	bf08      	it	eq
 800663a:	462f      	moveq	r7, r5
 800663c:	2d10      	cmp	r5, #16
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	46a8      	mov	r8, r5
 8006642:	bfa8      	it	ge
 8006644:	f04f 0810 	movge.w	r8, #16
 8006648:	f7f9 ff5c 	bl	8000504 <__aeabi_ui2d>
 800664c:	2d09      	cmp	r5, #9
 800664e:	4682      	mov	sl, r0
 8006650:	468b      	mov	fp, r1
 8006652:	dd13      	ble.n	800667c <_strtod_l+0x3e4>
 8006654:	4b79      	ldr	r3, [pc, #484]	; (800683c <_strtod_l+0x5a4>)
 8006656:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800665a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800665e:	f7f9 ffcb 	bl	80005f8 <__aeabi_dmul>
 8006662:	4682      	mov	sl, r0
 8006664:	4648      	mov	r0, r9
 8006666:	468b      	mov	fp, r1
 8006668:	f7f9 ff4c 	bl	8000504 <__aeabi_ui2d>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4650      	mov	r0, sl
 8006672:	4659      	mov	r1, fp
 8006674:	f7f9 fe0a 	bl	800028c <__adddf3>
 8006678:	4682      	mov	sl, r0
 800667a:	468b      	mov	fp, r1
 800667c:	2d0f      	cmp	r5, #15
 800667e:	dc38      	bgt.n	80066f2 <_strtod_l+0x45a>
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f43f ae4a 	beq.w	800631c <_strtod_l+0x84>
 8006688:	dd24      	ble.n	80066d4 <_strtod_l+0x43c>
 800668a:	2b16      	cmp	r3, #22
 800668c:	dc0b      	bgt.n	80066a6 <_strtod_l+0x40e>
 800668e:	4d6b      	ldr	r5, [pc, #428]	; (800683c <_strtod_l+0x5a4>)
 8006690:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006694:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006698:	4652      	mov	r2, sl
 800669a:	465b      	mov	r3, fp
 800669c:	f7f9 ffac 	bl	80005f8 <__aeabi_dmul>
 80066a0:	4682      	mov	sl, r0
 80066a2:	468b      	mov	fp, r1
 80066a4:	e63a      	b.n	800631c <_strtod_l+0x84>
 80066a6:	9a08      	ldr	r2, [sp, #32]
 80066a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80066ac:	4293      	cmp	r3, r2
 80066ae:	db20      	blt.n	80066f2 <_strtod_l+0x45a>
 80066b0:	4c62      	ldr	r4, [pc, #392]	; (800683c <_strtod_l+0x5a4>)
 80066b2:	f1c5 050f 	rsb	r5, r5, #15
 80066b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80066ba:	4652      	mov	r2, sl
 80066bc:	465b      	mov	r3, fp
 80066be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c2:	f7f9 ff99 	bl	80005f8 <__aeabi_dmul>
 80066c6:	9b08      	ldr	r3, [sp, #32]
 80066c8:	1b5d      	subs	r5, r3, r5
 80066ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80066ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80066d2:	e7e3      	b.n	800669c <_strtod_l+0x404>
 80066d4:	9b08      	ldr	r3, [sp, #32]
 80066d6:	3316      	adds	r3, #22
 80066d8:	db0b      	blt.n	80066f2 <_strtod_l+0x45a>
 80066da:	9b07      	ldr	r3, [sp, #28]
 80066dc:	4a57      	ldr	r2, [pc, #348]	; (800683c <_strtod_l+0x5a4>)
 80066de:	1b9e      	subs	r6, r3, r6
 80066e0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80066e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066e8:	4650      	mov	r0, sl
 80066ea:	4659      	mov	r1, fp
 80066ec:	f7fa f8ae 	bl	800084c <__aeabi_ddiv>
 80066f0:	e7d6      	b.n	80066a0 <_strtod_l+0x408>
 80066f2:	9b08      	ldr	r3, [sp, #32]
 80066f4:	eba5 0808 	sub.w	r8, r5, r8
 80066f8:	4498      	add	r8, r3
 80066fa:	f1b8 0f00 	cmp.w	r8, #0
 80066fe:	dd71      	ble.n	80067e4 <_strtod_l+0x54c>
 8006700:	f018 030f 	ands.w	r3, r8, #15
 8006704:	d00a      	beq.n	800671c <_strtod_l+0x484>
 8006706:	494d      	ldr	r1, [pc, #308]	; (800683c <_strtod_l+0x5a4>)
 8006708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800670c:	4652      	mov	r2, sl
 800670e:	465b      	mov	r3, fp
 8006710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006714:	f7f9 ff70 	bl	80005f8 <__aeabi_dmul>
 8006718:	4682      	mov	sl, r0
 800671a:	468b      	mov	fp, r1
 800671c:	f038 080f 	bics.w	r8, r8, #15
 8006720:	d04d      	beq.n	80067be <_strtod_l+0x526>
 8006722:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006726:	dd22      	ble.n	800676e <_strtod_l+0x4d6>
 8006728:	2500      	movs	r5, #0
 800672a:	462e      	mov	r6, r5
 800672c:	9509      	str	r5, [sp, #36]	; 0x24
 800672e:	9507      	str	r5, [sp, #28]
 8006730:	2322      	movs	r3, #34	; 0x22
 8006732:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006844 <_strtod_l+0x5ac>
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	f04f 0a00 	mov.w	sl, #0
 800673c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	f43f adec 	beq.w	800631c <_strtod_l+0x84>
 8006744:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006746:	4620      	mov	r0, r4
 8006748:	f001 fe92 	bl	8008470 <_Bfree>
 800674c:	9907      	ldr	r1, [sp, #28]
 800674e:	4620      	mov	r0, r4
 8006750:	f001 fe8e 	bl	8008470 <_Bfree>
 8006754:	4631      	mov	r1, r6
 8006756:	4620      	mov	r0, r4
 8006758:	f001 fe8a 	bl	8008470 <_Bfree>
 800675c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800675e:	4620      	mov	r0, r4
 8006760:	f001 fe86 	bl	8008470 <_Bfree>
 8006764:	4629      	mov	r1, r5
 8006766:	4620      	mov	r0, r4
 8006768:	f001 fe82 	bl	8008470 <_Bfree>
 800676c:	e5d6      	b.n	800631c <_strtod_l+0x84>
 800676e:	2300      	movs	r3, #0
 8006770:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006774:	4650      	mov	r0, sl
 8006776:	4659      	mov	r1, fp
 8006778:	4699      	mov	r9, r3
 800677a:	f1b8 0f01 	cmp.w	r8, #1
 800677e:	dc21      	bgt.n	80067c4 <_strtod_l+0x52c>
 8006780:	b10b      	cbz	r3, 8006786 <_strtod_l+0x4ee>
 8006782:	4682      	mov	sl, r0
 8006784:	468b      	mov	fp, r1
 8006786:	4b2e      	ldr	r3, [pc, #184]	; (8006840 <_strtod_l+0x5a8>)
 8006788:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800678c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006790:	4652      	mov	r2, sl
 8006792:	465b      	mov	r3, fp
 8006794:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006798:	f7f9 ff2e 	bl	80005f8 <__aeabi_dmul>
 800679c:	4b29      	ldr	r3, [pc, #164]	; (8006844 <_strtod_l+0x5ac>)
 800679e:	460a      	mov	r2, r1
 80067a0:	400b      	ands	r3, r1
 80067a2:	4929      	ldr	r1, [pc, #164]	; (8006848 <_strtod_l+0x5b0>)
 80067a4:	428b      	cmp	r3, r1
 80067a6:	4682      	mov	sl, r0
 80067a8:	d8be      	bhi.n	8006728 <_strtod_l+0x490>
 80067aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80067ae:	428b      	cmp	r3, r1
 80067b0:	bf86      	itte	hi
 80067b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800684c <_strtod_l+0x5b4>
 80067b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80067ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80067be:	2300      	movs	r3, #0
 80067c0:	9304      	str	r3, [sp, #16]
 80067c2:	e081      	b.n	80068c8 <_strtod_l+0x630>
 80067c4:	f018 0f01 	tst.w	r8, #1
 80067c8:	d007      	beq.n	80067da <_strtod_l+0x542>
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <_strtod_l+0x5a8>)
 80067cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7f9 ff10 	bl	80005f8 <__aeabi_dmul>
 80067d8:	2301      	movs	r3, #1
 80067da:	f109 0901 	add.w	r9, r9, #1
 80067de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80067e2:	e7ca      	b.n	800677a <_strtod_l+0x4e2>
 80067e4:	d0eb      	beq.n	80067be <_strtod_l+0x526>
 80067e6:	f1c8 0800 	rsb	r8, r8, #0
 80067ea:	f018 020f 	ands.w	r2, r8, #15
 80067ee:	d00a      	beq.n	8006806 <_strtod_l+0x56e>
 80067f0:	4b12      	ldr	r3, [pc, #72]	; (800683c <_strtod_l+0x5a4>)
 80067f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f6:	4650      	mov	r0, sl
 80067f8:	4659      	mov	r1, fp
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f7fa f825 	bl	800084c <__aeabi_ddiv>
 8006802:	4682      	mov	sl, r0
 8006804:	468b      	mov	fp, r1
 8006806:	ea5f 1828 	movs.w	r8, r8, asr #4
 800680a:	d0d8      	beq.n	80067be <_strtod_l+0x526>
 800680c:	f1b8 0f1f 	cmp.w	r8, #31
 8006810:	dd1e      	ble.n	8006850 <_strtod_l+0x5b8>
 8006812:	2500      	movs	r5, #0
 8006814:	462e      	mov	r6, r5
 8006816:	9509      	str	r5, [sp, #36]	; 0x24
 8006818:	9507      	str	r5, [sp, #28]
 800681a:	2322      	movs	r3, #34	; 0x22
 800681c:	f04f 0a00 	mov.w	sl, #0
 8006820:	f04f 0b00 	mov.w	fp, #0
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	e789      	b.n	800673c <_strtod_l+0x4a4>
 8006828:	08009ded 	.word	0x08009ded
 800682c:	08009e30 	.word	0x08009e30
 8006830:	08009de5 	.word	0x08009de5
 8006834:	08009f74 	.word	0x08009f74
 8006838:	0800a230 	.word	0x0800a230
 800683c:	0800a110 	.word	0x0800a110
 8006840:	0800a0e8 	.word	0x0800a0e8
 8006844:	7ff00000 	.word	0x7ff00000
 8006848:	7ca00000 	.word	0x7ca00000
 800684c:	7fefffff 	.word	0x7fefffff
 8006850:	f018 0310 	ands.w	r3, r8, #16
 8006854:	bf18      	it	ne
 8006856:	236a      	movne	r3, #106	; 0x6a
 8006858:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006c10 <_strtod_l+0x978>
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	4650      	mov	r0, sl
 8006860:	4659      	mov	r1, fp
 8006862:	2300      	movs	r3, #0
 8006864:	f018 0f01 	tst.w	r8, #1
 8006868:	d004      	beq.n	8006874 <_strtod_l+0x5dc>
 800686a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800686e:	f7f9 fec3 	bl	80005f8 <__aeabi_dmul>
 8006872:	2301      	movs	r3, #1
 8006874:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006878:	f109 0908 	add.w	r9, r9, #8
 800687c:	d1f2      	bne.n	8006864 <_strtod_l+0x5cc>
 800687e:	b10b      	cbz	r3, 8006884 <_strtod_l+0x5ec>
 8006880:	4682      	mov	sl, r0
 8006882:	468b      	mov	fp, r1
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	b1bb      	cbz	r3, 80068b8 <_strtod_l+0x620>
 8006888:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800688c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006890:	2b00      	cmp	r3, #0
 8006892:	4659      	mov	r1, fp
 8006894:	dd10      	ble.n	80068b8 <_strtod_l+0x620>
 8006896:	2b1f      	cmp	r3, #31
 8006898:	f340 8128 	ble.w	8006aec <_strtod_l+0x854>
 800689c:	2b34      	cmp	r3, #52	; 0x34
 800689e:	bfde      	ittt	le
 80068a0:	3b20      	suble	r3, #32
 80068a2:	f04f 32ff 	movle.w	r2, #4294967295
 80068a6:	fa02 f303 	lslle.w	r3, r2, r3
 80068aa:	f04f 0a00 	mov.w	sl, #0
 80068ae:	bfcc      	ite	gt
 80068b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80068b4:	ea03 0b01 	andle.w	fp, r3, r1
 80068b8:	2200      	movs	r2, #0
 80068ba:	2300      	movs	r3, #0
 80068bc:	4650      	mov	r0, sl
 80068be:	4659      	mov	r1, fp
 80068c0:	f7fa f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d1a4      	bne.n	8006812 <_strtod_l+0x57a>
 80068c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068ce:	462b      	mov	r3, r5
 80068d0:	463a      	mov	r2, r7
 80068d2:	4620      	mov	r0, r4
 80068d4:	f001 fe38 	bl	8008548 <__s2b>
 80068d8:	9009      	str	r0, [sp, #36]	; 0x24
 80068da:	2800      	cmp	r0, #0
 80068dc:	f43f af24 	beq.w	8006728 <_strtod_l+0x490>
 80068e0:	9b07      	ldr	r3, [sp, #28]
 80068e2:	1b9e      	subs	r6, r3, r6
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfb4      	ite	lt
 80068ea:	4633      	movlt	r3, r6
 80068ec:	2300      	movge	r3, #0
 80068ee:	9310      	str	r3, [sp, #64]	; 0x40
 80068f0:	9b08      	ldr	r3, [sp, #32]
 80068f2:	2500      	movs	r5, #0
 80068f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068f8:	9318      	str	r3, [sp, #96]	; 0x60
 80068fa:	462e      	mov	r6, r5
 80068fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fe:	4620      	mov	r0, r4
 8006900:	6859      	ldr	r1, [r3, #4]
 8006902:	f001 fd75 	bl	80083f0 <_Balloc>
 8006906:	9007      	str	r0, [sp, #28]
 8006908:	2800      	cmp	r0, #0
 800690a:	f43f af11 	beq.w	8006730 <_strtod_l+0x498>
 800690e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	3202      	adds	r2, #2
 8006914:	f103 010c 	add.w	r1, r3, #12
 8006918:	0092      	lsls	r2, r2, #2
 800691a:	300c      	adds	r0, #12
 800691c:	f001 fd5a 	bl	80083d4 <memcpy>
 8006920:	ec4b ab10 	vmov	d0, sl, fp
 8006924:	aa20      	add	r2, sp, #128	; 0x80
 8006926:	a91f      	add	r1, sp, #124	; 0x7c
 8006928:	4620      	mov	r0, r4
 800692a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800692e:	f002 f947 	bl	8008bc0 <__d2b>
 8006932:	901e      	str	r0, [sp, #120]	; 0x78
 8006934:	2800      	cmp	r0, #0
 8006936:	f43f aefb 	beq.w	8006730 <_strtod_l+0x498>
 800693a:	2101      	movs	r1, #1
 800693c:	4620      	mov	r0, r4
 800693e:	f001 fe9d 	bl	800867c <__i2b>
 8006942:	4606      	mov	r6, r0
 8006944:	2800      	cmp	r0, #0
 8006946:	f43f aef3 	beq.w	8006730 <_strtod_l+0x498>
 800694a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800694c:	9904      	ldr	r1, [sp, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	bfab      	itete	ge
 8006952:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006954:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006956:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006958:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800695c:	bfac      	ite	ge
 800695e:	eb03 0902 	addge.w	r9, r3, r2
 8006962:	1ad7      	sublt	r7, r2, r3
 8006964:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006966:	eba3 0801 	sub.w	r8, r3, r1
 800696a:	4490      	add	r8, r2
 800696c:	4ba3      	ldr	r3, [pc, #652]	; (8006bfc <_strtod_l+0x964>)
 800696e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006972:	4598      	cmp	r8, r3
 8006974:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006978:	f280 80cc 	bge.w	8006b14 <_strtod_l+0x87c>
 800697c:	eba3 0308 	sub.w	r3, r3, r8
 8006980:	2b1f      	cmp	r3, #31
 8006982:	eba2 0203 	sub.w	r2, r2, r3
 8006986:	f04f 0101 	mov.w	r1, #1
 800698a:	f300 80b6 	bgt.w	8006afa <_strtod_l+0x862>
 800698e:	fa01 f303 	lsl.w	r3, r1, r3
 8006992:	9311      	str	r3, [sp, #68]	; 0x44
 8006994:	2300      	movs	r3, #0
 8006996:	930c      	str	r3, [sp, #48]	; 0x30
 8006998:	eb09 0802 	add.w	r8, r9, r2
 800699c:	9b04      	ldr	r3, [sp, #16]
 800699e:	45c1      	cmp	r9, r8
 80069a0:	4417      	add	r7, r2
 80069a2:	441f      	add	r7, r3
 80069a4:	464b      	mov	r3, r9
 80069a6:	bfa8      	it	ge
 80069a8:	4643      	movge	r3, r8
 80069aa:	42bb      	cmp	r3, r7
 80069ac:	bfa8      	it	ge
 80069ae:	463b      	movge	r3, r7
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfc2      	ittt	gt
 80069b4:	eba8 0803 	subgt.w	r8, r8, r3
 80069b8:	1aff      	subgt	r7, r7, r3
 80069ba:	eba9 0903 	subgt.w	r9, r9, r3
 80069be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dd17      	ble.n	80069f4 <_strtod_l+0x75c>
 80069c4:	4631      	mov	r1, r6
 80069c6:	461a      	mov	r2, r3
 80069c8:	4620      	mov	r0, r4
 80069ca:	f001 ff13 	bl	80087f4 <__pow5mult>
 80069ce:	4606      	mov	r6, r0
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f43f aead 	beq.w	8006730 <_strtod_l+0x498>
 80069d6:	4601      	mov	r1, r0
 80069d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80069da:	4620      	mov	r0, r4
 80069dc:	f001 fe64 	bl	80086a8 <__multiply>
 80069e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f43f aea4 	beq.w	8006730 <_strtod_l+0x498>
 80069e8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069ea:	4620      	mov	r0, r4
 80069ec:	f001 fd40 	bl	8008470 <_Bfree>
 80069f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069f2:	931e      	str	r3, [sp, #120]	; 0x78
 80069f4:	f1b8 0f00 	cmp.w	r8, #0
 80069f8:	f300 8091 	bgt.w	8006b1e <_strtod_l+0x886>
 80069fc:	9b08      	ldr	r3, [sp, #32]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	dd08      	ble.n	8006a14 <_strtod_l+0x77c>
 8006a02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a04:	9907      	ldr	r1, [sp, #28]
 8006a06:	4620      	mov	r0, r4
 8006a08:	f001 fef4 	bl	80087f4 <__pow5mult>
 8006a0c:	9007      	str	r0, [sp, #28]
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f43f ae8e 	beq.w	8006730 <_strtod_l+0x498>
 8006a14:	2f00      	cmp	r7, #0
 8006a16:	dd08      	ble.n	8006a2a <_strtod_l+0x792>
 8006a18:	9907      	ldr	r1, [sp, #28]
 8006a1a:	463a      	mov	r2, r7
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f001 ff43 	bl	80088a8 <__lshift>
 8006a22:	9007      	str	r0, [sp, #28]
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f43f ae83 	beq.w	8006730 <_strtod_l+0x498>
 8006a2a:	f1b9 0f00 	cmp.w	r9, #0
 8006a2e:	dd08      	ble.n	8006a42 <_strtod_l+0x7aa>
 8006a30:	4631      	mov	r1, r6
 8006a32:	464a      	mov	r2, r9
 8006a34:	4620      	mov	r0, r4
 8006a36:	f001 ff37 	bl	80088a8 <__lshift>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f43f ae77 	beq.w	8006730 <_strtod_l+0x498>
 8006a42:	9a07      	ldr	r2, [sp, #28]
 8006a44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a46:	4620      	mov	r0, r4
 8006a48:	f001 ffb6 	bl	80089b8 <__mdiff>
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f43f ae6e 	beq.w	8006730 <_strtod_l+0x498>
 8006a54:	68c3      	ldr	r3, [r0, #12]
 8006a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60c3      	str	r3, [r0, #12]
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	f001 ff8f 	bl	8008980 <__mcmp>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	da65      	bge.n	8006b32 <_strtod_l+0x89a>
 8006a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a68:	ea53 030a 	orrs.w	r3, r3, sl
 8006a6c:	f040 8087 	bne.w	8006b7e <_strtod_l+0x8e6>
 8006a70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f040 8082 	bne.w	8006b7e <_strtod_l+0x8e6>
 8006a7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a7e:	0d1b      	lsrs	r3, r3, #20
 8006a80:	051b      	lsls	r3, r3, #20
 8006a82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a86:	d97a      	bls.n	8006b7e <_strtod_l+0x8e6>
 8006a88:	696b      	ldr	r3, [r5, #20]
 8006a8a:	b913      	cbnz	r3, 8006a92 <_strtod_l+0x7fa>
 8006a8c:	692b      	ldr	r3, [r5, #16]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	dd75      	ble.n	8006b7e <_strtod_l+0x8e6>
 8006a92:	4629      	mov	r1, r5
 8006a94:	2201      	movs	r2, #1
 8006a96:	4620      	mov	r0, r4
 8006a98:	f001 ff06 	bl	80088a8 <__lshift>
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	f001 ff6e 	bl	8008980 <__mcmp>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dd6a      	ble.n	8006b7e <_strtod_l+0x8e6>
 8006aa8:	9904      	ldr	r1, [sp, #16]
 8006aaa:	4a55      	ldr	r2, [pc, #340]	; (8006c00 <_strtod_l+0x968>)
 8006aac:	465b      	mov	r3, fp
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	f000 8085 	beq.w	8006bbe <_strtod_l+0x926>
 8006ab4:	ea02 010b 	and.w	r1, r2, fp
 8006ab8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006abc:	dc7f      	bgt.n	8006bbe <_strtod_l+0x926>
 8006abe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006ac2:	f77f aeaa 	ble.w	800681a <_strtod_l+0x582>
 8006ac6:	4a4f      	ldr	r2, [pc, #316]	; (8006c04 <_strtod_l+0x96c>)
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006ace:	4650      	mov	r0, sl
 8006ad0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006ad4:	4659      	mov	r1, fp
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	460b      	mov	r3, r1
 8006adc:	4303      	orrs	r3, r0
 8006ade:	bf08      	it	eq
 8006ae0:	2322      	moveq	r3, #34	; 0x22
 8006ae2:	4682      	mov	sl, r0
 8006ae4:	468b      	mov	fp, r1
 8006ae6:	bf08      	it	eq
 8006ae8:	6023      	streq	r3, [r4, #0]
 8006aea:	e62b      	b.n	8006744 <_strtod_l+0x4ac>
 8006aec:	f04f 32ff 	mov.w	r2, #4294967295
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	ea03 0a0a 	and.w	sl, r3, sl
 8006af8:	e6de      	b.n	80068b8 <_strtod_l+0x620>
 8006afa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006afe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006b02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006b06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006b0a:	fa01 f308 	lsl.w	r3, r1, r8
 8006b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b10:	9111      	str	r1, [sp, #68]	; 0x44
 8006b12:	e741      	b.n	8006998 <_strtod_l+0x700>
 8006b14:	2300      	movs	r3, #0
 8006b16:	930c      	str	r3, [sp, #48]	; 0x30
 8006b18:	2301      	movs	r3, #1
 8006b1a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b1c:	e73c      	b.n	8006998 <_strtod_l+0x700>
 8006b1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b20:	4642      	mov	r2, r8
 8006b22:	4620      	mov	r0, r4
 8006b24:	f001 fec0 	bl	80088a8 <__lshift>
 8006b28:	901e      	str	r0, [sp, #120]	; 0x78
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f47f af66 	bne.w	80069fc <_strtod_l+0x764>
 8006b30:	e5fe      	b.n	8006730 <_strtod_l+0x498>
 8006b32:	465f      	mov	r7, fp
 8006b34:	d16e      	bne.n	8006c14 <_strtod_l+0x97c>
 8006b36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b3c:	b342      	cbz	r2, 8006b90 <_strtod_l+0x8f8>
 8006b3e:	4a32      	ldr	r2, [pc, #200]	; (8006c08 <_strtod_l+0x970>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d128      	bne.n	8006b96 <_strtod_l+0x8fe>
 8006b44:	9b04      	ldr	r3, [sp, #16]
 8006b46:	4650      	mov	r0, sl
 8006b48:	b1eb      	cbz	r3, 8006b86 <_strtod_l+0x8ee>
 8006b4a:	4a2d      	ldr	r2, [pc, #180]	; (8006c00 <_strtod_l+0x968>)
 8006b4c:	403a      	ands	r2, r7
 8006b4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006b52:	f04f 31ff 	mov.w	r1, #4294967295
 8006b56:	d819      	bhi.n	8006b8c <_strtod_l+0x8f4>
 8006b58:	0d12      	lsrs	r2, r2, #20
 8006b5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	4298      	cmp	r0, r3
 8006b64:	d117      	bne.n	8006b96 <_strtod_l+0x8fe>
 8006b66:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <_strtod_l+0x974>)
 8006b68:	429f      	cmp	r7, r3
 8006b6a:	d102      	bne.n	8006b72 <_strtod_l+0x8da>
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f43f addf 	beq.w	8006730 <_strtod_l+0x498>
 8006b72:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <_strtod_l+0x968>)
 8006b74:	403b      	ands	r3, r7
 8006b76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006b7a:	f04f 0a00 	mov.w	sl, #0
 8006b7e:	9b04      	ldr	r3, [sp, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1a0      	bne.n	8006ac6 <_strtod_l+0x82e>
 8006b84:	e5de      	b.n	8006744 <_strtod_l+0x4ac>
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	e7ea      	b.n	8006b62 <_strtod_l+0x8ca>
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	e7e8      	b.n	8006b62 <_strtod_l+0x8ca>
 8006b90:	ea53 030a 	orrs.w	r3, r3, sl
 8006b94:	d088      	beq.n	8006aa8 <_strtod_l+0x810>
 8006b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b98:	b1db      	cbz	r3, 8006bd2 <_strtod_l+0x93a>
 8006b9a:	423b      	tst	r3, r7
 8006b9c:	d0ef      	beq.n	8006b7e <_strtod_l+0x8e6>
 8006b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ba0:	9a04      	ldr	r2, [sp, #16]
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	b1c3      	cbz	r3, 8006bda <_strtod_l+0x942>
 8006ba8:	f7ff fb5a 	bl	8006260 <sulp>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bb4:	f7f9 fb6a 	bl	800028c <__adddf3>
 8006bb8:	4682      	mov	sl, r0
 8006bba:	468b      	mov	fp, r1
 8006bbc:	e7df      	b.n	8006b7e <_strtod_l+0x8e6>
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006bc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006bc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006bcc:	f04f 3aff 	mov.w	sl, #4294967295
 8006bd0:	e7d5      	b.n	8006b7e <_strtod_l+0x8e6>
 8006bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bd4:	ea13 0f0a 	tst.w	r3, sl
 8006bd8:	e7e0      	b.n	8006b9c <_strtod_l+0x904>
 8006bda:	f7ff fb41 	bl	8006260 <sulp>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006be6:	f7f9 fb4f 	bl	8000288 <__aeabi_dsub>
 8006bea:	2200      	movs	r2, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	4682      	mov	sl, r0
 8006bf0:	468b      	mov	fp, r1
 8006bf2:	f7f9 ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d0c1      	beq.n	8006b7e <_strtod_l+0x8e6>
 8006bfa:	e60e      	b.n	800681a <_strtod_l+0x582>
 8006bfc:	fffffc02 	.word	0xfffffc02
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	39500000 	.word	0x39500000
 8006c08:	000fffff 	.word	0x000fffff
 8006c0c:	7fefffff 	.word	0x7fefffff
 8006c10:	08009e48 	.word	0x08009e48
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	f002 f82e 	bl	8008c78 <__ratio>
 8006c1c:	ec59 8b10 	vmov	r8, r9, d0
 8006c20:	ee10 0a10 	vmov	r0, s0
 8006c24:	2200      	movs	r2, #0
 8006c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	f7f9 ff60 	bl	8000af0 <__aeabi_dcmple>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d07c      	beq.n	8006d2e <_strtod_l+0xa96>
 8006c34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d04c      	beq.n	8006cd4 <_strtod_l+0xa3c>
 8006c3a:	4b95      	ldr	r3, [pc, #596]	; (8006e90 <_strtod_l+0xbf8>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006c42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006e90 <_strtod_l+0xbf8>
 8006c46:	f04f 0800 	mov.w	r8, #0
 8006c4a:	4b92      	ldr	r3, [pc, #584]	; (8006e94 <_strtod_l+0xbfc>)
 8006c4c:	403b      	ands	r3, r7
 8006c4e:	9311      	str	r3, [sp, #68]	; 0x44
 8006c50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c52:	4b91      	ldr	r3, [pc, #580]	; (8006e98 <_strtod_l+0xc00>)
 8006c54:	429a      	cmp	r2, r3
 8006c56:	f040 80b2 	bne.w	8006dbe <_strtod_l+0xb26>
 8006c5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c62:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006c66:	ec4b ab10 	vmov	d0, sl, fp
 8006c6a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006c6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006c72:	f001 ff29 	bl	8008ac8 <__ulp>
 8006c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c7a:	ec53 2b10 	vmov	r2, r3, d0
 8006c7e:	f7f9 fcbb 	bl	80005f8 <__aeabi_dmul>
 8006c82:	4652      	mov	r2, sl
 8006c84:	465b      	mov	r3, fp
 8006c86:	f7f9 fb01 	bl	800028c <__adddf3>
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4981      	ldr	r1, [pc, #516]	; (8006e94 <_strtod_l+0xbfc>)
 8006c8e:	4a83      	ldr	r2, [pc, #524]	; (8006e9c <_strtod_l+0xc04>)
 8006c90:	4019      	ands	r1, r3
 8006c92:	4291      	cmp	r1, r2
 8006c94:	4682      	mov	sl, r0
 8006c96:	d95e      	bls.n	8006d56 <_strtod_l+0xabe>
 8006c98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d103      	bne.n	8006caa <_strtod_l+0xa12>
 8006ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	f43f ad43 	beq.w	8006730 <_strtod_l+0x498>
 8006caa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006ea8 <_strtod_l+0xc10>
 8006cae:	f04f 3aff 	mov.w	sl, #4294967295
 8006cb2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f001 fbdb 	bl	8008470 <_Bfree>
 8006cba:	9907      	ldr	r1, [sp, #28]
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f001 fbd7 	bl	8008470 <_Bfree>
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f001 fbd3 	bl	8008470 <_Bfree>
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f001 fbcf 	bl	8008470 <_Bfree>
 8006cd2:	e613      	b.n	80068fc <_strtod_l+0x664>
 8006cd4:	f1ba 0f00 	cmp.w	sl, #0
 8006cd8:	d11b      	bne.n	8006d12 <_strtod_l+0xa7a>
 8006cda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cde:	b9f3      	cbnz	r3, 8006d1e <_strtod_l+0xa86>
 8006ce0:	4b6b      	ldr	r3, [pc, #428]	; (8006e90 <_strtod_l+0xbf8>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	f7f9 fef8 	bl	8000adc <__aeabi_dcmplt>
 8006cec:	b9d0      	cbnz	r0, 8006d24 <_strtod_l+0xa8c>
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4b6b      	ldr	r3, [pc, #428]	; (8006ea0 <_strtod_l+0xc08>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f7f9 fc7f 	bl	80005f8 <__aeabi_dmul>
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	4689      	mov	r9, r1
 8006cfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d02:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006d06:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d08:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006d0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006d10:	e79b      	b.n	8006c4a <_strtod_l+0x9b2>
 8006d12:	f1ba 0f01 	cmp.w	sl, #1
 8006d16:	d102      	bne.n	8006d1e <_strtod_l+0xa86>
 8006d18:	2f00      	cmp	r7, #0
 8006d1a:	f43f ad7e 	beq.w	800681a <_strtod_l+0x582>
 8006d1e:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <_strtod_l+0xc0c>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	e78c      	b.n	8006c3e <_strtod_l+0x9a6>
 8006d24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006ea0 <_strtod_l+0xc08>
 8006d28:	f04f 0800 	mov.w	r8, #0
 8006d2c:	e7e7      	b.n	8006cfe <_strtod_l+0xa66>
 8006d2e:	4b5c      	ldr	r3, [pc, #368]	; (8006ea0 <_strtod_l+0xc08>)
 8006d30:	4640      	mov	r0, r8
 8006d32:	4649      	mov	r1, r9
 8006d34:	2200      	movs	r2, #0
 8006d36:	f7f9 fc5f 	bl	80005f8 <__aeabi_dmul>
 8006d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	4689      	mov	r9, r1
 8006d40:	b933      	cbnz	r3, 8006d50 <_strtod_l+0xab8>
 8006d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d46:	9012      	str	r0, [sp, #72]	; 0x48
 8006d48:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006d4e:	e7dd      	b.n	8006d0c <_strtod_l+0xa74>
 8006d50:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006d54:	e7f9      	b.n	8006d4a <_strtod_l+0xab2>
 8006d56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1a8      	bne.n	8006cb2 <_strtod_l+0xa1a>
 8006d60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d66:	0d1b      	lsrs	r3, r3, #20
 8006d68:	051b      	lsls	r3, r3, #20
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d1a1      	bne.n	8006cb2 <_strtod_l+0xa1a>
 8006d6e:	4640      	mov	r0, r8
 8006d70:	4649      	mov	r1, r9
 8006d72:	f7f9 ffa1 	bl	8000cb8 <__aeabi_d2lz>
 8006d76:	f7f9 fc11 	bl	800059c <__aeabi_l2d>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fa81 	bl	8000288 <__aeabi_dsub>
 8006d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d8c:	ea43 030a 	orr.w	r3, r3, sl
 8006d90:	4313      	orrs	r3, r2
 8006d92:	4680      	mov	r8, r0
 8006d94:	4689      	mov	r9, r1
 8006d96:	d053      	beq.n	8006e40 <_strtod_l+0xba8>
 8006d98:	a335      	add	r3, pc, #212	; (adr r3, 8006e70 <_strtod_l+0xbd8>)
 8006d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9e:	f7f9 fe9d 	bl	8000adc <__aeabi_dcmplt>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f47f acce 	bne.w	8006744 <_strtod_l+0x4ac>
 8006da8:	a333      	add	r3, pc, #204	; (adr r3, 8006e78 <_strtod_l+0xbe0>)
 8006daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7f9 feb1 	bl	8000b18 <__aeabi_dcmpgt>
 8006db6:	2800      	cmp	r0, #0
 8006db8:	f43f af7b 	beq.w	8006cb2 <_strtod_l+0xa1a>
 8006dbc:	e4c2      	b.n	8006744 <_strtod_l+0x4ac>
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	b333      	cbz	r3, 8006e10 <_strtod_l+0xb78>
 8006dc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006dc8:	d822      	bhi.n	8006e10 <_strtod_l+0xb78>
 8006dca:	a32d      	add	r3, pc, #180	; (adr r3, 8006e80 <_strtod_l+0xbe8>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	f7f9 fe8c 	bl	8000af0 <__aeabi_dcmple>
 8006dd8:	b1a0      	cbz	r0, 8006e04 <_strtod_l+0xb6c>
 8006dda:	4649      	mov	r1, r9
 8006ddc:	4640      	mov	r0, r8
 8006dde:	f7f9 fee3 	bl	8000ba8 <__aeabi_d2uiz>
 8006de2:	2801      	cmp	r0, #1
 8006de4:	bf38      	it	cc
 8006de6:	2001      	movcc	r0, #1
 8006de8:	f7f9 fb8c 	bl	8000504 <__aeabi_ui2d>
 8006dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dee:	4680      	mov	r8, r0
 8006df0:	4689      	mov	r9, r1
 8006df2:	bb13      	cbnz	r3, 8006e3a <_strtod_l+0xba2>
 8006df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006df8:	9014      	str	r0, [sp, #80]	; 0x50
 8006dfa:	9315      	str	r3, [sp, #84]	; 0x54
 8006dfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006e00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006e0c:	1a9b      	subs	r3, r3, r2
 8006e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e14:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006e1c:	f001 fe54 	bl	8008ac8 <__ulp>
 8006e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e24:	ec53 2b10 	vmov	r2, r3, d0
 8006e28:	f7f9 fbe6 	bl	80005f8 <__aeabi_dmul>
 8006e2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006e30:	f7f9 fa2c 	bl	800028c <__adddf3>
 8006e34:	4682      	mov	sl, r0
 8006e36:	468b      	mov	fp, r1
 8006e38:	e78f      	b.n	8006d5a <_strtod_l+0xac2>
 8006e3a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006e3e:	e7dd      	b.n	8006dfc <_strtod_l+0xb64>
 8006e40:	a311      	add	r3, pc, #68	; (adr r3, 8006e88 <_strtod_l+0xbf0>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f7f9 fe49 	bl	8000adc <__aeabi_dcmplt>
 8006e4a:	e7b4      	b.n	8006db6 <_strtod_l+0xb1e>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	930e      	str	r3, [sp, #56]	; 0x38
 8006e50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	f7ff ba65 	b.w	8006324 <_strtod_l+0x8c>
 8006e5a:	2b65      	cmp	r3, #101	; 0x65
 8006e5c:	f43f ab5d 	beq.w	800651a <_strtod_l+0x282>
 8006e60:	2b45      	cmp	r3, #69	; 0x45
 8006e62:	f43f ab5a 	beq.w	800651a <_strtod_l+0x282>
 8006e66:	2201      	movs	r2, #1
 8006e68:	f7ff bb92 	b.w	8006590 <_strtod_l+0x2f8>
 8006e6c:	f3af 8000 	nop.w
 8006e70:	94a03595 	.word	0x94a03595
 8006e74:	3fdfffff 	.word	0x3fdfffff
 8006e78:	35afe535 	.word	0x35afe535
 8006e7c:	3fe00000 	.word	0x3fe00000
 8006e80:	ffc00000 	.word	0xffc00000
 8006e84:	41dfffff 	.word	0x41dfffff
 8006e88:	94a03595 	.word	0x94a03595
 8006e8c:	3fcfffff 	.word	0x3fcfffff
 8006e90:	3ff00000 	.word	0x3ff00000
 8006e94:	7ff00000 	.word	0x7ff00000
 8006e98:	7fe00000 	.word	0x7fe00000
 8006e9c:	7c9fffff 	.word	0x7c9fffff
 8006ea0:	3fe00000 	.word	0x3fe00000
 8006ea4:	bff00000 	.word	0xbff00000
 8006ea8:	7fefffff 	.word	0x7fefffff

08006eac <_strtod_r>:
 8006eac:	4b01      	ldr	r3, [pc, #4]	; (8006eb4 <_strtod_r+0x8>)
 8006eae:	f7ff b9f3 	b.w	8006298 <_strtod_l>
 8006eb2:	bf00      	nop
 8006eb4:	20000074 	.word	0x20000074

08006eb8 <_strtol_l.isra.0>:
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebe:	d001      	beq.n	8006ec4 <_strtol_l.isra.0+0xc>
 8006ec0:	2b24      	cmp	r3, #36	; 0x24
 8006ec2:	d906      	bls.n	8006ed2 <_strtol_l.isra.0+0x1a>
 8006ec4:	f7fe fafa 	bl	80054bc <__errno>
 8006ec8:	2316      	movs	r3, #22
 8006eca:	6003      	str	r3, [r0, #0]
 8006ecc:	2000      	movs	r0, #0
 8006ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed2:	4f3a      	ldr	r7, [pc, #232]	; (8006fbc <_strtol_l.isra.0+0x104>)
 8006ed4:	468e      	mov	lr, r1
 8006ed6:	4676      	mov	r6, lr
 8006ed8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006edc:	5de5      	ldrb	r5, [r4, r7]
 8006ede:	f015 0508 	ands.w	r5, r5, #8
 8006ee2:	d1f8      	bne.n	8006ed6 <_strtol_l.isra.0+0x1e>
 8006ee4:	2c2d      	cmp	r4, #45	; 0x2d
 8006ee6:	d134      	bne.n	8006f52 <_strtol_l.isra.0+0x9a>
 8006ee8:	f89e 4000 	ldrb.w	r4, [lr]
 8006eec:	f04f 0801 	mov.w	r8, #1
 8006ef0:	f106 0e02 	add.w	lr, r6, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d05c      	beq.n	8006fb2 <_strtol_l.isra.0+0xfa>
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d10c      	bne.n	8006f16 <_strtol_l.isra.0+0x5e>
 8006efc:	2c30      	cmp	r4, #48	; 0x30
 8006efe:	d10a      	bne.n	8006f16 <_strtol_l.isra.0+0x5e>
 8006f00:	f89e 4000 	ldrb.w	r4, [lr]
 8006f04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006f08:	2c58      	cmp	r4, #88	; 0x58
 8006f0a:	d14d      	bne.n	8006fa8 <_strtol_l.isra.0+0xf0>
 8006f0c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006f10:	2310      	movs	r3, #16
 8006f12:	f10e 0e02 	add.w	lr, lr, #2
 8006f16:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006f1a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006f1e:	2600      	movs	r6, #0
 8006f20:	fbbc f9f3 	udiv	r9, ip, r3
 8006f24:	4635      	mov	r5, r6
 8006f26:	fb03 ca19 	mls	sl, r3, r9, ip
 8006f2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006f2e:	2f09      	cmp	r7, #9
 8006f30:	d818      	bhi.n	8006f64 <_strtol_l.isra.0+0xac>
 8006f32:	463c      	mov	r4, r7
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	dd24      	ble.n	8006f82 <_strtol_l.isra.0+0xca>
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	db1f      	blt.n	8006f7c <_strtol_l.isra.0+0xc4>
 8006f3c:	45a9      	cmp	r9, r5
 8006f3e:	d31d      	bcc.n	8006f7c <_strtol_l.isra.0+0xc4>
 8006f40:	d101      	bne.n	8006f46 <_strtol_l.isra.0+0x8e>
 8006f42:	45a2      	cmp	sl, r4
 8006f44:	db1a      	blt.n	8006f7c <_strtol_l.isra.0+0xc4>
 8006f46:	fb05 4503 	mla	r5, r5, r3, r4
 8006f4a:	2601      	movs	r6, #1
 8006f4c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006f50:	e7eb      	b.n	8006f2a <_strtol_l.isra.0+0x72>
 8006f52:	2c2b      	cmp	r4, #43	; 0x2b
 8006f54:	bf08      	it	eq
 8006f56:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006f5a:	46a8      	mov	r8, r5
 8006f5c:	bf08      	it	eq
 8006f5e:	f106 0e02 	addeq.w	lr, r6, #2
 8006f62:	e7c7      	b.n	8006ef4 <_strtol_l.isra.0+0x3c>
 8006f64:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006f68:	2f19      	cmp	r7, #25
 8006f6a:	d801      	bhi.n	8006f70 <_strtol_l.isra.0+0xb8>
 8006f6c:	3c37      	subs	r4, #55	; 0x37
 8006f6e:	e7e1      	b.n	8006f34 <_strtol_l.isra.0+0x7c>
 8006f70:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006f74:	2f19      	cmp	r7, #25
 8006f76:	d804      	bhi.n	8006f82 <_strtol_l.isra.0+0xca>
 8006f78:	3c57      	subs	r4, #87	; 0x57
 8006f7a:	e7db      	b.n	8006f34 <_strtol_l.isra.0+0x7c>
 8006f7c:	f04f 36ff 	mov.w	r6, #4294967295
 8006f80:	e7e4      	b.n	8006f4c <_strtol_l.isra.0+0x94>
 8006f82:	2e00      	cmp	r6, #0
 8006f84:	da05      	bge.n	8006f92 <_strtol_l.isra.0+0xda>
 8006f86:	2322      	movs	r3, #34	; 0x22
 8006f88:	6003      	str	r3, [r0, #0]
 8006f8a:	4665      	mov	r5, ip
 8006f8c:	b942      	cbnz	r2, 8006fa0 <_strtol_l.isra.0+0xe8>
 8006f8e:	4628      	mov	r0, r5
 8006f90:	e79d      	b.n	8006ece <_strtol_l.isra.0+0x16>
 8006f92:	f1b8 0f00 	cmp.w	r8, #0
 8006f96:	d000      	beq.n	8006f9a <_strtol_l.isra.0+0xe2>
 8006f98:	426d      	negs	r5, r5
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	d0f7      	beq.n	8006f8e <_strtol_l.isra.0+0xd6>
 8006f9e:	b10e      	cbz	r6, 8006fa4 <_strtol_l.isra.0+0xec>
 8006fa0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006fa4:	6011      	str	r1, [r2, #0]
 8006fa6:	e7f2      	b.n	8006f8e <_strtol_l.isra.0+0xd6>
 8006fa8:	2430      	movs	r4, #48	; 0x30
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1b3      	bne.n	8006f16 <_strtol_l.isra.0+0x5e>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	e7b1      	b.n	8006f16 <_strtol_l.isra.0+0x5e>
 8006fb2:	2c30      	cmp	r4, #48	; 0x30
 8006fb4:	d0a4      	beq.n	8006f00 <_strtol_l.isra.0+0x48>
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	e7ad      	b.n	8006f16 <_strtol_l.isra.0+0x5e>
 8006fba:	bf00      	nop
 8006fbc:	08009e71 	.word	0x08009e71

08006fc0 <_strtol_r>:
 8006fc0:	f7ff bf7a 	b.w	8006eb8 <_strtol_l.isra.0>

08006fc4 <quorem>:
 8006fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	6903      	ldr	r3, [r0, #16]
 8006fca:	690c      	ldr	r4, [r1, #16]
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	4607      	mov	r7, r0
 8006fd0:	f2c0 8081 	blt.w	80070d6 <quorem+0x112>
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	f101 0814 	add.w	r8, r1, #20
 8006fda:	f100 0514 	add.w	r5, r0, #20
 8006fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fec:	3301      	adds	r3, #1
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ff4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ffc:	d331      	bcc.n	8007062 <quorem+0x9e>
 8006ffe:	f04f 0e00 	mov.w	lr, #0
 8007002:	4640      	mov	r0, r8
 8007004:	46ac      	mov	ip, r5
 8007006:	46f2      	mov	sl, lr
 8007008:	f850 2b04 	ldr.w	r2, [r0], #4
 800700c:	b293      	uxth	r3, r2
 800700e:	fb06 e303 	mla	r3, r6, r3, lr
 8007012:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007016:	b29b      	uxth	r3, r3
 8007018:	ebaa 0303 	sub.w	r3, sl, r3
 800701c:	0c12      	lsrs	r2, r2, #16
 800701e:	f8dc a000 	ldr.w	sl, [ip]
 8007022:	fb06 e202 	mla	r2, r6, r2, lr
 8007026:	fa13 f38a 	uxtah	r3, r3, sl
 800702a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800702e:	fa1f fa82 	uxth.w	sl, r2
 8007032:	f8dc 2000 	ldr.w	r2, [ip]
 8007036:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800703a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800703e:	b29b      	uxth	r3, r3
 8007040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007044:	4581      	cmp	r9, r0
 8007046:	f84c 3b04 	str.w	r3, [ip], #4
 800704a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800704e:	d2db      	bcs.n	8007008 <quorem+0x44>
 8007050:	f855 300b 	ldr.w	r3, [r5, fp]
 8007054:	b92b      	cbnz	r3, 8007062 <quorem+0x9e>
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	3b04      	subs	r3, #4
 800705a:	429d      	cmp	r5, r3
 800705c:	461a      	mov	r2, r3
 800705e:	d32e      	bcc.n	80070be <quorem+0xfa>
 8007060:	613c      	str	r4, [r7, #16]
 8007062:	4638      	mov	r0, r7
 8007064:	f001 fc8c 	bl	8008980 <__mcmp>
 8007068:	2800      	cmp	r0, #0
 800706a:	db24      	blt.n	80070b6 <quorem+0xf2>
 800706c:	3601      	adds	r6, #1
 800706e:	4628      	mov	r0, r5
 8007070:	f04f 0c00 	mov.w	ip, #0
 8007074:	f858 2b04 	ldr.w	r2, [r8], #4
 8007078:	f8d0 e000 	ldr.w	lr, [r0]
 800707c:	b293      	uxth	r3, r2
 800707e:	ebac 0303 	sub.w	r3, ip, r3
 8007082:	0c12      	lsrs	r2, r2, #16
 8007084:	fa13 f38e 	uxtah	r3, r3, lr
 8007088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800708c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007090:	b29b      	uxth	r3, r3
 8007092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007096:	45c1      	cmp	r9, r8
 8007098:	f840 3b04 	str.w	r3, [r0], #4
 800709c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070a0:	d2e8      	bcs.n	8007074 <quorem+0xb0>
 80070a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070aa:	b922      	cbnz	r2, 80070b6 <quorem+0xf2>
 80070ac:	3b04      	subs	r3, #4
 80070ae:	429d      	cmp	r5, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	d30a      	bcc.n	80070ca <quorem+0x106>
 80070b4:	613c      	str	r4, [r7, #16]
 80070b6:	4630      	mov	r0, r6
 80070b8:	b003      	add	sp, #12
 80070ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070be:	6812      	ldr	r2, [r2, #0]
 80070c0:	3b04      	subs	r3, #4
 80070c2:	2a00      	cmp	r2, #0
 80070c4:	d1cc      	bne.n	8007060 <quorem+0x9c>
 80070c6:	3c01      	subs	r4, #1
 80070c8:	e7c7      	b.n	800705a <quorem+0x96>
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	3b04      	subs	r3, #4
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	d1f0      	bne.n	80070b4 <quorem+0xf0>
 80070d2:	3c01      	subs	r4, #1
 80070d4:	e7eb      	b.n	80070ae <quorem+0xea>
 80070d6:	2000      	movs	r0, #0
 80070d8:	e7ee      	b.n	80070b8 <quorem+0xf4>
 80070da:	0000      	movs	r0, r0
 80070dc:	0000      	movs	r0, r0
	...

080070e0 <_dtoa_r>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	ec57 6b10 	vmov	r6, r7, d0
 80070ec:	b095      	sub	sp, #84	; 0x54
 80070ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80070f4:	9105      	str	r1, [sp, #20]
 80070f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80070fa:	4604      	mov	r4, r0
 80070fc:	9209      	str	r2, [sp, #36]	; 0x24
 80070fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007100:	b975      	cbnz	r5, 8007120 <_dtoa_r+0x40>
 8007102:	2010      	movs	r0, #16
 8007104:	f001 f94c 	bl	80083a0 <malloc>
 8007108:	4602      	mov	r2, r0
 800710a:	6260      	str	r0, [r4, #36]	; 0x24
 800710c:	b920      	cbnz	r0, 8007118 <_dtoa_r+0x38>
 800710e:	4bb2      	ldr	r3, [pc, #712]	; (80073d8 <_dtoa_r+0x2f8>)
 8007110:	21ea      	movs	r1, #234	; 0xea
 8007112:	48b2      	ldr	r0, [pc, #712]	; (80073dc <_dtoa_r+0x2fc>)
 8007114:	f002 f874 	bl	8009200 <__assert_func>
 8007118:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800711c:	6005      	str	r5, [r0, #0]
 800711e:	60c5      	str	r5, [r0, #12]
 8007120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	b151      	cbz	r1, 800713c <_dtoa_r+0x5c>
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	604a      	str	r2, [r1, #4]
 800712a:	2301      	movs	r3, #1
 800712c:	4093      	lsls	r3, r2
 800712e:	608b      	str	r3, [r1, #8]
 8007130:	4620      	mov	r0, r4
 8007132:	f001 f99d 	bl	8008470 <_Bfree>
 8007136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	1e3b      	subs	r3, r7, #0
 800713e:	bfb9      	ittee	lt
 8007140:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007144:	9303      	strlt	r3, [sp, #12]
 8007146:	2300      	movge	r3, #0
 8007148:	f8c8 3000 	strge.w	r3, [r8]
 800714c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007150:	4ba3      	ldr	r3, [pc, #652]	; (80073e0 <_dtoa_r+0x300>)
 8007152:	bfbc      	itt	lt
 8007154:	2201      	movlt	r2, #1
 8007156:	f8c8 2000 	strlt.w	r2, [r8]
 800715a:	ea33 0309 	bics.w	r3, r3, r9
 800715e:	d11b      	bne.n	8007198 <_dtoa_r+0xb8>
 8007160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007162:	f242 730f 	movw	r3, #9999	; 0x270f
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800716c:	4333      	orrs	r3, r6
 800716e:	f000 857a 	beq.w	8007c66 <_dtoa_r+0xb86>
 8007172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007174:	b963      	cbnz	r3, 8007190 <_dtoa_r+0xb0>
 8007176:	4b9b      	ldr	r3, [pc, #620]	; (80073e4 <_dtoa_r+0x304>)
 8007178:	e024      	b.n	80071c4 <_dtoa_r+0xe4>
 800717a:	4b9b      	ldr	r3, [pc, #620]	; (80073e8 <_dtoa_r+0x308>)
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	9800      	ldr	r0, [sp, #0]
 8007186:	b015      	add	sp, #84	; 0x54
 8007188:	ecbd 8b02 	vpop	{d8}
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	4b94      	ldr	r3, [pc, #592]	; (80073e4 <_dtoa_r+0x304>)
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	3303      	adds	r3, #3
 8007196:	e7f3      	b.n	8007180 <_dtoa_r+0xa0>
 8007198:	ed9d 7b02 	vldr	d7, [sp, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	ec51 0b17 	vmov	r0, r1, d7
 80071a2:	2300      	movs	r3, #0
 80071a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80071a8:	f7f9 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ac:	4680      	mov	r8, r0
 80071ae:	b158      	cbz	r0, 80071c8 <_dtoa_r+0xe8>
 80071b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071b2:	2301      	movs	r3, #1
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8551 	beq.w	8007c60 <_dtoa_r+0xb80>
 80071be:	488b      	ldr	r0, [pc, #556]	; (80073ec <_dtoa_r+0x30c>)
 80071c0:	6018      	str	r0, [r3, #0]
 80071c2:	1e43      	subs	r3, r0, #1
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	e7dd      	b.n	8007184 <_dtoa_r+0xa4>
 80071c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80071cc:	aa12      	add	r2, sp, #72	; 0x48
 80071ce:	a913      	add	r1, sp, #76	; 0x4c
 80071d0:	4620      	mov	r0, r4
 80071d2:	f001 fcf5 	bl	8008bc0 <__d2b>
 80071d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071da:	4683      	mov	fp, r0
 80071dc:	2d00      	cmp	r5, #0
 80071de:	d07c      	beq.n	80072da <_dtoa_r+0x1fa>
 80071e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80071e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80071ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80071f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80071f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071fa:	4b7d      	ldr	r3, [pc, #500]	; (80073f0 <_dtoa_r+0x310>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	4630      	mov	r0, r6
 8007200:	4639      	mov	r1, r7
 8007202:	f7f9 f841 	bl	8000288 <__aeabi_dsub>
 8007206:	a36e      	add	r3, pc, #440	; (adr r3, 80073c0 <_dtoa_r+0x2e0>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	a36d      	add	r3, pc, #436	; (adr r3, 80073c8 <_dtoa_r+0x2e8>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f839 	bl	800028c <__adddf3>
 800721a:	4606      	mov	r6, r0
 800721c:	4628      	mov	r0, r5
 800721e:	460f      	mov	r7, r1
 8007220:	f7f9 f980 	bl	8000524 <__aeabi_i2d>
 8007224:	a36a      	add	r3, pc, #424	; (adr r3, 80073d0 <_dtoa_r+0x2f0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f9e5 	bl	80005f8 <__aeabi_dmul>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4630      	mov	r0, r6
 8007234:	4639      	mov	r1, r7
 8007236:	f7f9 f829 	bl	800028c <__adddf3>
 800723a:	4606      	mov	r6, r0
 800723c:	460f      	mov	r7, r1
 800723e:	f7f9 fc8b 	bl	8000b58 <__aeabi_d2iz>
 8007242:	2200      	movs	r2, #0
 8007244:	4682      	mov	sl, r0
 8007246:	2300      	movs	r3, #0
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 fc46 	bl	8000adc <__aeabi_dcmplt>
 8007250:	b148      	cbz	r0, 8007266 <_dtoa_r+0x186>
 8007252:	4650      	mov	r0, sl
 8007254:	f7f9 f966 	bl	8000524 <__aeabi_i2d>
 8007258:	4632      	mov	r2, r6
 800725a:	463b      	mov	r3, r7
 800725c:	f7f9 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 8007260:	b908      	cbnz	r0, 8007266 <_dtoa_r+0x186>
 8007262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007266:	f1ba 0f16 	cmp.w	sl, #22
 800726a:	d854      	bhi.n	8007316 <_dtoa_r+0x236>
 800726c:	4b61      	ldr	r3, [pc, #388]	; (80073f4 <_dtoa_r+0x314>)
 800726e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800727a:	f7f9 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800727e:	2800      	cmp	r0, #0
 8007280:	d04b      	beq.n	800731a <_dtoa_r+0x23a>
 8007282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007286:	2300      	movs	r3, #0
 8007288:	930e      	str	r3, [sp, #56]	; 0x38
 800728a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800728c:	1b5d      	subs	r5, r3, r5
 800728e:	1e6b      	subs	r3, r5, #1
 8007290:	9304      	str	r3, [sp, #16]
 8007292:	bf43      	ittte	mi
 8007294:	2300      	movmi	r3, #0
 8007296:	f1c5 0801 	rsbmi	r8, r5, #1
 800729a:	9304      	strmi	r3, [sp, #16]
 800729c:	f04f 0800 	movpl.w	r8, #0
 80072a0:	f1ba 0f00 	cmp.w	sl, #0
 80072a4:	db3b      	blt.n	800731e <_dtoa_r+0x23e>
 80072a6:	9b04      	ldr	r3, [sp, #16]
 80072a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80072ac:	4453      	add	r3, sl
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	2300      	movs	r3, #0
 80072b2:	9306      	str	r3, [sp, #24]
 80072b4:	9b05      	ldr	r3, [sp, #20]
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	d869      	bhi.n	800738e <_dtoa_r+0x2ae>
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	bfc4      	itt	gt
 80072be:	3b04      	subgt	r3, #4
 80072c0:	9305      	strgt	r3, [sp, #20]
 80072c2:	9b05      	ldr	r3, [sp, #20]
 80072c4:	f1a3 0302 	sub.w	r3, r3, #2
 80072c8:	bfcc      	ite	gt
 80072ca:	2500      	movgt	r5, #0
 80072cc:	2501      	movle	r5, #1
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d869      	bhi.n	80073a6 <_dtoa_r+0x2c6>
 80072d2:	e8df f003 	tbb	[pc, r3]
 80072d6:	4e2c      	.short	0x4e2c
 80072d8:	5a4c      	.short	0x5a4c
 80072da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80072de:	441d      	add	r5, r3
 80072e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	bfc1      	itttt	gt
 80072e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80072f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80072f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072f8:	bfda      	itte	le
 80072fa:	f1c3 0320 	rsble	r3, r3, #32
 80072fe:	fa06 f003 	lslle.w	r0, r6, r3
 8007302:	4318      	orrgt	r0, r3
 8007304:	f7f9 f8fe 	bl	8000504 <__aeabi_ui2d>
 8007308:	2301      	movs	r3, #1
 800730a:	4606      	mov	r6, r0
 800730c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007310:	3d01      	subs	r5, #1
 8007312:	9310      	str	r3, [sp, #64]	; 0x40
 8007314:	e771      	b.n	80071fa <_dtoa_r+0x11a>
 8007316:	2301      	movs	r3, #1
 8007318:	e7b6      	b.n	8007288 <_dtoa_r+0x1a8>
 800731a:	900e      	str	r0, [sp, #56]	; 0x38
 800731c:	e7b5      	b.n	800728a <_dtoa_r+0x1aa>
 800731e:	f1ca 0300 	rsb	r3, sl, #0
 8007322:	9306      	str	r3, [sp, #24]
 8007324:	2300      	movs	r3, #0
 8007326:	eba8 080a 	sub.w	r8, r8, sl
 800732a:	930d      	str	r3, [sp, #52]	; 0x34
 800732c:	e7c2      	b.n	80072b4 <_dtoa_r+0x1d4>
 800732e:	2300      	movs	r3, #0
 8007330:	9308      	str	r3, [sp, #32]
 8007332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	dc39      	bgt.n	80073ac <_dtoa_r+0x2cc>
 8007338:	f04f 0901 	mov.w	r9, #1
 800733c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007340:	464b      	mov	r3, r9
 8007342:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007346:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007348:	2200      	movs	r2, #0
 800734a:	6042      	str	r2, [r0, #4]
 800734c:	2204      	movs	r2, #4
 800734e:	f102 0614 	add.w	r6, r2, #20
 8007352:	429e      	cmp	r6, r3
 8007354:	6841      	ldr	r1, [r0, #4]
 8007356:	d92f      	bls.n	80073b8 <_dtoa_r+0x2d8>
 8007358:	4620      	mov	r0, r4
 800735a:	f001 f849 	bl	80083f0 <_Balloc>
 800735e:	9000      	str	r0, [sp, #0]
 8007360:	2800      	cmp	r0, #0
 8007362:	d14b      	bne.n	80073fc <_dtoa_r+0x31c>
 8007364:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <_dtoa_r+0x318>)
 8007366:	4602      	mov	r2, r0
 8007368:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800736c:	e6d1      	b.n	8007112 <_dtoa_r+0x32>
 800736e:	2301      	movs	r3, #1
 8007370:	e7de      	b.n	8007330 <_dtoa_r+0x250>
 8007372:	2300      	movs	r3, #0
 8007374:	9308      	str	r3, [sp, #32]
 8007376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007378:	eb0a 0903 	add.w	r9, sl, r3
 800737c:	f109 0301 	add.w	r3, r9, #1
 8007380:	2b01      	cmp	r3, #1
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	bfb8      	it	lt
 8007386:	2301      	movlt	r3, #1
 8007388:	e7dd      	b.n	8007346 <_dtoa_r+0x266>
 800738a:	2301      	movs	r3, #1
 800738c:	e7f2      	b.n	8007374 <_dtoa_r+0x294>
 800738e:	2501      	movs	r5, #1
 8007390:	2300      	movs	r3, #0
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	9508      	str	r5, [sp, #32]
 8007396:	f04f 39ff 	mov.w	r9, #4294967295
 800739a:	2200      	movs	r2, #0
 800739c:	f8cd 9004 	str.w	r9, [sp, #4]
 80073a0:	2312      	movs	r3, #18
 80073a2:	9209      	str	r2, [sp, #36]	; 0x24
 80073a4:	e7cf      	b.n	8007346 <_dtoa_r+0x266>
 80073a6:	2301      	movs	r3, #1
 80073a8:	9308      	str	r3, [sp, #32]
 80073aa:	e7f4      	b.n	8007396 <_dtoa_r+0x2b6>
 80073ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80073b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80073b4:	464b      	mov	r3, r9
 80073b6:	e7c6      	b.n	8007346 <_dtoa_r+0x266>
 80073b8:	3101      	adds	r1, #1
 80073ba:	6041      	str	r1, [r0, #4]
 80073bc:	0052      	lsls	r2, r2, #1
 80073be:	e7c6      	b.n	800734e <_dtoa_r+0x26e>
 80073c0:	636f4361 	.word	0x636f4361
 80073c4:	3fd287a7 	.word	0x3fd287a7
 80073c8:	8b60c8b3 	.word	0x8b60c8b3
 80073cc:	3fc68a28 	.word	0x3fc68a28
 80073d0:	509f79fb 	.word	0x509f79fb
 80073d4:	3fd34413 	.word	0x3fd34413
 80073d8:	08009f7e 	.word	0x08009f7e
 80073dc:	08009f95 	.word	0x08009f95
 80073e0:	7ff00000 	.word	0x7ff00000
 80073e4:	08009f7a 	.word	0x08009f7a
 80073e8:	08009f71 	.word	0x08009f71
 80073ec:	08009df1 	.word	0x08009df1
 80073f0:	3ff80000 	.word	0x3ff80000
 80073f4:	0800a110 	.word	0x0800a110
 80073f8:	08009ff4 	.word	0x08009ff4
 80073fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073fe:	9a00      	ldr	r2, [sp, #0]
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	9b01      	ldr	r3, [sp, #4]
 8007404:	2b0e      	cmp	r3, #14
 8007406:	f200 80ad 	bhi.w	8007564 <_dtoa_r+0x484>
 800740a:	2d00      	cmp	r5, #0
 800740c:	f000 80aa 	beq.w	8007564 <_dtoa_r+0x484>
 8007410:	f1ba 0f00 	cmp.w	sl, #0
 8007414:	dd36      	ble.n	8007484 <_dtoa_r+0x3a4>
 8007416:	4ac3      	ldr	r2, [pc, #780]	; (8007724 <_dtoa_r+0x644>)
 8007418:	f00a 030f 	and.w	r3, sl, #15
 800741c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007420:	ed93 7b00 	vldr	d7, [r3]
 8007424:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007428:	ea4f 172a 	mov.w	r7, sl, asr #4
 800742c:	eeb0 8a47 	vmov.f32	s16, s14
 8007430:	eef0 8a67 	vmov.f32	s17, s15
 8007434:	d016      	beq.n	8007464 <_dtoa_r+0x384>
 8007436:	4bbc      	ldr	r3, [pc, #752]	; (8007728 <_dtoa_r+0x648>)
 8007438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800743c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007440:	f7f9 fa04 	bl	800084c <__aeabi_ddiv>
 8007444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007448:	f007 070f 	and.w	r7, r7, #15
 800744c:	2503      	movs	r5, #3
 800744e:	4eb6      	ldr	r6, [pc, #728]	; (8007728 <_dtoa_r+0x648>)
 8007450:	b957      	cbnz	r7, 8007468 <_dtoa_r+0x388>
 8007452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007456:	ec53 2b18 	vmov	r2, r3, d8
 800745a:	f7f9 f9f7 	bl	800084c <__aeabi_ddiv>
 800745e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007462:	e029      	b.n	80074b8 <_dtoa_r+0x3d8>
 8007464:	2502      	movs	r5, #2
 8007466:	e7f2      	b.n	800744e <_dtoa_r+0x36e>
 8007468:	07f9      	lsls	r1, r7, #31
 800746a:	d508      	bpl.n	800747e <_dtoa_r+0x39e>
 800746c:	ec51 0b18 	vmov	r0, r1, d8
 8007470:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007474:	f7f9 f8c0 	bl	80005f8 <__aeabi_dmul>
 8007478:	ec41 0b18 	vmov	d8, r0, r1
 800747c:	3501      	adds	r5, #1
 800747e:	107f      	asrs	r7, r7, #1
 8007480:	3608      	adds	r6, #8
 8007482:	e7e5      	b.n	8007450 <_dtoa_r+0x370>
 8007484:	f000 80a6 	beq.w	80075d4 <_dtoa_r+0x4f4>
 8007488:	f1ca 0600 	rsb	r6, sl, #0
 800748c:	4ba5      	ldr	r3, [pc, #660]	; (8007724 <_dtoa_r+0x644>)
 800748e:	4fa6      	ldr	r7, [pc, #664]	; (8007728 <_dtoa_r+0x648>)
 8007490:	f006 020f 	and.w	r2, r6, #15
 8007494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074a0:	f7f9 f8aa 	bl	80005f8 <__aeabi_dmul>
 80074a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a8:	1136      	asrs	r6, r6, #4
 80074aa:	2300      	movs	r3, #0
 80074ac:	2502      	movs	r5, #2
 80074ae:	2e00      	cmp	r6, #0
 80074b0:	f040 8085 	bne.w	80075be <_dtoa_r+0x4de>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1d2      	bne.n	800745e <_dtoa_r+0x37e>
 80074b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 808c 	beq.w	80075d8 <_dtoa_r+0x4f8>
 80074c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074c4:	4b99      	ldr	r3, [pc, #612]	; (800772c <_dtoa_r+0x64c>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 fb06 	bl	8000adc <__aeabi_dcmplt>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	f000 8081 	beq.w	80075d8 <_dtoa_r+0x4f8>
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d07d      	beq.n	80075d8 <_dtoa_r+0x4f8>
 80074dc:	f1b9 0f00 	cmp.w	r9, #0
 80074e0:	dd3c      	ble.n	800755c <_dtoa_r+0x47c>
 80074e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	2200      	movs	r2, #0
 80074ea:	4b91      	ldr	r3, [pc, #580]	; (8007730 <_dtoa_r+0x650>)
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f7f9 f882 	bl	80005f8 <__aeabi_dmul>
 80074f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f8:	3501      	adds	r5, #1
 80074fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80074fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007502:	4628      	mov	r0, r5
 8007504:	f7f9 f80e 	bl	8000524 <__aeabi_i2d>
 8007508:	4632      	mov	r2, r6
 800750a:	463b      	mov	r3, r7
 800750c:	f7f9 f874 	bl	80005f8 <__aeabi_dmul>
 8007510:	4b88      	ldr	r3, [pc, #544]	; (8007734 <_dtoa_r+0x654>)
 8007512:	2200      	movs	r2, #0
 8007514:	f7f8 feba 	bl	800028c <__adddf3>
 8007518:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007520:	9303      	str	r3, [sp, #12]
 8007522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007524:	2b00      	cmp	r3, #0
 8007526:	d15c      	bne.n	80075e2 <_dtoa_r+0x502>
 8007528:	4b83      	ldr	r3, [pc, #524]	; (8007738 <_dtoa_r+0x658>)
 800752a:	2200      	movs	r2, #0
 800752c:	4630      	mov	r0, r6
 800752e:	4639      	mov	r1, r7
 8007530:	f7f8 feaa 	bl	8000288 <__aeabi_dsub>
 8007534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	f7f9 faec 	bl	8000b18 <__aeabi_dcmpgt>
 8007540:	2800      	cmp	r0, #0
 8007542:	f040 8296 	bne.w	8007a72 <_dtoa_r+0x992>
 8007546:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800754a:	4630      	mov	r0, r6
 800754c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007550:	4639      	mov	r1, r7
 8007552:	f7f9 fac3 	bl	8000adc <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	f040 8288 	bne.w	8007a6c <_dtoa_r+0x98c>
 800755c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007566:	2b00      	cmp	r3, #0
 8007568:	f2c0 8158 	blt.w	800781c <_dtoa_r+0x73c>
 800756c:	f1ba 0f0e 	cmp.w	sl, #14
 8007570:	f300 8154 	bgt.w	800781c <_dtoa_r+0x73c>
 8007574:	4b6b      	ldr	r3, [pc, #428]	; (8007724 <_dtoa_r+0x644>)
 8007576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800757a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800757e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	f280 80e3 	bge.w	800774c <_dtoa_r+0x66c>
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f300 80df 	bgt.w	800774c <_dtoa_r+0x66c>
 800758e:	f040 826d 	bne.w	8007a6c <_dtoa_r+0x98c>
 8007592:	4b69      	ldr	r3, [pc, #420]	; (8007738 <_dtoa_r+0x658>)
 8007594:	2200      	movs	r2, #0
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	f7f9 f82d 	bl	80005f8 <__aeabi_dmul>
 800759e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a2:	f7f9 faaf 	bl	8000b04 <__aeabi_dcmpge>
 80075a6:	9e01      	ldr	r6, [sp, #4]
 80075a8:	4637      	mov	r7, r6
 80075aa:	2800      	cmp	r0, #0
 80075ac:	f040 8243 	bne.w	8007a36 <_dtoa_r+0x956>
 80075b0:	9d00      	ldr	r5, [sp, #0]
 80075b2:	2331      	movs	r3, #49	; 0x31
 80075b4:	f805 3b01 	strb.w	r3, [r5], #1
 80075b8:	f10a 0a01 	add.w	sl, sl, #1
 80075bc:	e23f      	b.n	8007a3e <_dtoa_r+0x95e>
 80075be:	07f2      	lsls	r2, r6, #31
 80075c0:	d505      	bpl.n	80075ce <_dtoa_r+0x4ee>
 80075c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c6:	f7f9 f817 	bl	80005f8 <__aeabi_dmul>
 80075ca:	3501      	adds	r5, #1
 80075cc:	2301      	movs	r3, #1
 80075ce:	1076      	asrs	r6, r6, #1
 80075d0:	3708      	adds	r7, #8
 80075d2:	e76c      	b.n	80074ae <_dtoa_r+0x3ce>
 80075d4:	2502      	movs	r5, #2
 80075d6:	e76f      	b.n	80074b8 <_dtoa_r+0x3d8>
 80075d8:	9b01      	ldr	r3, [sp, #4]
 80075da:	f8cd a01c 	str.w	sl, [sp, #28]
 80075de:	930c      	str	r3, [sp, #48]	; 0x30
 80075e0:	e78d      	b.n	80074fe <_dtoa_r+0x41e>
 80075e2:	9900      	ldr	r1, [sp, #0]
 80075e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80075e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075e8:	4b4e      	ldr	r3, [pc, #312]	; (8007724 <_dtoa_r+0x644>)
 80075ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075ee:	4401      	add	r1, r0
 80075f0:	9102      	str	r1, [sp, #8]
 80075f2:	9908      	ldr	r1, [sp, #32]
 80075f4:	eeb0 8a47 	vmov.f32	s16, s14
 80075f8:	eef0 8a67 	vmov.f32	s17, s15
 80075fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007600:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007604:	2900      	cmp	r1, #0
 8007606:	d045      	beq.n	8007694 <_dtoa_r+0x5b4>
 8007608:	494c      	ldr	r1, [pc, #304]	; (800773c <_dtoa_r+0x65c>)
 800760a:	2000      	movs	r0, #0
 800760c:	f7f9 f91e 	bl	800084c <__aeabi_ddiv>
 8007610:	ec53 2b18 	vmov	r2, r3, d8
 8007614:	f7f8 fe38 	bl	8000288 <__aeabi_dsub>
 8007618:	9d00      	ldr	r5, [sp, #0]
 800761a:	ec41 0b18 	vmov	d8, r0, r1
 800761e:	4639      	mov	r1, r7
 8007620:	4630      	mov	r0, r6
 8007622:	f7f9 fa99 	bl	8000b58 <__aeabi_d2iz>
 8007626:	900c      	str	r0, [sp, #48]	; 0x30
 8007628:	f7f8 ff7c 	bl	8000524 <__aeabi_i2d>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f8 fe28 	bl	8000288 <__aeabi_dsub>
 8007638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800763a:	3330      	adds	r3, #48	; 0x30
 800763c:	f805 3b01 	strb.w	r3, [r5], #1
 8007640:	ec53 2b18 	vmov	r2, r3, d8
 8007644:	4606      	mov	r6, r0
 8007646:	460f      	mov	r7, r1
 8007648:	f7f9 fa48 	bl	8000adc <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	d165      	bne.n	800771c <_dtoa_r+0x63c>
 8007650:	4632      	mov	r2, r6
 8007652:	463b      	mov	r3, r7
 8007654:	4935      	ldr	r1, [pc, #212]	; (800772c <_dtoa_r+0x64c>)
 8007656:	2000      	movs	r0, #0
 8007658:	f7f8 fe16 	bl	8000288 <__aeabi_dsub>
 800765c:	ec53 2b18 	vmov	r2, r3, d8
 8007660:	f7f9 fa3c 	bl	8000adc <__aeabi_dcmplt>
 8007664:	2800      	cmp	r0, #0
 8007666:	f040 80b9 	bne.w	80077dc <_dtoa_r+0x6fc>
 800766a:	9b02      	ldr	r3, [sp, #8]
 800766c:	429d      	cmp	r5, r3
 800766e:	f43f af75 	beq.w	800755c <_dtoa_r+0x47c>
 8007672:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <_dtoa_r+0x650>)
 8007674:	ec51 0b18 	vmov	r0, r1, d8
 8007678:	2200      	movs	r2, #0
 800767a:	f7f8 ffbd 	bl	80005f8 <__aeabi_dmul>
 800767e:	4b2c      	ldr	r3, [pc, #176]	; (8007730 <_dtoa_r+0x650>)
 8007680:	ec41 0b18 	vmov	d8, r0, r1
 8007684:	2200      	movs	r2, #0
 8007686:	4630      	mov	r0, r6
 8007688:	4639      	mov	r1, r7
 800768a:	f7f8 ffb5 	bl	80005f8 <__aeabi_dmul>
 800768e:	4606      	mov	r6, r0
 8007690:	460f      	mov	r7, r1
 8007692:	e7c4      	b.n	800761e <_dtoa_r+0x53e>
 8007694:	ec51 0b17 	vmov	r0, r1, d7
 8007698:	f7f8 ffae 	bl	80005f8 <__aeabi_dmul>
 800769c:	9b02      	ldr	r3, [sp, #8]
 800769e:	9d00      	ldr	r5, [sp, #0]
 80076a0:	930c      	str	r3, [sp, #48]	; 0x30
 80076a2:	ec41 0b18 	vmov	d8, r0, r1
 80076a6:	4639      	mov	r1, r7
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7f9 fa55 	bl	8000b58 <__aeabi_d2iz>
 80076ae:	9011      	str	r0, [sp, #68]	; 0x44
 80076b0:	f7f8 ff38 	bl	8000524 <__aeabi_i2d>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f8 fde4 	bl	8000288 <__aeabi_dsub>
 80076c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076c2:	3330      	adds	r3, #48	; 0x30
 80076c4:	f805 3b01 	strb.w	r3, [r5], #1
 80076c8:	9b02      	ldr	r3, [sp, #8]
 80076ca:	429d      	cmp	r5, r3
 80076cc:	4606      	mov	r6, r0
 80076ce:	460f      	mov	r7, r1
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	d134      	bne.n	8007740 <_dtoa_r+0x660>
 80076d6:	4b19      	ldr	r3, [pc, #100]	; (800773c <_dtoa_r+0x65c>)
 80076d8:	ec51 0b18 	vmov	r0, r1, d8
 80076dc:	f7f8 fdd6 	bl	800028c <__adddf3>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4630      	mov	r0, r6
 80076e6:	4639      	mov	r1, r7
 80076e8:	f7f9 fa16 	bl	8000b18 <__aeabi_dcmpgt>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d175      	bne.n	80077dc <_dtoa_r+0x6fc>
 80076f0:	ec53 2b18 	vmov	r2, r3, d8
 80076f4:	4911      	ldr	r1, [pc, #68]	; (800773c <_dtoa_r+0x65c>)
 80076f6:	2000      	movs	r0, #0
 80076f8:	f7f8 fdc6 	bl	8000288 <__aeabi_dsub>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f9 f9ea 	bl	8000adc <__aeabi_dcmplt>
 8007708:	2800      	cmp	r0, #0
 800770a:	f43f af27 	beq.w	800755c <_dtoa_r+0x47c>
 800770e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007710:	1e6b      	subs	r3, r5, #1
 8007712:	930c      	str	r3, [sp, #48]	; 0x30
 8007714:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007718:	2b30      	cmp	r3, #48	; 0x30
 800771a:	d0f8      	beq.n	800770e <_dtoa_r+0x62e>
 800771c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007720:	e04a      	b.n	80077b8 <_dtoa_r+0x6d8>
 8007722:	bf00      	nop
 8007724:	0800a110 	.word	0x0800a110
 8007728:	0800a0e8 	.word	0x0800a0e8
 800772c:	3ff00000 	.word	0x3ff00000
 8007730:	40240000 	.word	0x40240000
 8007734:	401c0000 	.word	0x401c0000
 8007738:	40140000 	.word	0x40140000
 800773c:	3fe00000 	.word	0x3fe00000
 8007740:	4baf      	ldr	r3, [pc, #700]	; (8007a00 <_dtoa_r+0x920>)
 8007742:	f7f8 ff59 	bl	80005f8 <__aeabi_dmul>
 8007746:	4606      	mov	r6, r0
 8007748:	460f      	mov	r7, r1
 800774a:	e7ac      	b.n	80076a6 <_dtoa_r+0x5c6>
 800774c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007750:	9d00      	ldr	r5, [sp, #0]
 8007752:	4642      	mov	r2, r8
 8007754:	464b      	mov	r3, r9
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f9 f877 	bl	800084c <__aeabi_ddiv>
 800775e:	f7f9 f9fb 	bl	8000b58 <__aeabi_d2iz>
 8007762:	9002      	str	r0, [sp, #8]
 8007764:	f7f8 fede 	bl	8000524 <__aeabi_i2d>
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f7f8 ff44 	bl	80005f8 <__aeabi_dmul>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4630      	mov	r0, r6
 8007776:	4639      	mov	r1, r7
 8007778:	f7f8 fd86 	bl	8000288 <__aeabi_dsub>
 800777c:	9e02      	ldr	r6, [sp, #8]
 800777e:	9f01      	ldr	r7, [sp, #4]
 8007780:	3630      	adds	r6, #48	; 0x30
 8007782:	f805 6b01 	strb.w	r6, [r5], #1
 8007786:	9e00      	ldr	r6, [sp, #0]
 8007788:	1bae      	subs	r6, r5, r6
 800778a:	42b7      	cmp	r7, r6
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	d137      	bne.n	8007802 <_dtoa_r+0x722>
 8007792:	f7f8 fd7b 	bl	800028c <__adddf3>
 8007796:	4642      	mov	r2, r8
 8007798:	464b      	mov	r3, r9
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	f7f9 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 80077a2:	b9c8      	cbnz	r0, 80077d8 <_dtoa_r+0x6f8>
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	4630      	mov	r0, r6
 80077aa:	4639      	mov	r1, r7
 80077ac:	f7f9 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80077b0:	b110      	cbz	r0, 80077b8 <_dtoa_r+0x6d8>
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	07d9      	lsls	r1, r3, #31
 80077b6:	d40f      	bmi.n	80077d8 <_dtoa_r+0x6f8>
 80077b8:	4620      	mov	r0, r4
 80077ba:	4659      	mov	r1, fp
 80077bc:	f000 fe58 	bl	8008470 <_Bfree>
 80077c0:	2300      	movs	r3, #0
 80077c2:	702b      	strb	r3, [r5, #0]
 80077c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c6:	f10a 0001 	add.w	r0, sl, #1
 80077ca:	6018      	str	r0, [r3, #0]
 80077cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f43f acd8 	beq.w	8007184 <_dtoa_r+0xa4>
 80077d4:	601d      	str	r5, [r3, #0]
 80077d6:	e4d5      	b.n	8007184 <_dtoa_r+0xa4>
 80077d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80077dc:	462b      	mov	r3, r5
 80077de:	461d      	mov	r5, r3
 80077e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077e4:	2a39      	cmp	r2, #57	; 0x39
 80077e6:	d108      	bne.n	80077fa <_dtoa_r+0x71a>
 80077e8:	9a00      	ldr	r2, [sp, #0]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d1f7      	bne.n	80077de <_dtoa_r+0x6fe>
 80077ee:	9a07      	ldr	r2, [sp, #28]
 80077f0:	9900      	ldr	r1, [sp, #0]
 80077f2:	3201      	adds	r2, #1
 80077f4:	9207      	str	r2, [sp, #28]
 80077f6:	2230      	movs	r2, #48	; 0x30
 80077f8:	700a      	strb	r2, [r1, #0]
 80077fa:	781a      	ldrb	r2, [r3, #0]
 80077fc:	3201      	adds	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e78c      	b.n	800771c <_dtoa_r+0x63c>
 8007802:	4b7f      	ldr	r3, [pc, #508]	; (8007a00 <_dtoa_r+0x920>)
 8007804:	2200      	movs	r2, #0
 8007806:	f7f8 fef7 	bl	80005f8 <__aeabi_dmul>
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	f7f9 f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8007816:	2800      	cmp	r0, #0
 8007818:	d09b      	beq.n	8007752 <_dtoa_r+0x672>
 800781a:	e7cd      	b.n	80077b8 <_dtoa_r+0x6d8>
 800781c:	9a08      	ldr	r2, [sp, #32]
 800781e:	2a00      	cmp	r2, #0
 8007820:	f000 80c4 	beq.w	80079ac <_dtoa_r+0x8cc>
 8007824:	9a05      	ldr	r2, [sp, #20]
 8007826:	2a01      	cmp	r2, #1
 8007828:	f300 80a8 	bgt.w	800797c <_dtoa_r+0x89c>
 800782c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800782e:	2a00      	cmp	r2, #0
 8007830:	f000 80a0 	beq.w	8007974 <_dtoa_r+0x894>
 8007834:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007838:	9e06      	ldr	r6, [sp, #24]
 800783a:	4645      	mov	r5, r8
 800783c:	9a04      	ldr	r2, [sp, #16]
 800783e:	2101      	movs	r1, #1
 8007840:	441a      	add	r2, r3
 8007842:	4620      	mov	r0, r4
 8007844:	4498      	add	r8, r3
 8007846:	9204      	str	r2, [sp, #16]
 8007848:	f000 ff18 	bl	800867c <__i2b>
 800784c:	4607      	mov	r7, r0
 800784e:	2d00      	cmp	r5, #0
 8007850:	dd0b      	ble.n	800786a <_dtoa_r+0x78a>
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd08      	ble.n	800786a <_dtoa_r+0x78a>
 8007858:	42ab      	cmp	r3, r5
 800785a:	9a04      	ldr	r2, [sp, #16]
 800785c:	bfa8      	it	ge
 800785e:	462b      	movge	r3, r5
 8007860:	eba8 0803 	sub.w	r8, r8, r3
 8007864:	1aed      	subs	r5, r5, r3
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	b1fb      	cbz	r3, 80078ae <_dtoa_r+0x7ce>
 800786e:	9b08      	ldr	r3, [sp, #32]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 809f 	beq.w	80079b4 <_dtoa_r+0x8d4>
 8007876:	2e00      	cmp	r6, #0
 8007878:	dd11      	ble.n	800789e <_dtoa_r+0x7be>
 800787a:	4639      	mov	r1, r7
 800787c:	4632      	mov	r2, r6
 800787e:	4620      	mov	r0, r4
 8007880:	f000 ffb8 	bl	80087f4 <__pow5mult>
 8007884:	465a      	mov	r2, fp
 8007886:	4601      	mov	r1, r0
 8007888:	4607      	mov	r7, r0
 800788a:	4620      	mov	r0, r4
 800788c:	f000 ff0c 	bl	80086a8 <__multiply>
 8007890:	4659      	mov	r1, fp
 8007892:	9007      	str	r0, [sp, #28]
 8007894:	4620      	mov	r0, r4
 8007896:	f000 fdeb 	bl	8008470 <_Bfree>
 800789a:	9b07      	ldr	r3, [sp, #28]
 800789c:	469b      	mov	fp, r3
 800789e:	9b06      	ldr	r3, [sp, #24]
 80078a0:	1b9a      	subs	r2, r3, r6
 80078a2:	d004      	beq.n	80078ae <_dtoa_r+0x7ce>
 80078a4:	4659      	mov	r1, fp
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 ffa4 	bl	80087f4 <__pow5mult>
 80078ac:	4683      	mov	fp, r0
 80078ae:	2101      	movs	r1, #1
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fee3 	bl	800867c <__i2b>
 80078b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	4606      	mov	r6, r0
 80078bc:	dd7c      	ble.n	80079b8 <_dtoa_r+0x8d8>
 80078be:	461a      	mov	r2, r3
 80078c0:	4601      	mov	r1, r0
 80078c2:	4620      	mov	r0, r4
 80078c4:	f000 ff96 	bl	80087f4 <__pow5mult>
 80078c8:	9b05      	ldr	r3, [sp, #20]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	4606      	mov	r6, r0
 80078ce:	dd76      	ble.n	80079be <_dtoa_r+0x8de>
 80078d0:	2300      	movs	r3, #0
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	6933      	ldr	r3, [r6, #16]
 80078d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078da:	6918      	ldr	r0, [r3, #16]
 80078dc:	f000 fe7e 	bl	80085dc <__hi0bits>
 80078e0:	f1c0 0020 	rsb	r0, r0, #32
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	4418      	add	r0, r3
 80078e8:	f010 001f 	ands.w	r0, r0, #31
 80078ec:	f000 8086 	beq.w	80079fc <_dtoa_r+0x91c>
 80078f0:	f1c0 0320 	rsb	r3, r0, #32
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	dd7f      	ble.n	80079f8 <_dtoa_r+0x918>
 80078f8:	f1c0 001c 	rsb	r0, r0, #28
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	4403      	add	r3, r0
 8007900:	4480      	add	r8, r0
 8007902:	4405      	add	r5, r0
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	f1b8 0f00 	cmp.w	r8, #0
 800790a:	dd05      	ble.n	8007918 <_dtoa_r+0x838>
 800790c:	4659      	mov	r1, fp
 800790e:	4642      	mov	r2, r8
 8007910:	4620      	mov	r0, r4
 8007912:	f000 ffc9 	bl	80088a8 <__lshift>
 8007916:	4683      	mov	fp, r0
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	dd05      	ble.n	800792a <_dtoa_r+0x84a>
 800791e:	4631      	mov	r1, r6
 8007920:	461a      	mov	r2, r3
 8007922:	4620      	mov	r0, r4
 8007924:	f000 ffc0 	bl	80088a8 <__lshift>
 8007928:	4606      	mov	r6, r0
 800792a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800792c:	2b00      	cmp	r3, #0
 800792e:	d069      	beq.n	8007a04 <_dtoa_r+0x924>
 8007930:	4631      	mov	r1, r6
 8007932:	4658      	mov	r0, fp
 8007934:	f001 f824 	bl	8008980 <__mcmp>
 8007938:	2800      	cmp	r0, #0
 800793a:	da63      	bge.n	8007a04 <_dtoa_r+0x924>
 800793c:	2300      	movs	r3, #0
 800793e:	4659      	mov	r1, fp
 8007940:	220a      	movs	r2, #10
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fdb6 	bl	80084b4 <__multadd>
 8007948:	9b08      	ldr	r3, [sp, #32]
 800794a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800794e:	4683      	mov	fp, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 818f 	beq.w	8007c74 <_dtoa_r+0xb94>
 8007956:	4639      	mov	r1, r7
 8007958:	2300      	movs	r3, #0
 800795a:	220a      	movs	r2, #10
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fda9 	bl	80084b4 <__multadd>
 8007962:	f1b9 0f00 	cmp.w	r9, #0
 8007966:	4607      	mov	r7, r0
 8007968:	f300 808e 	bgt.w	8007a88 <_dtoa_r+0x9a8>
 800796c:	9b05      	ldr	r3, [sp, #20]
 800796e:	2b02      	cmp	r3, #2
 8007970:	dc50      	bgt.n	8007a14 <_dtoa_r+0x934>
 8007972:	e089      	b.n	8007a88 <_dtoa_r+0x9a8>
 8007974:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800797a:	e75d      	b.n	8007838 <_dtoa_r+0x758>
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	1e5e      	subs	r6, r3, #1
 8007980:	9b06      	ldr	r3, [sp, #24]
 8007982:	42b3      	cmp	r3, r6
 8007984:	bfbf      	itttt	lt
 8007986:	9b06      	ldrlt	r3, [sp, #24]
 8007988:	9606      	strlt	r6, [sp, #24]
 800798a:	1af2      	sublt	r2, r6, r3
 800798c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800798e:	bfb6      	itet	lt
 8007990:	189b      	addlt	r3, r3, r2
 8007992:	1b9e      	subge	r6, r3, r6
 8007994:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	bfb8      	it	lt
 800799a:	2600      	movlt	r6, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	bfb5      	itete	lt
 80079a0:	eba8 0503 	sublt.w	r5, r8, r3
 80079a4:	9b01      	ldrge	r3, [sp, #4]
 80079a6:	2300      	movlt	r3, #0
 80079a8:	4645      	movge	r5, r8
 80079aa:	e747      	b.n	800783c <_dtoa_r+0x75c>
 80079ac:	9e06      	ldr	r6, [sp, #24]
 80079ae:	9f08      	ldr	r7, [sp, #32]
 80079b0:	4645      	mov	r5, r8
 80079b2:	e74c      	b.n	800784e <_dtoa_r+0x76e>
 80079b4:	9a06      	ldr	r2, [sp, #24]
 80079b6:	e775      	b.n	80078a4 <_dtoa_r+0x7c4>
 80079b8:	9b05      	ldr	r3, [sp, #20]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	dc18      	bgt.n	80079f0 <_dtoa_r+0x910>
 80079be:	9b02      	ldr	r3, [sp, #8]
 80079c0:	b9b3      	cbnz	r3, 80079f0 <_dtoa_r+0x910>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c8:	b9a3      	cbnz	r3, 80079f4 <_dtoa_r+0x914>
 80079ca:	9b03      	ldr	r3, [sp, #12]
 80079cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079d0:	0d1b      	lsrs	r3, r3, #20
 80079d2:	051b      	lsls	r3, r3, #20
 80079d4:	b12b      	cbz	r3, 80079e2 <_dtoa_r+0x902>
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	3301      	adds	r3, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	f108 0801 	add.w	r8, r8, #1
 80079e0:	2301      	movs	r3, #1
 80079e2:	9306      	str	r3, [sp, #24]
 80079e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f47f af74 	bne.w	80078d4 <_dtoa_r+0x7f4>
 80079ec:	2001      	movs	r0, #1
 80079ee:	e779      	b.n	80078e4 <_dtoa_r+0x804>
 80079f0:	2300      	movs	r3, #0
 80079f2:	e7f6      	b.n	80079e2 <_dtoa_r+0x902>
 80079f4:	9b02      	ldr	r3, [sp, #8]
 80079f6:	e7f4      	b.n	80079e2 <_dtoa_r+0x902>
 80079f8:	d085      	beq.n	8007906 <_dtoa_r+0x826>
 80079fa:	4618      	mov	r0, r3
 80079fc:	301c      	adds	r0, #28
 80079fe:	e77d      	b.n	80078fc <_dtoa_r+0x81c>
 8007a00:	40240000 	.word	0x40240000
 8007a04:	9b01      	ldr	r3, [sp, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dc38      	bgt.n	8007a7c <_dtoa_r+0x99c>
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	dd35      	ble.n	8007a7c <_dtoa_r+0x99c>
 8007a10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	d10d      	bne.n	8007a36 <_dtoa_r+0x956>
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	2205      	movs	r2, #5
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fd47 	bl	80084b4 <__multadd>
 8007a26:	4601      	mov	r1, r0
 8007a28:	4606      	mov	r6, r0
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 ffa8 	bl	8008980 <__mcmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f73f adbd 	bgt.w	80075b0 <_dtoa_r+0x4d0>
 8007a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a38:	9d00      	ldr	r5, [sp, #0]
 8007a3a:	ea6f 0a03 	mvn.w	sl, r3
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	4631      	mov	r1, r6
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 fd13 	bl	8008470 <_Bfree>
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	f43f aeb4 	beq.w	80077b8 <_dtoa_r+0x6d8>
 8007a50:	f1b8 0f00 	cmp.w	r8, #0
 8007a54:	d005      	beq.n	8007a62 <_dtoa_r+0x982>
 8007a56:	45b8      	cmp	r8, r7
 8007a58:	d003      	beq.n	8007a62 <_dtoa_r+0x982>
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 fd07 	bl	8008470 <_Bfree>
 8007a62:	4639      	mov	r1, r7
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fd03 	bl	8008470 <_Bfree>
 8007a6a:	e6a5      	b.n	80077b8 <_dtoa_r+0x6d8>
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	4637      	mov	r7, r6
 8007a70:	e7e1      	b.n	8007a36 <_dtoa_r+0x956>
 8007a72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a78:	4637      	mov	r7, r6
 8007a7a:	e599      	b.n	80075b0 <_dtoa_r+0x4d0>
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 80fd 	beq.w	8007c82 <_dtoa_r+0xba2>
 8007a88:	2d00      	cmp	r5, #0
 8007a8a:	dd05      	ble.n	8007a98 <_dtoa_r+0x9b8>
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 ff09 	bl	80088a8 <__lshift>
 8007a96:	4607      	mov	r7, r0
 8007a98:	9b06      	ldr	r3, [sp, #24]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d05c      	beq.n	8007b58 <_dtoa_r+0xa78>
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fca5 	bl	80083f0 <_Balloc>
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	b928      	cbnz	r0, 8007ab6 <_dtoa_r+0x9d6>
 8007aaa:	4b80      	ldr	r3, [pc, #512]	; (8007cac <_dtoa_r+0xbcc>)
 8007aac:	4602      	mov	r2, r0
 8007aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ab2:	f7ff bb2e 	b.w	8007112 <_dtoa_r+0x32>
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	3202      	adds	r2, #2
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	f107 010c 	add.w	r1, r7, #12
 8007ac0:	300c      	adds	r0, #12
 8007ac2:	f000 fc87 	bl	80083d4 <memcpy>
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 feec 	bl	80088a8 <__lshift>
 8007ad0:	9b00      	ldr	r3, [sp, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	9301      	str	r3, [sp, #4]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	444b      	add	r3, r9
 8007ada:	9307      	str	r3, [sp, #28]
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	46b8      	mov	r8, r7
 8007ae4:	9306      	str	r3, [sp, #24]
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	4631      	mov	r1, r6
 8007aec:	3b01      	subs	r3, #1
 8007aee:	4658      	mov	r0, fp
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	f7ff fa67 	bl	8006fc4 <quorem>
 8007af6:	4603      	mov	r3, r0
 8007af8:	3330      	adds	r3, #48	; 0x30
 8007afa:	9004      	str	r0, [sp, #16]
 8007afc:	4641      	mov	r1, r8
 8007afe:	4658      	mov	r0, fp
 8007b00:	9308      	str	r3, [sp, #32]
 8007b02:	f000 ff3d 	bl	8008980 <__mcmp>
 8007b06:	463a      	mov	r2, r7
 8007b08:	4681      	mov	r9, r0
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 ff53 	bl	80089b8 <__mdiff>
 8007b12:	68c2      	ldr	r2, [r0, #12]
 8007b14:	9b08      	ldr	r3, [sp, #32]
 8007b16:	4605      	mov	r5, r0
 8007b18:	bb02      	cbnz	r2, 8007b5c <_dtoa_r+0xa7c>
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4658      	mov	r0, fp
 8007b1e:	f000 ff2f 	bl	8008980 <__mcmp>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	4602      	mov	r2, r0
 8007b26:	4629      	mov	r1, r5
 8007b28:	4620      	mov	r0, r4
 8007b2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007b2e:	f000 fc9f 	bl	8008470 <_Bfree>
 8007b32:	9b05      	ldr	r3, [sp, #20]
 8007b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b36:	9d01      	ldr	r5, [sp, #4]
 8007b38:	ea43 0102 	orr.w	r1, r3, r2
 8007b3c:	9b06      	ldr	r3, [sp, #24]
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	9b08      	ldr	r3, [sp, #32]
 8007b42:	d10d      	bne.n	8007b60 <_dtoa_r+0xa80>
 8007b44:	2b39      	cmp	r3, #57	; 0x39
 8007b46:	d029      	beq.n	8007b9c <_dtoa_r+0xabc>
 8007b48:	f1b9 0f00 	cmp.w	r9, #0
 8007b4c:	dd01      	ble.n	8007b52 <_dtoa_r+0xa72>
 8007b4e:	9b04      	ldr	r3, [sp, #16]
 8007b50:	3331      	adds	r3, #49	; 0x31
 8007b52:	9a02      	ldr	r2, [sp, #8]
 8007b54:	7013      	strb	r3, [r2, #0]
 8007b56:	e774      	b.n	8007a42 <_dtoa_r+0x962>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	e7b9      	b.n	8007ad0 <_dtoa_r+0x9f0>
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	e7e2      	b.n	8007b26 <_dtoa_r+0xa46>
 8007b60:	f1b9 0f00 	cmp.w	r9, #0
 8007b64:	db06      	blt.n	8007b74 <_dtoa_r+0xa94>
 8007b66:	9905      	ldr	r1, [sp, #20]
 8007b68:	ea41 0909 	orr.w	r9, r1, r9
 8007b6c:	9906      	ldr	r1, [sp, #24]
 8007b6e:	ea59 0101 	orrs.w	r1, r9, r1
 8007b72:	d120      	bne.n	8007bb6 <_dtoa_r+0xad6>
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	ddec      	ble.n	8007b52 <_dtoa_r+0xa72>
 8007b78:	4659      	mov	r1, fp
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	f000 fe92 	bl	80088a8 <__lshift>
 8007b84:	4631      	mov	r1, r6
 8007b86:	4683      	mov	fp, r0
 8007b88:	f000 fefa 	bl	8008980 <__mcmp>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	dc02      	bgt.n	8007b98 <_dtoa_r+0xab8>
 8007b92:	d1de      	bne.n	8007b52 <_dtoa_r+0xa72>
 8007b94:	07da      	lsls	r2, r3, #31
 8007b96:	d5dc      	bpl.n	8007b52 <_dtoa_r+0xa72>
 8007b98:	2b39      	cmp	r3, #57	; 0x39
 8007b9a:	d1d8      	bne.n	8007b4e <_dtoa_r+0xa6e>
 8007b9c:	9a02      	ldr	r2, [sp, #8]
 8007b9e:	2339      	movs	r3, #57	; 0x39
 8007ba0:	7013      	strb	r3, [r2, #0]
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	461d      	mov	r5, r3
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007bac:	2a39      	cmp	r2, #57	; 0x39
 8007bae:	d050      	beq.n	8007c52 <_dtoa_r+0xb72>
 8007bb0:	3201      	adds	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e745      	b.n	8007a42 <_dtoa_r+0x962>
 8007bb6:	2a00      	cmp	r2, #0
 8007bb8:	dd03      	ble.n	8007bc2 <_dtoa_r+0xae2>
 8007bba:	2b39      	cmp	r3, #57	; 0x39
 8007bbc:	d0ee      	beq.n	8007b9c <_dtoa_r+0xabc>
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	e7c7      	b.n	8007b52 <_dtoa_r+0xa72>
 8007bc2:	9a01      	ldr	r2, [sp, #4]
 8007bc4:	9907      	ldr	r1, [sp, #28]
 8007bc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bca:	428a      	cmp	r2, r1
 8007bcc:	d02a      	beq.n	8007c24 <_dtoa_r+0xb44>
 8007bce:	4659      	mov	r1, fp
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	220a      	movs	r2, #10
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fc6d 	bl	80084b4 <__multadd>
 8007bda:	45b8      	cmp	r8, r7
 8007bdc:	4683      	mov	fp, r0
 8007bde:	f04f 0300 	mov.w	r3, #0
 8007be2:	f04f 020a 	mov.w	r2, #10
 8007be6:	4641      	mov	r1, r8
 8007be8:	4620      	mov	r0, r4
 8007bea:	d107      	bne.n	8007bfc <_dtoa_r+0xb1c>
 8007bec:	f000 fc62 	bl	80084b4 <__multadd>
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	9b01      	ldr	r3, [sp, #4]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	9301      	str	r3, [sp, #4]
 8007bfa:	e775      	b.n	8007ae8 <_dtoa_r+0xa08>
 8007bfc:	f000 fc5a 	bl	80084b4 <__multadd>
 8007c00:	4639      	mov	r1, r7
 8007c02:	4680      	mov	r8, r0
 8007c04:	2300      	movs	r3, #0
 8007c06:	220a      	movs	r2, #10
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fc53 	bl	80084b4 <__multadd>
 8007c0e:	4607      	mov	r7, r0
 8007c10:	e7f0      	b.n	8007bf4 <_dtoa_r+0xb14>
 8007c12:	f1b9 0f00 	cmp.w	r9, #0
 8007c16:	9a00      	ldr	r2, [sp, #0]
 8007c18:	bfcc      	ite	gt
 8007c1a:	464d      	movgt	r5, r9
 8007c1c:	2501      	movle	r5, #1
 8007c1e:	4415      	add	r5, r2
 8007c20:	f04f 0800 	mov.w	r8, #0
 8007c24:	4659      	mov	r1, fp
 8007c26:	2201      	movs	r2, #1
 8007c28:	4620      	mov	r0, r4
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	f000 fe3c 	bl	80088a8 <__lshift>
 8007c30:	4631      	mov	r1, r6
 8007c32:	4683      	mov	fp, r0
 8007c34:	f000 fea4 	bl	8008980 <__mcmp>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	dcb2      	bgt.n	8007ba2 <_dtoa_r+0xac2>
 8007c3c:	d102      	bne.n	8007c44 <_dtoa_r+0xb64>
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	07db      	lsls	r3, r3, #31
 8007c42:	d4ae      	bmi.n	8007ba2 <_dtoa_r+0xac2>
 8007c44:	462b      	mov	r3, r5
 8007c46:	461d      	mov	r5, r3
 8007c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c4c:	2a30      	cmp	r2, #48	; 0x30
 8007c4e:	d0fa      	beq.n	8007c46 <_dtoa_r+0xb66>
 8007c50:	e6f7      	b.n	8007a42 <_dtoa_r+0x962>
 8007c52:	9a00      	ldr	r2, [sp, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d1a5      	bne.n	8007ba4 <_dtoa_r+0xac4>
 8007c58:	f10a 0a01 	add.w	sl, sl, #1
 8007c5c:	2331      	movs	r3, #49	; 0x31
 8007c5e:	e779      	b.n	8007b54 <_dtoa_r+0xa74>
 8007c60:	4b13      	ldr	r3, [pc, #76]	; (8007cb0 <_dtoa_r+0xbd0>)
 8007c62:	f7ff baaf 	b.w	80071c4 <_dtoa_r+0xe4>
 8007c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f47f aa86 	bne.w	800717a <_dtoa_r+0x9a>
 8007c6e:	4b11      	ldr	r3, [pc, #68]	; (8007cb4 <_dtoa_r+0xbd4>)
 8007c70:	f7ff baa8 	b.w	80071c4 <_dtoa_r+0xe4>
 8007c74:	f1b9 0f00 	cmp.w	r9, #0
 8007c78:	dc03      	bgt.n	8007c82 <_dtoa_r+0xba2>
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	f73f aec9 	bgt.w	8007a14 <_dtoa_r+0x934>
 8007c82:	9d00      	ldr	r5, [sp, #0]
 8007c84:	4631      	mov	r1, r6
 8007c86:	4658      	mov	r0, fp
 8007c88:	f7ff f99c 	bl	8006fc4 <quorem>
 8007c8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c90:	f805 3b01 	strb.w	r3, [r5], #1
 8007c94:	9a00      	ldr	r2, [sp, #0]
 8007c96:	1aaa      	subs	r2, r5, r2
 8007c98:	4591      	cmp	r9, r2
 8007c9a:	ddba      	ble.n	8007c12 <_dtoa_r+0xb32>
 8007c9c:	4659      	mov	r1, fp
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	220a      	movs	r2, #10
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fc06 	bl	80084b4 <__multadd>
 8007ca8:	4683      	mov	fp, r0
 8007caa:	e7eb      	b.n	8007c84 <_dtoa_r+0xba4>
 8007cac:	08009ff4 	.word	0x08009ff4
 8007cb0:	08009df0 	.word	0x08009df0
 8007cb4:	08009f71 	.word	0x08009f71

08007cb8 <rshift>:
 8007cb8:	6903      	ldr	r3, [r0, #16]
 8007cba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007cbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007cc6:	f100 0414 	add.w	r4, r0, #20
 8007cca:	dd45      	ble.n	8007d58 <rshift+0xa0>
 8007ccc:	f011 011f 	ands.w	r1, r1, #31
 8007cd0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cd8:	d10c      	bne.n	8007cf4 <rshift+0x3c>
 8007cda:	f100 0710 	add.w	r7, r0, #16
 8007cde:	4629      	mov	r1, r5
 8007ce0:	42b1      	cmp	r1, r6
 8007ce2:	d334      	bcc.n	8007d4e <rshift+0x96>
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	1eea      	subs	r2, r5, #3
 8007cea:	4296      	cmp	r6, r2
 8007cec:	bf38      	it	cc
 8007cee:	2300      	movcc	r3, #0
 8007cf0:	4423      	add	r3, r4
 8007cf2:	e015      	b.n	8007d20 <rshift+0x68>
 8007cf4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007cf8:	f1c1 0820 	rsb	r8, r1, #32
 8007cfc:	40cf      	lsrs	r7, r1
 8007cfe:	f105 0e04 	add.w	lr, r5, #4
 8007d02:	46a1      	mov	r9, r4
 8007d04:	4576      	cmp	r6, lr
 8007d06:	46f4      	mov	ip, lr
 8007d08:	d815      	bhi.n	8007d36 <rshift+0x7e>
 8007d0a:	1a9b      	subs	r3, r3, r2
 8007d0c:	009a      	lsls	r2, r3, #2
 8007d0e:	3a04      	subs	r2, #4
 8007d10:	3501      	adds	r5, #1
 8007d12:	42ae      	cmp	r6, r5
 8007d14:	bf38      	it	cc
 8007d16:	2200      	movcc	r2, #0
 8007d18:	18a3      	adds	r3, r4, r2
 8007d1a:	50a7      	str	r7, [r4, r2]
 8007d1c:	b107      	cbz	r7, 8007d20 <rshift+0x68>
 8007d1e:	3304      	adds	r3, #4
 8007d20:	1b1a      	subs	r2, r3, r4
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d28:	bf08      	it	eq
 8007d2a:	2300      	moveq	r3, #0
 8007d2c:	6102      	str	r2, [r0, #16]
 8007d2e:	bf08      	it	eq
 8007d30:	6143      	streq	r3, [r0, #20]
 8007d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d36:	f8dc c000 	ldr.w	ip, [ip]
 8007d3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d3e:	ea4c 0707 	orr.w	r7, ip, r7
 8007d42:	f849 7b04 	str.w	r7, [r9], #4
 8007d46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d4a:	40cf      	lsrs	r7, r1
 8007d4c:	e7da      	b.n	8007d04 <rshift+0x4c>
 8007d4e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d52:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d56:	e7c3      	b.n	8007ce0 <rshift+0x28>
 8007d58:	4623      	mov	r3, r4
 8007d5a:	e7e1      	b.n	8007d20 <rshift+0x68>

08007d5c <__hexdig_fun>:
 8007d5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d60:	2b09      	cmp	r3, #9
 8007d62:	d802      	bhi.n	8007d6a <__hexdig_fun+0xe>
 8007d64:	3820      	subs	r0, #32
 8007d66:	b2c0      	uxtb	r0, r0
 8007d68:	4770      	bx	lr
 8007d6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d6e:	2b05      	cmp	r3, #5
 8007d70:	d801      	bhi.n	8007d76 <__hexdig_fun+0x1a>
 8007d72:	3847      	subs	r0, #71	; 0x47
 8007d74:	e7f7      	b.n	8007d66 <__hexdig_fun+0xa>
 8007d76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d801      	bhi.n	8007d82 <__hexdig_fun+0x26>
 8007d7e:	3827      	subs	r0, #39	; 0x27
 8007d80:	e7f1      	b.n	8007d66 <__hexdig_fun+0xa>
 8007d82:	2000      	movs	r0, #0
 8007d84:	4770      	bx	lr
	...

08007d88 <__gethex>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	ed2d 8b02 	vpush	{d8}
 8007d90:	b089      	sub	sp, #36	; 0x24
 8007d92:	ee08 0a10 	vmov	s16, r0
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	4bbc      	ldr	r3, [pc, #752]	; (800808c <__gethex+0x304>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	9301      	str	r3, [sp, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	468b      	mov	fp, r1
 8007da2:	4690      	mov	r8, r2
 8007da4:	f7f8 fa14 	bl	80001d0 <strlen>
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	f8db 2000 	ldr.w	r2, [fp]
 8007dae:	4403      	add	r3, r0
 8007db0:	4682      	mov	sl, r0
 8007db2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	1c93      	adds	r3, r2, #2
 8007dba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007dbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007dc2:	32fe      	adds	r2, #254	; 0xfe
 8007dc4:	18d1      	adds	r1, r2, r3
 8007dc6:	461f      	mov	r7, r3
 8007dc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007dcc:	9100      	str	r1, [sp, #0]
 8007dce:	2830      	cmp	r0, #48	; 0x30
 8007dd0:	d0f8      	beq.n	8007dc4 <__gethex+0x3c>
 8007dd2:	f7ff ffc3 	bl	8007d5c <__hexdig_fun>
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d13a      	bne.n	8007e52 <__gethex+0xca>
 8007ddc:	9901      	ldr	r1, [sp, #4]
 8007dde:	4652      	mov	r2, sl
 8007de0:	4638      	mov	r0, r7
 8007de2:	f001 f9ed 	bl	80091c0 <strncmp>
 8007de6:	4605      	mov	r5, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d168      	bne.n	8007ebe <__gethex+0x136>
 8007dec:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007df0:	eb07 060a 	add.w	r6, r7, sl
 8007df4:	f7ff ffb2 	bl	8007d5c <__hexdig_fun>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d062      	beq.n	8007ec2 <__gethex+0x13a>
 8007dfc:	4633      	mov	r3, r6
 8007dfe:	7818      	ldrb	r0, [r3, #0]
 8007e00:	2830      	cmp	r0, #48	; 0x30
 8007e02:	461f      	mov	r7, r3
 8007e04:	f103 0301 	add.w	r3, r3, #1
 8007e08:	d0f9      	beq.n	8007dfe <__gethex+0x76>
 8007e0a:	f7ff ffa7 	bl	8007d5c <__hexdig_fun>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	fab0 f480 	clz	r4, r0
 8007e14:	0964      	lsrs	r4, r4, #5
 8007e16:	4635      	mov	r5, r6
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	463a      	mov	r2, r7
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	3201      	adds	r2, #1
 8007e20:	7830      	ldrb	r0, [r6, #0]
 8007e22:	f7ff ff9b 	bl	8007d5c <__hexdig_fun>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d1f8      	bne.n	8007e1c <__gethex+0x94>
 8007e2a:	9901      	ldr	r1, [sp, #4]
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f001 f9c6 	bl	80091c0 <strncmp>
 8007e34:	b980      	cbnz	r0, 8007e58 <__gethex+0xd0>
 8007e36:	b94d      	cbnz	r5, 8007e4c <__gethex+0xc4>
 8007e38:	eb06 050a 	add.w	r5, r6, sl
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	4616      	mov	r6, r2
 8007e40:	3201      	adds	r2, #1
 8007e42:	7830      	ldrb	r0, [r6, #0]
 8007e44:	f7ff ff8a 	bl	8007d5c <__hexdig_fun>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d1f8      	bne.n	8007e3e <__gethex+0xb6>
 8007e4c:	1bad      	subs	r5, r5, r6
 8007e4e:	00ad      	lsls	r5, r5, #2
 8007e50:	e004      	b.n	8007e5c <__gethex+0xd4>
 8007e52:	2400      	movs	r4, #0
 8007e54:	4625      	mov	r5, r4
 8007e56:	e7e0      	b.n	8007e1a <__gethex+0x92>
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	d1f7      	bne.n	8007e4c <__gethex+0xc4>
 8007e5c:	7833      	ldrb	r3, [r6, #0]
 8007e5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e62:	2b50      	cmp	r3, #80	; 0x50
 8007e64:	d13b      	bne.n	8007ede <__gethex+0x156>
 8007e66:	7873      	ldrb	r3, [r6, #1]
 8007e68:	2b2b      	cmp	r3, #43	; 0x2b
 8007e6a:	d02c      	beq.n	8007ec6 <__gethex+0x13e>
 8007e6c:	2b2d      	cmp	r3, #45	; 0x2d
 8007e6e:	d02e      	beq.n	8007ece <__gethex+0x146>
 8007e70:	1c71      	adds	r1, r6, #1
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	7808      	ldrb	r0, [r1, #0]
 8007e78:	f7ff ff70 	bl	8007d5c <__hexdig_fun>
 8007e7c:	1e43      	subs	r3, r0, #1
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b18      	cmp	r3, #24
 8007e82:	d82c      	bhi.n	8007ede <__gethex+0x156>
 8007e84:	f1a0 0210 	sub.w	r2, r0, #16
 8007e88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e8c:	f7ff ff66 	bl	8007d5c <__hexdig_fun>
 8007e90:	1e43      	subs	r3, r0, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b18      	cmp	r3, #24
 8007e96:	d91d      	bls.n	8007ed4 <__gethex+0x14c>
 8007e98:	f1b9 0f00 	cmp.w	r9, #0
 8007e9c:	d000      	beq.n	8007ea0 <__gethex+0x118>
 8007e9e:	4252      	negs	r2, r2
 8007ea0:	4415      	add	r5, r2
 8007ea2:	f8cb 1000 	str.w	r1, [fp]
 8007ea6:	b1e4      	cbz	r4, 8007ee2 <__gethex+0x15a>
 8007ea8:	9b00      	ldr	r3, [sp, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2700      	movne	r7, #0
 8007eb0:	2706      	moveq	r7, #6
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	b009      	add	sp, #36	; 0x24
 8007eb6:	ecbd 8b02 	vpop	{d8}
 8007eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebe:	463e      	mov	r6, r7
 8007ec0:	4625      	mov	r5, r4
 8007ec2:	2401      	movs	r4, #1
 8007ec4:	e7ca      	b.n	8007e5c <__gethex+0xd4>
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	1cb1      	adds	r1, r6, #2
 8007ecc:	e7d3      	b.n	8007e76 <__gethex+0xee>
 8007ece:	f04f 0901 	mov.w	r9, #1
 8007ed2:	e7fa      	b.n	8007eca <__gethex+0x142>
 8007ed4:	230a      	movs	r3, #10
 8007ed6:	fb03 0202 	mla	r2, r3, r2, r0
 8007eda:	3a10      	subs	r2, #16
 8007edc:	e7d4      	b.n	8007e88 <__gethex+0x100>
 8007ede:	4631      	mov	r1, r6
 8007ee0:	e7df      	b.n	8007ea2 <__gethex+0x11a>
 8007ee2:	1bf3      	subs	r3, r6, r7
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	2b07      	cmp	r3, #7
 8007eea:	dc0b      	bgt.n	8007f04 <__gethex+0x17c>
 8007eec:	ee18 0a10 	vmov	r0, s16
 8007ef0:	f000 fa7e 	bl	80083f0 <_Balloc>
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	b940      	cbnz	r0, 8007f0a <__gethex+0x182>
 8007ef8:	4b65      	ldr	r3, [pc, #404]	; (8008090 <__gethex+0x308>)
 8007efa:	4602      	mov	r2, r0
 8007efc:	21de      	movs	r1, #222	; 0xde
 8007efe:	4865      	ldr	r0, [pc, #404]	; (8008094 <__gethex+0x30c>)
 8007f00:	f001 f97e 	bl	8009200 <__assert_func>
 8007f04:	3101      	adds	r1, #1
 8007f06:	105b      	asrs	r3, r3, #1
 8007f08:	e7ee      	b.n	8007ee8 <__gethex+0x160>
 8007f0a:	f100 0914 	add.w	r9, r0, #20
 8007f0e:	f04f 0b00 	mov.w	fp, #0
 8007f12:	f1ca 0301 	rsb	r3, sl, #1
 8007f16:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f1a:	f8cd b000 	str.w	fp, [sp]
 8007f1e:	9306      	str	r3, [sp, #24]
 8007f20:	42b7      	cmp	r7, r6
 8007f22:	d340      	bcc.n	8007fa6 <__gethex+0x21e>
 8007f24:	9802      	ldr	r0, [sp, #8]
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	f840 3b04 	str.w	r3, [r0], #4
 8007f2c:	eba0 0009 	sub.w	r0, r0, r9
 8007f30:	1080      	asrs	r0, r0, #2
 8007f32:	0146      	lsls	r6, r0, #5
 8007f34:	6120      	str	r0, [r4, #16]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fb50 	bl	80085dc <__hi0bits>
 8007f3c:	1a30      	subs	r0, r6, r0
 8007f3e:	f8d8 6000 	ldr.w	r6, [r8]
 8007f42:	42b0      	cmp	r0, r6
 8007f44:	dd63      	ble.n	800800e <__gethex+0x286>
 8007f46:	1b87      	subs	r7, r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 feea 	bl	8008d24 <__any_on>
 8007f50:	4682      	mov	sl, r0
 8007f52:	b1a8      	cbz	r0, 8007f80 <__gethex+0x1f8>
 8007f54:	1e7b      	subs	r3, r7, #1
 8007f56:	1159      	asrs	r1, r3, #5
 8007f58:	f003 021f 	and.w	r2, r3, #31
 8007f5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f60:	f04f 0a01 	mov.w	sl, #1
 8007f64:	fa0a f202 	lsl.w	r2, sl, r2
 8007f68:	420a      	tst	r2, r1
 8007f6a:	d009      	beq.n	8007f80 <__gethex+0x1f8>
 8007f6c:	4553      	cmp	r3, sl
 8007f6e:	dd05      	ble.n	8007f7c <__gethex+0x1f4>
 8007f70:	1eb9      	subs	r1, r7, #2
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fed6 	bl	8008d24 <__any_on>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d145      	bne.n	8008008 <__gethex+0x280>
 8007f7c:	f04f 0a02 	mov.w	sl, #2
 8007f80:	4639      	mov	r1, r7
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7ff fe98 	bl	8007cb8 <rshift>
 8007f88:	443d      	add	r5, r7
 8007f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f8e:	42ab      	cmp	r3, r5
 8007f90:	da4c      	bge.n	800802c <__gethex+0x2a4>
 8007f92:	ee18 0a10 	vmov	r0, s16
 8007f96:	4621      	mov	r1, r4
 8007f98:	f000 fa6a 	bl	8008470 <_Bfree>
 8007f9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	27a3      	movs	r7, #163	; 0xa3
 8007fa4:	e785      	b.n	8007eb2 <__gethex+0x12a>
 8007fa6:	1e73      	subs	r3, r6, #1
 8007fa8:	9a05      	ldr	r2, [sp, #20]
 8007faa:	9303      	str	r3, [sp, #12]
 8007fac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d019      	beq.n	8007fe8 <__gethex+0x260>
 8007fb4:	f1bb 0f20 	cmp.w	fp, #32
 8007fb8:	d107      	bne.n	8007fca <__gethex+0x242>
 8007fba:	9b02      	ldr	r3, [sp, #8]
 8007fbc:	9a00      	ldr	r2, [sp, #0]
 8007fbe:	f843 2b04 	str.w	r2, [r3], #4
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	469b      	mov	fp, r3
 8007fca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007fce:	f7ff fec5 	bl	8007d5c <__hexdig_fun>
 8007fd2:	9b00      	ldr	r3, [sp, #0]
 8007fd4:	f000 000f 	and.w	r0, r0, #15
 8007fd8:	fa00 f00b 	lsl.w	r0, r0, fp
 8007fdc:	4303      	orrs	r3, r0
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	f10b 0b04 	add.w	fp, fp, #4
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	e00d      	b.n	8008004 <__gethex+0x27c>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	9a06      	ldr	r2, [sp, #24]
 8007fec:	4413      	add	r3, r2
 8007fee:	42bb      	cmp	r3, r7
 8007ff0:	d3e0      	bcc.n	8007fb4 <__gethex+0x22c>
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	9901      	ldr	r1, [sp, #4]
 8007ff6:	9307      	str	r3, [sp, #28]
 8007ff8:	4652      	mov	r2, sl
 8007ffa:	f001 f8e1 	bl	80091c0 <strncmp>
 8007ffe:	9b07      	ldr	r3, [sp, #28]
 8008000:	2800      	cmp	r0, #0
 8008002:	d1d7      	bne.n	8007fb4 <__gethex+0x22c>
 8008004:	461e      	mov	r6, r3
 8008006:	e78b      	b.n	8007f20 <__gethex+0x198>
 8008008:	f04f 0a03 	mov.w	sl, #3
 800800c:	e7b8      	b.n	8007f80 <__gethex+0x1f8>
 800800e:	da0a      	bge.n	8008026 <__gethex+0x29e>
 8008010:	1a37      	subs	r7, r6, r0
 8008012:	4621      	mov	r1, r4
 8008014:	ee18 0a10 	vmov	r0, s16
 8008018:	463a      	mov	r2, r7
 800801a:	f000 fc45 	bl	80088a8 <__lshift>
 800801e:	1bed      	subs	r5, r5, r7
 8008020:	4604      	mov	r4, r0
 8008022:	f100 0914 	add.w	r9, r0, #20
 8008026:	f04f 0a00 	mov.w	sl, #0
 800802a:	e7ae      	b.n	8007f8a <__gethex+0x202>
 800802c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008030:	42a8      	cmp	r0, r5
 8008032:	dd72      	ble.n	800811a <__gethex+0x392>
 8008034:	1b45      	subs	r5, r0, r5
 8008036:	42ae      	cmp	r6, r5
 8008038:	dc36      	bgt.n	80080a8 <__gethex+0x320>
 800803a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d02a      	beq.n	8008098 <__gethex+0x310>
 8008042:	2b03      	cmp	r3, #3
 8008044:	d02c      	beq.n	80080a0 <__gethex+0x318>
 8008046:	2b01      	cmp	r3, #1
 8008048:	d115      	bne.n	8008076 <__gethex+0x2ee>
 800804a:	42ae      	cmp	r6, r5
 800804c:	d113      	bne.n	8008076 <__gethex+0x2ee>
 800804e:	2e01      	cmp	r6, #1
 8008050:	d10b      	bne.n	800806a <__gethex+0x2e2>
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	2301      	movs	r3, #1
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	f8c9 3000 	str.w	r3, [r9]
 8008062:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008064:	2762      	movs	r7, #98	; 0x62
 8008066:	601c      	str	r4, [r3, #0]
 8008068:	e723      	b.n	8007eb2 <__gethex+0x12a>
 800806a:	1e71      	subs	r1, r6, #1
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fe59 	bl	8008d24 <__any_on>
 8008072:	2800      	cmp	r0, #0
 8008074:	d1ed      	bne.n	8008052 <__gethex+0x2ca>
 8008076:	ee18 0a10 	vmov	r0, s16
 800807a:	4621      	mov	r1, r4
 800807c:	f000 f9f8 	bl	8008470 <_Bfree>
 8008080:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008082:	2300      	movs	r3, #0
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	2750      	movs	r7, #80	; 0x50
 8008088:	e713      	b.n	8007eb2 <__gethex+0x12a>
 800808a:	bf00      	nop
 800808c:	0800a070 	.word	0x0800a070
 8008090:	08009ff4 	.word	0x08009ff4
 8008094:	0800a005 	.word	0x0800a005
 8008098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1eb      	bne.n	8008076 <__gethex+0x2ee>
 800809e:	e7d8      	b.n	8008052 <__gethex+0x2ca>
 80080a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1d5      	bne.n	8008052 <__gethex+0x2ca>
 80080a6:	e7e6      	b.n	8008076 <__gethex+0x2ee>
 80080a8:	1e6f      	subs	r7, r5, #1
 80080aa:	f1ba 0f00 	cmp.w	sl, #0
 80080ae:	d131      	bne.n	8008114 <__gethex+0x38c>
 80080b0:	b127      	cbz	r7, 80080bc <__gethex+0x334>
 80080b2:	4639      	mov	r1, r7
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fe35 	bl	8008d24 <__any_on>
 80080ba:	4682      	mov	sl, r0
 80080bc:	117b      	asrs	r3, r7, #5
 80080be:	2101      	movs	r1, #1
 80080c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80080c4:	f007 071f 	and.w	r7, r7, #31
 80080c8:	fa01 f707 	lsl.w	r7, r1, r7
 80080cc:	421f      	tst	r7, r3
 80080ce:	4629      	mov	r1, r5
 80080d0:	4620      	mov	r0, r4
 80080d2:	bf18      	it	ne
 80080d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80080d8:	1b76      	subs	r6, r6, r5
 80080da:	f7ff fded 	bl	8007cb8 <rshift>
 80080de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080e2:	2702      	movs	r7, #2
 80080e4:	f1ba 0f00 	cmp.w	sl, #0
 80080e8:	d048      	beq.n	800817c <__gethex+0x3f4>
 80080ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d015      	beq.n	800811e <__gethex+0x396>
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d017      	beq.n	8008126 <__gethex+0x39e>
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d109      	bne.n	800810e <__gethex+0x386>
 80080fa:	f01a 0f02 	tst.w	sl, #2
 80080fe:	d006      	beq.n	800810e <__gethex+0x386>
 8008100:	f8d9 0000 	ldr.w	r0, [r9]
 8008104:	ea4a 0a00 	orr.w	sl, sl, r0
 8008108:	f01a 0f01 	tst.w	sl, #1
 800810c:	d10e      	bne.n	800812c <__gethex+0x3a4>
 800810e:	f047 0710 	orr.w	r7, r7, #16
 8008112:	e033      	b.n	800817c <__gethex+0x3f4>
 8008114:	f04f 0a01 	mov.w	sl, #1
 8008118:	e7d0      	b.n	80080bc <__gethex+0x334>
 800811a:	2701      	movs	r7, #1
 800811c:	e7e2      	b.n	80080e4 <__gethex+0x35c>
 800811e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008120:	f1c3 0301 	rsb	r3, r3, #1
 8008124:	9315      	str	r3, [sp, #84]	; 0x54
 8008126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f0      	beq.n	800810e <__gethex+0x386>
 800812c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008130:	f104 0314 	add.w	r3, r4, #20
 8008134:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008138:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800813c:	f04f 0c00 	mov.w	ip, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f853 2b04 	ldr.w	r2, [r3], #4
 8008146:	f1b2 3fff 	cmp.w	r2, #4294967295
 800814a:	d01c      	beq.n	8008186 <__gethex+0x3fe>
 800814c:	3201      	adds	r2, #1
 800814e:	6002      	str	r2, [r0, #0]
 8008150:	2f02      	cmp	r7, #2
 8008152:	f104 0314 	add.w	r3, r4, #20
 8008156:	d13f      	bne.n	80081d8 <__gethex+0x450>
 8008158:	f8d8 2000 	ldr.w	r2, [r8]
 800815c:	3a01      	subs	r2, #1
 800815e:	42b2      	cmp	r2, r6
 8008160:	d10a      	bne.n	8008178 <__gethex+0x3f0>
 8008162:	1171      	asrs	r1, r6, #5
 8008164:	2201      	movs	r2, #1
 8008166:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800816a:	f006 061f 	and.w	r6, r6, #31
 800816e:	fa02 f606 	lsl.w	r6, r2, r6
 8008172:	421e      	tst	r6, r3
 8008174:	bf18      	it	ne
 8008176:	4617      	movne	r7, r2
 8008178:	f047 0720 	orr.w	r7, r7, #32
 800817c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800817e:	601c      	str	r4, [r3, #0]
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	601d      	str	r5, [r3, #0]
 8008184:	e695      	b.n	8007eb2 <__gethex+0x12a>
 8008186:	4299      	cmp	r1, r3
 8008188:	f843 cc04 	str.w	ip, [r3, #-4]
 800818c:	d8d8      	bhi.n	8008140 <__gethex+0x3b8>
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	459b      	cmp	fp, r3
 8008192:	db19      	blt.n	80081c8 <__gethex+0x440>
 8008194:	6861      	ldr	r1, [r4, #4]
 8008196:	ee18 0a10 	vmov	r0, s16
 800819a:	3101      	adds	r1, #1
 800819c:	f000 f928 	bl	80083f0 <_Balloc>
 80081a0:	4681      	mov	r9, r0
 80081a2:	b918      	cbnz	r0, 80081ac <__gethex+0x424>
 80081a4:	4b1a      	ldr	r3, [pc, #104]	; (8008210 <__gethex+0x488>)
 80081a6:	4602      	mov	r2, r0
 80081a8:	2184      	movs	r1, #132	; 0x84
 80081aa:	e6a8      	b.n	8007efe <__gethex+0x176>
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	3202      	adds	r2, #2
 80081b0:	f104 010c 	add.w	r1, r4, #12
 80081b4:	0092      	lsls	r2, r2, #2
 80081b6:	300c      	adds	r0, #12
 80081b8:	f000 f90c 	bl	80083d4 <memcpy>
 80081bc:	4621      	mov	r1, r4
 80081be:	ee18 0a10 	vmov	r0, s16
 80081c2:	f000 f955 	bl	8008470 <_Bfree>
 80081c6:	464c      	mov	r4, r9
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081d0:	6122      	str	r2, [r4, #16]
 80081d2:	2201      	movs	r2, #1
 80081d4:	615a      	str	r2, [r3, #20]
 80081d6:	e7bb      	b.n	8008150 <__gethex+0x3c8>
 80081d8:	6922      	ldr	r2, [r4, #16]
 80081da:	455a      	cmp	r2, fp
 80081dc:	dd0b      	ble.n	80081f6 <__gethex+0x46e>
 80081de:	2101      	movs	r1, #1
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7ff fd69 	bl	8007cb8 <rshift>
 80081e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081ea:	3501      	adds	r5, #1
 80081ec:	42ab      	cmp	r3, r5
 80081ee:	f6ff aed0 	blt.w	8007f92 <__gethex+0x20a>
 80081f2:	2701      	movs	r7, #1
 80081f4:	e7c0      	b.n	8008178 <__gethex+0x3f0>
 80081f6:	f016 061f 	ands.w	r6, r6, #31
 80081fa:	d0fa      	beq.n	80081f2 <__gethex+0x46a>
 80081fc:	449a      	add	sl, r3
 80081fe:	f1c6 0620 	rsb	r6, r6, #32
 8008202:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008206:	f000 f9e9 	bl	80085dc <__hi0bits>
 800820a:	42b0      	cmp	r0, r6
 800820c:	dbe7      	blt.n	80081de <__gethex+0x456>
 800820e:	e7f0      	b.n	80081f2 <__gethex+0x46a>
 8008210:	08009ff4 	.word	0x08009ff4

08008214 <L_shift>:
 8008214:	f1c2 0208 	rsb	r2, r2, #8
 8008218:	0092      	lsls	r2, r2, #2
 800821a:	b570      	push	{r4, r5, r6, lr}
 800821c:	f1c2 0620 	rsb	r6, r2, #32
 8008220:	6843      	ldr	r3, [r0, #4]
 8008222:	6804      	ldr	r4, [r0, #0]
 8008224:	fa03 f506 	lsl.w	r5, r3, r6
 8008228:	432c      	orrs	r4, r5
 800822a:	40d3      	lsrs	r3, r2
 800822c:	6004      	str	r4, [r0, #0]
 800822e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008232:	4288      	cmp	r0, r1
 8008234:	d3f4      	bcc.n	8008220 <L_shift+0xc>
 8008236:	bd70      	pop	{r4, r5, r6, pc}

08008238 <__match>:
 8008238:	b530      	push	{r4, r5, lr}
 800823a:	6803      	ldr	r3, [r0, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008242:	b914      	cbnz	r4, 800824a <__match+0x12>
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	2001      	movs	r0, #1
 8008248:	bd30      	pop	{r4, r5, pc}
 800824a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800824e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008252:	2d19      	cmp	r5, #25
 8008254:	bf98      	it	ls
 8008256:	3220      	addls	r2, #32
 8008258:	42a2      	cmp	r2, r4
 800825a:	d0f0      	beq.n	800823e <__match+0x6>
 800825c:	2000      	movs	r0, #0
 800825e:	e7f3      	b.n	8008248 <__match+0x10>

08008260 <__hexnan>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	680b      	ldr	r3, [r1, #0]
 8008266:	6801      	ldr	r1, [r0, #0]
 8008268:	115e      	asrs	r6, r3, #5
 800826a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800826e:	f013 031f 	ands.w	r3, r3, #31
 8008272:	b087      	sub	sp, #28
 8008274:	bf18      	it	ne
 8008276:	3604      	addne	r6, #4
 8008278:	2500      	movs	r5, #0
 800827a:	1f37      	subs	r7, r6, #4
 800827c:	4682      	mov	sl, r0
 800827e:	4690      	mov	r8, r2
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	f846 5c04 	str.w	r5, [r6, #-4]
 8008286:	46b9      	mov	r9, r7
 8008288:	463c      	mov	r4, r7
 800828a:	9502      	str	r5, [sp, #8]
 800828c:	46ab      	mov	fp, r5
 800828e:	784a      	ldrb	r2, [r1, #1]
 8008290:	1c4b      	adds	r3, r1, #1
 8008292:	9303      	str	r3, [sp, #12]
 8008294:	b342      	cbz	r2, 80082e8 <__hexnan+0x88>
 8008296:	4610      	mov	r0, r2
 8008298:	9105      	str	r1, [sp, #20]
 800829a:	9204      	str	r2, [sp, #16]
 800829c:	f7ff fd5e 	bl	8007d5c <__hexdig_fun>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d14f      	bne.n	8008344 <__hexnan+0xe4>
 80082a4:	9a04      	ldr	r2, [sp, #16]
 80082a6:	9905      	ldr	r1, [sp, #20]
 80082a8:	2a20      	cmp	r2, #32
 80082aa:	d818      	bhi.n	80082de <__hexnan+0x7e>
 80082ac:	9b02      	ldr	r3, [sp, #8]
 80082ae:	459b      	cmp	fp, r3
 80082b0:	dd13      	ble.n	80082da <__hexnan+0x7a>
 80082b2:	454c      	cmp	r4, r9
 80082b4:	d206      	bcs.n	80082c4 <__hexnan+0x64>
 80082b6:	2d07      	cmp	r5, #7
 80082b8:	dc04      	bgt.n	80082c4 <__hexnan+0x64>
 80082ba:	462a      	mov	r2, r5
 80082bc:	4649      	mov	r1, r9
 80082be:	4620      	mov	r0, r4
 80082c0:	f7ff ffa8 	bl	8008214 <L_shift>
 80082c4:	4544      	cmp	r4, r8
 80082c6:	d950      	bls.n	800836a <__hexnan+0x10a>
 80082c8:	2300      	movs	r3, #0
 80082ca:	f1a4 0904 	sub.w	r9, r4, #4
 80082ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80082d2:	f8cd b008 	str.w	fp, [sp, #8]
 80082d6:	464c      	mov	r4, r9
 80082d8:	461d      	mov	r5, r3
 80082da:	9903      	ldr	r1, [sp, #12]
 80082dc:	e7d7      	b.n	800828e <__hexnan+0x2e>
 80082de:	2a29      	cmp	r2, #41	; 0x29
 80082e0:	d156      	bne.n	8008390 <__hexnan+0x130>
 80082e2:	3102      	adds	r1, #2
 80082e4:	f8ca 1000 	str.w	r1, [sl]
 80082e8:	f1bb 0f00 	cmp.w	fp, #0
 80082ec:	d050      	beq.n	8008390 <__hexnan+0x130>
 80082ee:	454c      	cmp	r4, r9
 80082f0:	d206      	bcs.n	8008300 <__hexnan+0xa0>
 80082f2:	2d07      	cmp	r5, #7
 80082f4:	dc04      	bgt.n	8008300 <__hexnan+0xa0>
 80082f6:	462a      	mov	r2, r5
 80082f8:	4649      	mov	r1, r9
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff ff8a 	bl	8008214 <L_shift>
 8008300:	4544      	cmp	r4, r8
 8008302:	d934      	bls.n	800836e <__hexnan+0x10e>
 8008304:	f1a8 0204 	sub.w	r2, r8, #4
 8008308:	4623      	mov	r3, r4
 800830a:	f853 1b04 	ldr.w	r1, [r3], #4
 800830e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008312:	429f      	cmp	r7, r3
 8008314:	d2f9      	bcs.n	800830a <__hexnan+0xaa>
 8008316:	1b3b      	subs	r3, r7, r4
 8008318:	f023 0303 	bic.w	r3, r3, #3
 800831c:	3304      	adds	r3, #4
 800831e:	3401      	adds	r4, #1
 8008320:	3e03      	subs	r6, #3
 8008322:	42b4      	cmp	r4, r6
 8008324:	bf88      	it	hi
 8008326:	2304      	movhi	r3, #4
 8008328:	4443      	add	r3, r8
 800832a:	2200      	movs	r2, #0
 800832c:	f843 2b04 	str.w	r2, [r3], #4
 8008330:	429f      	cmp	r7, r3
 8008332:	d2fb      	bcs.n	800832c <__hexnan+0xcc>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	b91b      	cbnz	r3, 8008340 <__hexnan+0xe0>
 8008338:	4547      	cmp	r7, r8
 800833a:	d127      	bne.n	800838c <__hexnan+0x12c>
 800833c:	2301      	movs	r3, #1
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	2005      	movs	r0, #5
 8008342:	e026      	b.n	8008392 <__hexnan+0x132>
 8008344:	3501      	adds	r5, #1
 8008346:	2d08      	cmp	r5, #8
 8008348:	f10b 0b01 	add.w	fp, fp, #1
 800834c:	dd06      	ble.n	800835c <__hexnan+0xfc>
 800834e:	4544      	cmp	r4, r8
 8008350:	d9c3      	bls.n	80082da <__hexnan+0x7a>
 8008352:	2300      	movs	r3, #0
 8008354:	f844 3c04 	str.w	r3, [r4, #-4]
 8008358:	2501      	movs	r5, #1
 800835a:	3c04      	subs	r4, #4
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	f000 000f 	and.w	r0, r0, #15
 8008362:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	e7b7      	b.n	80082da <__hexnan+0x7a>
 800836a:	2508      	movs	r5, #8
 800836c:	e7b5      	b.n	80082da <__hexnan+0x7a>
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0df      	beq.n	8008334 <__hexnan+0xd4>
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	f1c3 0320 	rsb	r3, r3, #32
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
 8008380:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008384:	401a      	ands	r2, r3
 8008386:	f846 2c04 	str.w	r2, [r6, #-4]
 800838a:	e7d3      	b.n	8008334 <__hexnan+0xd4>
 800838c:	3f04      	subs	r7, #4
 800838e:	e7d1      	b.n	8008334 <__hexnan+0xd4>
 8008390:	2004      	movs	r0, #4
 8008392:	b007      	add	sp, #28
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008398 <_localeconv_r>:
 8008398:	4800      	ldr	r0, [pc, #0]	; (800839c <_localeconv_r+0x4>)
 800839a:	4770      	bx	lr
 800839c:	20000164 	.word	0x20000164

080083a0 <malloc>:
 80083a0:	4b02      	ldr	r3, [pc, #8]	; (80083ac <malloc+0xc>)
 80083a2:	4601      	mov	r1, r0
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	f000 bd3d 	b.w	8008e24 <_malloc_r>
 80083aa:	bf00      	nop
 80083ac:	2000000c 	.word	0x2000000c

080083b0 <__ascii_mbtowc>:
 80083b0:	b082      	sub	sp, #8
 80083b2:	b901      	cbnz	r1, 80083b6 <__ascii_mbtowc+0x6>
 80083b4:	a901      	add	r1, sp, #4
 80083b6:	b142      	cbz	r2, 80083ca <__ascii_mbtowc+0x1a>
 80083b8:	b14b      	cbz	r3, 80083ce <__ascii_mbtowc+0x1e>
 80083ba:	7813      	ldrb	r3, [r2, #0]
 80083bc:	600b      	str	r3, [r1, #0]
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	1e10      	subs	r0, r2, #0
 80083c2:	bf18      	it	ne
 80083c4:	2001      	movne	r0, #1
 80083c6:	b002      	add	sp, #8
 80083c8:	4770      	bx	lr
 80083ca:	4610      	mov	r0, r2
 80083cc:	e7fb      	b.n	80083c6 <__ascii_mbtowc+0x16>
 80083ce:	f06f 0001 	mvn.w	r0, #1
 80083d2:	e7f8      	b.n	80083c6 <__ascii_mbtowc+0x16>

080083d4 <memcpy>:
 80083d4:	440a      	add	r2, r1
 80083d6:	4291      	cmp	r1, r2
 80083d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083dc:	d100      	bne.n	80083e0 <memcpy+0xc>
 80083de:	4770      	bx	lr
 80083e0:	b510      	push	{r4, lr}
 80083e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ea:	4291      	cmp	r1, r2
 80083ec:	d1f9      	bne.n	80083e2 <memcpy+0xe>
 80083ee:	bd10      	pop	{r4, pc}

080083f0 <_Balloc>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083f4:	4604      	mov	r4, r0
 80083f6:	460d      	mov	r5, r1
 80083f8:	b976      	cbnz	r6, 8008418 <_Balloc+0x28>
 80083fa:	2010      	movs	r0, #16
 80083fc:	f7ff ffd0 	bl	80083a0 <malloc>
 8008400:	4602      	mov	r2, r0
 8008402:	6260      	str	r0, [r4, #36]	; 0x24
 8008404:	b920      	cbnz	r0, 8008410 <_Balloc+0x20>
 8008406:	4b18      	ldr	r3, [pc, #96]	; (8008468 <_Balloc+0x78>)
 8008408:	4818      	ldr	r0, [pc, #96]	; (800846c <_Balloc+0x7c>)
 800840a:	2166      	movs	r1, #102	; 0x66
 800840c:	f000 fef8 	bl	8009200 <__assert_func>
 8008410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008414:	6006      	str	r6, [r0, #0]
 8008416:	60c6      	str	r6, [r0, #12]
 8008418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800841a:	68f3      	ldr	r3, [r6, #12]
 800841c:	b183      	cbz	r3, 8008440 <_Balloc+0x50>
 800841e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008426:	b9b8      	cbnz	r0, 8008458 <_Balloc+0x68>
 8008428:	2101      	movs	r1, #1
 800842a:	fa01 f605 	lsl.w	r6, r1, r5
 800842e:	1d72      	adds	r2, r6, #5
 8008430:	0092      	lsls	r2, r2, #2
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fc97 	bl	8008d66 <_calloc_r>
 8008438:	b160      	cbz	r0, 8008454 <_Balloc+0x64>
 800843a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800843e:	e00e      	b.n	800845e <_Balloc+0x6e>
 8008440:	2221      	movs	r2, #33	; 0x21
 8008442:	2104      	movs	r1, #4
 8008444:	4620      	mov	r0, r4
 8008446:	f000 fc8e 	bl	8008d66 <_calloc_r>
 800844a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800844c:	60f0      	str	r0, [r6, #12]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e4      	bne.n	800841e <_Balloc+0x2e>
 8008454:	2000      	movs	r0, #0
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	6802      	ldr	r2, [r0, #0]
 800845a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800845e:	2300      	movs	r3, #0
 8008460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008464:	e7f7      	b.n	8008456 <_Balloc+0x66>
 8008466:	bf00      	nop
 8008468:	08009f7e 	.word	0x08009f7e
 800846c:	0800a084 	.word	0x0800a084

08008470 <_Bfree>:
 8008470:	b570      	push	{r4, r5, r6, lr}
 8008472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008474:	4605      	mov	r5, r0
 8008476:	460c      	mov	r4, r1
 8008478:	b976      	cbnz	r6, 8008498 <_Bfree+0x28>
 800847a:	2010      	movs	r0, #16
 800847c:	f7ff ff90 	bl	80083a0 <malloc>
 8008480:	4602      	mov	r2, r0
 8008482:	6268      	str	r0, [r5, #36]	; 0x24
 8008484:	b920      	cbnz	r0, 8008490 <_Bfree+0x20>
 8008486:	4b09      	ldr	r3, [pc, #36]	; (80084ac <_Bfree+0x3c>)
 8008488:	4809      	ldr	r0, [pc, #36]	; (80084b0 <_Bfree+0x40>)
 800848a:	218a      	movs	r1, #138	; 0x8a
 800848c:	f000 feb8 	bl	8009200 <__assert_func>
 8008490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008494:	6006      	str	r6, [r0, #0]
 8008496:	60c6      	str	r6, [r0, #12]
 8008498:	b13c      	cbz	r4, 80084aa <_Bfree+0x3a>
 800849a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800849c:	6862      	ldr	r2, [r4, #4]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084a4:	6021      	str	r1, [r4, #0]
 80084a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	08009f7e 	.word	0x08009f7e
 80084b0:	0800a084 	.word	0x0800a084

080084b4 <__multadd>:
 80084b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	690e      	ldr	r6, [r1, #16]
 80084ba:	4607      	mov	r7, r0
 80084bc:	4698      	mov	r8, r3
 80084be:	460c      	mov	r4, r1
 80084c0:	f101 0014 	add.w	r0, r1, #20
 80084c4:	2300      	movs	r3, #0
 80084c6:	6805      	ldr	r5, [r0, #0]
 80084c8:	b2a9      	uxth	r1, r5
 80084ca:	fb02 8101 	mla	r1, r2, r1, r8
 80084ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80084d2:	0c2d      	lsrs	r5, r5, #16
 80084d4:	fb02 c505 	mla	r5, r2, r5, ip
 80084d8:	b289      	uxth	r1, r1
 80084da:	3301      	adds	r3, #1
 80084dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80084e0:	429e      	cmp	r6, r3
 80084e2:	f840 1b04 	str.w	r1, [r0], #4
 80084e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80084ea:	dcec      	bgt.n	80084c6 <__multadd+0x12>
 80084ec:	f1b8 0f00 	cmp.w	r8, #0
 80084f0:	d022      	beq.n	8008538 <__multadd+0x84>
 80084f2:	68a3      	ldr	r3, [r4, #8]
 80084f4:	42b3      	cmp	r3, r6
 80084f6:	dc19      	bgt.n	800852c <__multadd+0x78>
 80084f8:	6861      	ldr	r1, [r4, #4]
 80084fa:	4638      	mov	r0, r7
 80084fc:	3101      	adds	r1, #1
 80084fe:	f7ff ff77 	bl	80083f0 <_Balloc>
 8008502:	4605      	mov	r5, r0
 8008504:	b928      	cbnz	r0, 8008512 <__multadd+0x5e>
 8008506:	4602      	mov	r2, r0
 8008508:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <__multadd+0x8c>)
 800850a:	480e      	ldr	r0, [pc, #56]	; (8008544 <__multadd+0x90>)
 800850c:	21b5      	movs	r1, #181	; 0xb5
 800850e:	f000 fe77 	bl	8009200 <__assert_func>
 8008512:	6922      	ldr	r2, [r4, #16]
 8008514:	3202      	adds	r2, #2
 8008516:	f104 010c 	add.w	r1, r4, #12
 800851a:	0092      	lsls	r2, r2, #2
 800851c:	300c      	adds	r0, #12
 800851e:	f7ff ff59 	bl	80083d4 <memcpy>
 8008522:	4621      	mov	r1, r4
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff ffa3 	bl	8008470 <_Bfree>
 800852a:	462c      	mov	r4, r5
 800852c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008530:	3601      	adds	r6, #1
 8008532:	f8c3 8014 	str.w	r8, [r3, #20]
 8008536:	6126      	str	r6, [r4, #16]
 8008538:	4620      	mov	r0, r4
 800853a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800853e:	bf00      	nop
 8008540:	08009ff4 	.word	0x08009ff4
 8008544:	0800a084 	.word	0x0800a084

08008548 <__s2b>:
 8008548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800854c:	460c      	mov	r4, r1
 800854e:	4615      	mov	r5, r2
 8008550:	461f      	mov	r7, r3
 8008552:	2209      	movs	r2, #9
 8008554:	3308      	adds	r3, #8
 8008556:	4606      	mov	r6, r0
 8008558:	fb93 f3f2 	sdiv	r3, r3, r2
 800855c:	2100      	movs	r1, #0
 800855e:	2201      	movs	r2, #1
 8008560:	429a      	cmp	r2, r3
 8008562:	db09      	blt.n	8008578 <__s2b+0x30>
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff ff43 	bl	80083f0 <_Balloc>
 800856a:	b940      	cbnz	r0, 800857e <__s2b+0x36>
 800856c:	4602      	mov	r2, r0
 800856e:	4b19      	ldr	r3, [pc, #100]	; (80085d4 <__s2b+0x8c>)
 8008570:	4819      	ldr	r0, [pc, #100]	; (80085d8 <__s2b+0x90>)
 8008572:	21ce      	movs	r1, #206	; 0xce
 8008574:	f000 fe44 	bl	8009200 <__assert_func>
 8008578:	0052      	lsls	r2, r2, #1
 800857a:	3101      	adds	r1, #1
 800857c:	e7f0      	b.n	8008560 <__s2b+0x18>
 800857e:	9b08      	ldr	r3, [sp, #32]
 8008580:	6143      	str	r3, [r0, #20]
 8008582:	2d09      	cmp	r5, #9
 8008584:	f04f 0301 	mov.w	r3, #1
 8008588:	6103      	str	r3, [r0, #16]
 800858a:	dd16      	ble.n	80085ba <__s2b+0x72>
 800858c:	f104 0909 	add.w	r9, r4, #9
 8008590:	46c8      	mov	r8, r9
 8008592:	442c      	add	r4, r5
 8008594:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008598:	4601      	mov	r1, r0
 800859a:	3b30      	subs	r3, #48	; 0x30
 800859c:	220a      	movs	r2, #10
 800859e:	4630      	mov	r0, r6
 80085a0:	f7ff ff88 	bl	80084b4 <__multadd>
 80085a4:	45a0      	cmp	r8, r4
 80085a6:	d1f5      	bne.n	8008594 <__s2b+0x4c>
 80085a8:	f1a5 0408 	sub.w	r4, r5, #8
 80085ac:	444c      	add	r4, r9
 80085ae:	1b2d      	subs	r5, r5, r4
 80085b0:	1963      	adds	r3, r4, r5
 80085b2:	42bb      	cmp	r3, r7
 80085b4:	db04      	blt.n	80085c0 <__s2b+0x78>
 80085b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ba:	340a      	adds	r4, #10
 80085bc:	2509      	movs	r5, #9
 80085be:	e7f6      	b.n	80085ae <__s2b+0x66>
 80085c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085c4:	4601      	mov	r1, r0
 80085c6:	3b30      	subs	r3, #48	; 0x30
 80085c8:	220a      	movs	r2, #10
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ff72 	bl	80084b4 <__multadd>
 80085d0:	e7ee      	b.n	80085b0 <__s2b+0x68>
 80085d2:	bf00      	nop
 80085d4:	08009ff4 	.word	0x08009ff4
 80085d8:	0800a084 	.word	0x0800a084

080085dc <__hi0bits>:
 80085dc:	0c03      	lsrs	r3, r0, #16
 80085de:	041b      	lsls	r3, r3, #16
 80085e0:	b9d3      	cbnz	r3, 8008618 <__hi0bits+0x3c>
 80085e2:	0400      	lsls	r0, r0, #16
 80085e4:	2310      	movs	r3, #16
 80085e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085ea:	bf04      	itt	eq
 80085ec:	0200      	lsleq	r0, r0, #8
 80085ee:	3308      	addeq	r3, #8
 80085f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085f4:	bf04      	itt	eq
 80085f6:	0100      	lsleq	r0, r0, #4
 80085f8:	3304      	addeq	r3, #4
 80085fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085fe:	bf04      	itt	eq
 8008600:	0080      	lsleq	r0, r0, #2
 8008602:	3302      	addeq	r3, #2
 8008604:	2800      	cmp	r0, #0
 8008606:	db05      	blt.n	8008614 <__hi0bits+0x38>
 8008608:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800860c:	f103 0301 	add.w	r3, r3, #1
 8008610:	bf08      	it	eq
 8008612:	2320      	moveq	r3, #32
 8008614:	4618      	mov	r0, r3
 8008616:	4770      	bx	lr
 8008618:	2300      	movs	r3, #0
 800861a:	e7e4      	b.n	80085e6 <__hi0bits+0xa>

0800861c <__lo0bits>:
 800861c:	6803      	ldr	r3, [r0, #0]
 800861e:	f013 0207 	ands.w	r2, r3, #7
 8008622:	4601      	mov	r1, r0
 8008624:	d00b      	beq.n	800863e <__lo0bits+0x22>
 8008626:	07da      	lsls	r2, r3, #31
 8008628:	d424      	bmi.n	8008674 <__lo0bits+0x58>
 800862a:	0798      	lsls	r0, r3, #30
 800862c:	bf49      	itett	mi
 800862e:	085b      	lsrmi	r3, r3, #1
 8008630:	089b      	lsrpl	r3, r3, #2
 8008632:	2001      	movmi	r0, #1
 8008634:	600b      	strmi	r3, [r1, #0]
 8008636:	bf5c      	itt	pl
 8008638:	600b      	strpl	r3, [r1, #0]
 800863a:	2002      	movpl	r0, #2
 800863c:	4770      	bx	lr
 800863e:	b298      	uxth	r0, r3
 8008640:	b9b0      	cbnz	r0, 8008670 <__lo0bits+0x54>
 8008642:	0c1b      	lsrs	r3, r3, #16
 8008644:	2010      	movs	r0, #16
 8008646:	f013 0fff 	tst.w	r3, #255	; 0xff
 800864a:	bf04      	itt	eq
 800864c:	0a1b      	lsreq	r3, r3, #8
 800864e:	3008      	addeq	r0, #8
 8008650:	071a      	lsls	r2, r3, #28
 8008652:	bf04      	itt	eq
 8008654:	091b      	lsreq	r3, r3, #4
 8008656:	3004      	addeq	r0, #4
 8008658:	079a      	lsls	r2, r3, #30
 800865a:	bf04      	itt	eq
 800865c:	089b      	lsreq	r3, r3, #2
 800865e:	3002      	addeq	r0, #2
 8008660:	07da      	lsls	r2, r3, #31
 8008662:	d403      	bmi.n	800866c <__lo0bits+0x50>
 8008664:	085b      	lsrs	r3, r3, #1
 8008666:	f100 0001 	add.w	r0, r0, #1
 800866a:	d005      	beq.n	8008678 <__lo0bits+0x5c>
 800866c:	600b      	str	r3, [r1, #0]
 800866e:	4770      	bx	lr
 8008670:	4610      	mov	r0, r2
 8008672:	e7e8      	b.n	8008646 <__lo0bits+0x2a>
 8008674:	2000      	movs	r0, #0
 8008676:	4770      	bx	lr
 8008678:	2020      	movs	r0, #32
 800867a:	4770      	bx	lr

0800867c <__i2b>:
 800867c:	b510      	push	{r4, lr}
 800867e:	460c      	mov	r4, r1
 8008680:	2101      	movs	r1, #1
 8008682:	f7ff feb5 	bl	80083f0 <_Balloc>
 8008686:	4602      	mov	r2, r0
 8008688:	b928      	cbnz	r0, 8008696 <__i2b+0x1a>
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <__i2b+0x24>)
 800868c:	4805      	ldr	r0, [pc, #20]	; (80086a4 <__i2b+0x28>)
 800868e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008692:	f000 fdb5 	bl	8009200 <__assert_func>
 8008696:	2301      	movs	r3, #1
 8008698:	6144      	str	r4, [r0, #20]
 800869a:	6103      	str	r3, [r0, #16]
 800869c:	bd10      	pop	{r4, pc}
 800869e:	bf00      	nop
 80086a0:	08009ff4 	.word	0x08009ff4
 80086a4:	0800a084 	.word	0x0800a084

080086a8 <__multiply>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	4614      	mov	r4, r2
 80086ae:	690a      	ldr	r2, [r1, #16]
 80086b0:	6923      	ldr	r3, [r4, #16]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	bfb8      	it	lt
 80086b6:	460b      	movlt	r3, r1
 80086b8:	460d      	mov	r5, r1
 80086ba:	bfbc      	itt	lt
 80086bc:	4625      	movlt	r5, r4
 80086be:	461c      	movlt	r4, r3
 80086c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80086c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80086c8:	68ab      	ldr	r3, [r5, #8]
 80086ca:	6869      	ldr	r1, [r5, #4]
 80086cc:	eb0a 0709 	add.w	r7, sl, r9
 80086d0:	42bb      	cmp	r3, r7
 80086d2:	b085      	sub	sp, #20
 80086d4:	bfb8      	it	lt
 80086d6:	3101      	addlt	r1, #1
 80086d8:	f7ff fe8a 	bl	80083f0 <_Balloc>
 80086dc:	b930      	cbnz	r0, 80086ec <__multiply+0x44>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b42      	ldr	r3, [pc, #264]	; (80087ec <__multiply+0x144>)
 80086e2:	4843      	ldr	r0, [pc, #268]	; (80087f0 <__multiply+0x148>)
 80086e4:	f240 115d 	movw	r1, #349	; 0x15d
 80086e8:	f000 fd8a 	bl	8009200 <__assert_func>
 80086ec:	f100 0614 	add.w	r6, r0, #20
 80086f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80086f4:	4633      	mov	r3, r6
 80086f6:	2200      	movs	r2, #0
 80086f8:	4543      	cmp	r3, r8
 80086fa:	d31e      	bcc.n	800873a <__multiply+0x92>
 80086fc:	f105 0c14 	add.w	ip, r5, #20
 8008700:	f104 0314 	add.w	r3, r4, #20
 8008704:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008708:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800870c:	9202      	str	r2, [sp, #8]
 800870e:	ebac 0205 	sub.w	r2, ip, r5
 8008712:	3a15      	subs	r2, #21
 8008714:	f022 0203 	bic.w	r2, r2, #3
 8008718:	3204      	adds	r2, #4
 800871a:	f105 0115 	add.w	r1, r5, #21
 800871e:	458c      	cmp	ip, r1
 8008720:	bf38      	it	cc
 8008722:	2204      	movcc	r2, #4
 8008724:	9201      	str	r2, [sp, #4]
 8008726:	9a02      	ldr	r2, [sp, #8]
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	429a      	cmp	r2, r3
 800872c:	d808      	bhi.n	8008740 <__multiply+0x98>
 800872e:	2f00      	cmp	r7, #0
 8008730:	dc55      	bgt.n	80087de <__multiply+0x136>
 8008732:	6107      	str	r7, [r0, #16]
 8008734:	b005      	add	sp, #20
 8008736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873a:	f843 2b04 	str.w	r2, [r3], #4
 800873e:	e7db      	b.n	80086f8 <__multiply+0x50>
 8008740:	f8b3 a000 	ldrh.w	sl, [r3]
 8008744:	f1ba 0f00 	cmp.w	sl, #0
 8008748:	d020      	beq.n	800878c <__multiply+0xe4>
 800874a:	f105 0e14 	add.w	lr, r5, #20
 800874e:	46b1      	mov	r9, r6
 8008750:	2200      	movs	r2, #0
 8008752:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008756:	f8d9 b000 	ldr.w	fp, [r9]
 800875a:	b2a1      	uxth	r1, r4
 800875c:	fa1f fb8b 	uxth.w	fp, fp
 8008760:	fb0a b101 	mla	r1, sl, r1, fp
 8008764:	4411      	add	r1, r2
 8008766:	f8d9 2000 	ldr.w	r2, [r9]
 800876a:	0c24      	lsrs	r4, r4, #16
 800876c:	0c12      	lsrs	r2, r2, #16
 800876e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008772:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008776:	b289      	uxth	r1, r1
 8008778:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800877c:	45f4      	cmp	ip, lr
 800877e:	f849 1b04 	str.w	r1, [r9], #4
 8008782:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008786:	d8e4      	bhi.n	8008752 <__multiply+0xaa>
 8008788:	9901      	ldr	r1, [sp, #4]
 800878a:	5072      	str	r2, [r6, r1]
 800878c:	9a03      	ldr	r2, [sp, #12]
 800878e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008792:	3304      	adds	r3, #4
 8008794:	f1b9 0f00 	cmp.w	r9, #0
 8008798:	d01f      	beq.n	80087da <__multiply+0x132>
 800879a:	6834      	ldr	r4, [r6, #0]
 800879c:	f105 0114 	add.w	r1, r5, #20
 80087a0:	46b6      	mov	lr, r6
 80087a2:	f04f 0a00 	mov.w	sl, #0
 80087a6:	880a      	ldrh	r2, [r1, #0]
 80087a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80087ac:	fb09 b202 	mla	r2, r9, r2, fp
 80087b0:	4492      	add	sl, r2
 80087b2:	b2a4      	uxth	r4, r4
 80087b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80087b8:	f84e 4b04 	str.w	r4, [lr], #4
 80087bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80087c0:	f8be 2000 	ldrh.w	r2, [lr]
 80087c4:	0c24      	lsrs	r4, r4, #16
 80087c6:	fb09 2404 	mla	r4, r9, r4, r2
 80087ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80087ce:	458c      	cmp	ip, r1
 80087d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80087d4:	d8e7      	bhi.n	80087a6 <__multiply+0xfe>
 80087d6:	9a01      	ldr	r2, [sp, #4]
 80087d8:	50b4      	str	r4, [r6, r2]
 80087da:	3604      	adds	r6, #4
 80087dc:	e7a3      	b.n	8008726 <__multiply+0x7e>
 80087de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1a5      	bne.n	8008732 <__multiply+0x8a>
 80087e6:	3f01      	subs	r7, #1
 80087e8:	e7a1      	b.n	800872e <__multiply+0x86>
 80087ea:	bf00      	nop
 80087ec:	08009ff4 	.word	0x08009ff4
 80087f0:	0800a084 	.word	0x0800a084

080087f4 <__pow5mult>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	4615      	mov	r5, r2
 80087fa:	f012 0203 	ands.w	r2, r2, #3
 80087fe:	4606      	mov	r6, r0
 8008800:	460f      	mov	r7, r1
 8008802:	d007      	beq.n	8008814 <__pow5mult+0x20>
 8008804:	4c25      	ldr	r4, [pc, #148]	; (800889c <__pow5mult+0xa8>)
 8008806:	3a01      	subs	r2, #1
 8008808:	2300      	movs	r3, #0
 800880a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800880e:	f7ff fe51 	bl	80084b4 <__multadd>
 8008812:	4607      	mov	r7, r0
 8008814:	10ad      	asrs	r5, r5, #2
 8008816:	d03d      	beq.n	8008894 <__pow5mult+0xa0>
 8008818:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800881a:	b97c      	cbnz	r4, 800883c <__pow5mult+0x48>
 800881c:	2010      	movs	r0, #16
 800881e:	f7ff fdbf 	bl	80083a0 <malloc>
 8008822:	4602      	mov	r2, r0
 8008824:	6270      	str	r0, [r6, #36]	; 0x24
 8008826:	b928      	cbnz	r0, 8008834 <__pow5mult+0x40>
 8008828:	4b1d      	ldr	r3, [pc, #116]	; (80088a0 <__pow5mult+0xac>)
 800882a:	481e      	ldr	r0, [pc, #120]	; (80088a4 <__pow5mult+0xb0>)
 800882c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008830:	f000 fce6 	bl	8009200 <__assert_func>
 8008834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008838:	6004      	str	r4, [r0, #0]
 800883a:	60c4      	str	r4, [r0, #12]
 800883c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008844:	b94c      	cbnz	r4, 800885a <__pow5mult+0x66>
 8008846:	f240 2171 	movw	r1, #625	; 0x271
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff ff16 	bl	800867c <__i2b>
 8008850:	2300      	movs	r3, #0
 8008852:	f8c8 0008 	str.w	r0, [r8, #8]
 8008856:	4604      	mov	r4, r0
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	f04f 0900 	mov.w	r9, #0
 800885e:	07eb      	lsls	r3, r5, #31
 8008860:	d50a      	bpl.n	8008878 <__pow5mult+0x84>
 8008862:	4639      	mov	r1, r7
 8008864:	4622      	mov	r2, r4
 8008866:	4630      	mov	r0, r6
 8008868:	f7ff ff1e 	bl	80086a8 <__multiply>
 800886c:	4639      	mov	r1, r7
 800886e:	4680      	mov	r8, r0
 8008870:	4630      	mov	r0, r6
 8008872:	f7ff fdfd 	bl	8008470 <_Bfree>
 8008876:	4647      	mov	r7, r8
 8008878:	106d      	asrs	r5, r5, #1
 800887a:	d00b      	beq.n	8008894 <__pow5mult+0xa0>
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	b938      	cbnz	r0, 8008890 <__pow5mult+0x9c>
 8008880:	4622      	mov	r2, r4
 8008882:	4621      	mov	r1, r4
 8008884:	4630      	mov	r0, r6
 8008886:	f7ff ff0f 	bl	80086a8 <__multiply>
 800888a:	6020      	str	r0, [r4, #0]
 800888c:	f8c0 9000 	str.w	r9, [r0]
 8008890:	4604      	mov	r4, r0
 8008892:	e7e4      	b.n	800885e <__pow5mult+0x6a>
 8008894:	4638      	mov	r0, r7
 8008896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800889a:	bf00      	nop
 800889c:	0800a1d8 	.word	0x0800a1d8
 80088a0:	08009f7e 	.word	0x08009f7e
 80088a4:	0800a084 	.word	0x0800a084

080088a8 <__lshift>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	6849      	ldr	r1, [r1, #4]
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	4607      	mov	r7, r0
 80088ba:	4691      	mov	r9, r2
 80088bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088c0:	f108 0601 	add.w	r6, r8, #1
 80088c4:	42b3      	cmp	r3, r6
 80088c6:	db0b      	blt.n	80088e0 <__lshift+0x38>
 80088c8:	4638      	mov	r0, r7
 80088ca:	f7ff fd91 	bl	80083f0 <_Balloc>
 80088ce:	4605      	mov	r5, r0
 80088d0:	b948      	cbnz	r0, 80088e6 <__lshift+0x3e>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b28      	ldr	r3, [pc, #160]	; (8008978 <__lshift+0xd0>)
 80088d6:	4829      	ldr	r0, [pc, #164]	; (800897c <__lshift+0xd4>)
 80088d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088dc:	f000 fc90 	bl	8009200 <__assert_func>
 80088e0:	3101      	adds	r1, #1
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	e7ee      	b.n	80088c4 <__lshift+0x1c>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f100 0114 	add.w	r1, r0, #20
 80088ec:	f100 0210 	add.w	r2, r0, #16
 80088f0:	4618      	mov	r0, r3
 80088f2:	4553      	cmp	r3, sl
 80088f4:	db33      	blt.n	800895e <__lshift+0xb6>
 80088f6:	6920      	ldr	r0, [r4, #16]
 80088f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088fc:	f104 0314 	add.w	r3, r4, #20
 8008900:	f019 091f 	ands.w	r9, r9, #31
 8008904:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008908:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800890c:	d02b      	beq.n	8008966 <__lshift+0xbe>
 800890e:	f1c9 0e20 	rsb	lr, r9, #32
 8008912:	468a      	mov	sl, r1
 8008914:	2200      	movs	r2, #0
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	fa00 f009 	lsl.w	r0, r0, r9
 800891c:	4302      	orrs	r2, r0
 800891e:	f84a 2b04 	str.w	r2, [sl], #4
 8008922:	f853 2b04 	ldr.w	r2, [r3], #4
 8008926:	459c      	cmp	ip, r3
 8008928:	fa22 f20e 	lsr.w	r2, r2, lr
 800892c:	d8f3      	bhi.n	8008916 <__lshift+0x6e>
 800892e:	ebac 0304 	sub.w	r3, ip, r4
 8008932:	3b15      	subs	r3, #21
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	3304      	adds	r3, #4
 800893a:	f104 0015 	add.w	r0, r4, #21
 800893e:	4584      	cmp	ip, r0
 8008940:	bf38      	it	cc
 8008942:	2304      	movcc	r3, #4
 8008944:	50ca      	str	r2, [r1, r3]
 8008946:	b10a      	cbz	r2, 800894c <__lshift+0xa4>
 8008948:	f108 0602 	add.w	r6, r8, #2
 800894c:	3e01      	subs	r6, #1
 800894e:	4638      	mov	r0, r7
 8008950:	612e      	str	r6, [r5, #16]
 8008952:	4621      	mov	r1, r4
 8008954:	f7ff fd8c 	bl	8008470 <_Bfree>
 8008958:	4628      	mov	r0, r5
 800895a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008962:	3301      	adds	r3, #1
 8008964:	e7c5      	b.n	80088f2 <__lshift+0x4a>
 8008966:	3904      	subs	r1, #4
 8008968:	f853 2b04 	ldr.w	r2, [r3], #4
 800896c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008970:	459c      	cmp	ip, r3
 8008972:	d8f9      	bhi.n	8008968 <__lshift+0xc0>
 8008974:	e7ea      	b.n	800894c <__lshift+0xa4>
 8008976:	bf00      	nop
 8008978:	08009ff4 	.word	0x08009ff4
 800897c:	0800a084 	.word	0x0800a084

08008980 <__mcmp>:
 8008980:	b530      	push	{r4, r5, lr}
 8008982:	6902      	ldr	r2, [r0, #16]
 8008984:	690c      	ldr	r4, [r1, #16]
 8008986:	1b12      	subs	r2, r2, r4
 8008988:	d10e      	bne.n	80089a8 <__mcmp+0x28>
 800898a:	f100 0314 	add.w	r3, r0, #20
 800898e:	3114      	adds	r1, #20
 8008990:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008994:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008998:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800899c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089a0:	42a5      	cmp	r5, r4
 80089a2:	d003      	beq.n	80089ac <__mcmp+0x2c>
 80089a4:	d305      	bcc.n	80089b2 <__mcmp+0x32>
 80089a6:	2201      	movs	r2, #1
 80089a8:	4610      	mov	r0, r2
 80089aa:	bd30      	pop	{r4, r5, pc}
 80089ac:	4283      	cmp	r3, r0
 80089ae:	d3f3      	bcc.n	8008998 <__mcmp+0x18>
 80089b0:	e7fa      	b.n	80089a8 <__mcmp+0x28>
 80089b2:	f04f 32ff 	mov.w	r2, #4294967295
 80089b6:	e7f7      	b.n	80089a8 <__mcmp+0x28>

080089b8 <__mdiff>:
 80089b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	460c      	mov	r4, r1
 80089be:	4606      	mov	r6, r0
 80089c0:	4611      	mov	r1, r2
 80089c2:	4620      	mov	r0, r4
 80089c4:	4617      	mov	r7, r2
 80089c6:	f7ff ffdb 	bl	8008980 <__mcmp>
 80089ca:	1e05      	subs	r5, r0, #0
 80089cc:	d110      	bne.n	80089f0 <__mdiff+0x38>
 80089ce:	4629      	mov	r1, r5
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff fd0d 	bl	80083f0 <_Balloc>
 80089d6:	b930      	cbnz	r0, 80089e6 <__mdiff+0x2e>
 80089d8:	4b39      	ldr	r3, [pc, #228]	; (8008ac0 <__mdiff+0x108>)
 80089da:	4602      	mov	r2, r0
 80089dc:	f240 2132 	movw	r1, #562	; 0x232
 80089e0:	4838      	ldr	r0, [pc, #224]	; (8008ac4 <__mdiff+0x10c>)
 80089e2:	f000 fc0d 	bl	8009200 <__assert_func>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	bfa4      	itt	ge
 80089f2:	463b      	movge	r3, r7
 80089f4:	4627      	movge	r7, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	bfa6      	itte	ge
 80089fc:	461c      	movge	r4, r3
 80089fe:	2500      	movge	r5, #0
 8008a00:	2501      	movlt	r5, #1
 8008a02:	f7ff fcf5 	bl	80083f0 <_Balloc>
 8008a06:	b920      	cbnz	r0, 8008a12 <__mdiff+0x5a>
 8008a08:	4b2d      	ldr	r3, [pc, #180]	; (8008ac0 <__mdiff+0x108>)
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a10:	e7e6      	b.n	80089e0 <__mdiff+0x28>
 8008a12:	693e      	ldr	r6, [r7, #16]
 8008a14:	60c5      	str	r5, [r0, #12]
 8008a16:	6925      	ldr	r5, [r4, #16]
 8008a18:	f107 0114 	add.w	r1, r7, #20
 8008a1c:	f104 0914 	add.w	r9, r4, #20
 8008a20:	f100 0e14 	add.w	lr, r0, #20
 8008a24:	f107 0210 	add.w	r2, r7, #16
 8008a28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008a2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008a30:	46f2      	mov	sl, lr
 8008a32:	2700      	movs	r7, #0
 8008a34:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a3c:	fa1f f883 	uxth.w	r8, r3
 8008a40:	fa17 f78b 	uxtah	r7, r7, fp
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	eba7 0808 	sub.w	r8, r7, r8
 8008a4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a52:	fa1f f888 	uxth.w	r8, r8
 8008a56:	141f      	asrs	r7, r3, #16
 8008a58:	454d      	cmp	r5, r9
 8008a5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a5e:	f84a 3b04 	str.w	r3, [sl], #4
 8008a62:	d8e7      	bhi.n	8008a34 <__mdiff+0x7c>
 8008a64:	1b2b      	subs	r3, r5, r4
 8008a66:	3b15      	subs	r3, #21
 8008a68:	f023 0303 	bic.w	r3, r3, #3
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	3415      	adds	r4, #21
 8008a70:	42a5      	cmp	r5, r4
 8008a72:	bf38      	it	cc
 8008a74:	2304      	movcc	r3, #4
 8008a76:	4419      	add	r1, r3
 8008a78:	4473      	add	r3, lr
 8008a7a:	469e      	mov	lr, r3
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	4565      	cmp	r5, ip
 8008a80:	d30e      	bcc.n	8008aa0 <__mdiff+0xe8>
 8008a82:	f10c 0203 	add.w	r2, ip, #3
 8008a86:	1a52      	subs	r2, r2, r1
 8008a88:	f022 0203 	bic.w	r2, r2, #3
 8008a8c:	3903      	subs	r1, #3
 8008a8e:	458c      	cmp	ip, r1
 8008a90:	bf38      	it	cc
 8008a92:	2200      	movcc	r2, #0
 8008a94:	441a      	add	r2, r3
 8008a96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a9a:	b17b      	cbz	r3, 8008abc <__mdiff+0x104>
 8008a9c:	6106      	str	r6, [r0, #16]
 8008a9e:	e7a5      	b.n	80089ec <__mdiff+0x34>
 8008aa0:	f855 8b04 	ldr.w	r8, [r5], #4
 8008aa4:	fa17 f488 	uxtah	r4, r7, r8
 8008aa8:	1422      	asrs	r2, r4, #16
 8008aaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008aae:	b2a4      	uxth	r4, r4
 8008ab0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008ab4:	f84e 4b04 	str.w	r4, [lr], #4
 8008ab8:	1417      	asrs	r7, r2, #16
 8008aba:	e7e0      	b.n	8008a7e <__mdiff+0xc6>
 8008abc:	3e01      	subs	r6, #1
 8008abe:	e7ea      	b.n	8008a96 <__mdiff+0xde>
 8008ac0:	08009ff4 	.word	0x08009ff4
 8008ac4:	0800a084 	.word	0x0800a084

08008ac8 <__ulp>:
 8008ac8:	b082      	sub	sp, #8
 8008aca:	ed8d 0b00 	vstr	d0, [sp]
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	4912      	ldr	r1, [pc, #72]	; (8008b1c <__ulp+0x54>)
 8008ad2:	4019      	ands	r1, r3
 8008ad4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	dd05      	ble.n	8008ae8 <__ulp+0x20>
 8008adc:	2200      	movs	r2, #0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	ec43 2b10 	vmov	d0, r2, r3
 8008ae4:	b002      	add	sp, #8
 8008ae6:	4770      	bx	lr
 8008ae8:	4249      	negs	r1, r1
 8008aea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008aee:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	da04      	bge.n	8008b06 <__ulp+0x3e>
 8008afc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b00:	fa41 f300 	asr.w	r3, r1, r0
 8008b04:	e7ec      	b.n	8008ae0 <__ulp+0x18>
 8008b06:	f1a0 0114 	sub.w	r1, r0, #20
 8008b0a:	291e      	cmp	r1, #30
 8008b0c:	bfda      	itte	le
 8008b0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008b12:	fa20 f101 	lsrle.w	r1, r0, r1
 8008b16:	2101      	movgt	r1, #1
 8008b18:	460a      	mov	r2, r1
 8008b1a:	e7e1      	b.n	8008ae0 <__ulp+0x18>
 8008b1c:	7ff00000 	.word	0x7ff00000

08008b20 <__b2d>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	6905      	ldr	r5, [r0, #16]
 8008b24:	f100 0714 	add.w	r7, r0, #20
 8008b28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b2c:	1f2e      	subs	r6, r5, #4
 8008b2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b32:	4620      	mov	r0, r4
 8008b34:	f7ff fd52 	bl	80085dc <__hi0bits>
 8008b38:	f1c0 0320 	rsb	r3, r0, #32
 8008b3c:	280a      	cmp	r0, #10
 8008b3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008bbc <__b2d+0x9c>
 8008b42:	600b      	str	r3, [r1, #0]
 8008b44:	dc14      	bgt.n	8008b70 <__b2d+0x50>
 8008b46:	f1c0 0e0b 	rsb	lr, r0, #11
 8008b4a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008b4e:	42b7      	cmp	r7, r6
 8008b50:	ea41 030c 	orr.w	r3, r1, ip
 8008b54:	bf34      	ite	cc
 8008b56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b5a:	2100      	movcs	r1, #0
 8008b5c:	3015      	adds	r0, #21
 8008b5e:	fa04 f000 	lsl.w	r0, r4, r0
 8008b62:	fa21 f10e 	lsr.w	r1, r1, lr
 8008b66:	ea40 0201 	orr.w	r2, r0, r1
 8008b6a:	ec43 2b10 	vmov	d0, r2, r3
 8008b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b70:	42b7      	cmp	r7, r6
 8008b72:	bf3a      	itte	cc
 8008b74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b78:	f1a5 0608 	subcc.w	r6, r5, #8
 8008b7c:	2100      	movcs	r1, #0
 8008b7e:	380b      	subs	r0, #11
 8008b80:	d017      	beq.n	8008bb2 <__b2d+0x92>
 8008b82:	f1c0 0c20 	rsb	ip, r0, #32
 8008b86:	fa04 f500 	lsl.w	r5, r4, r0
 8008b8a:	42be      	cmp	r6, r7
 8008b8c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008b90:	ea45 0504 	orr.w	r5, r5, r4
 8008b94:	bf8c      	ite	hi
 8008b96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008b9a:	2400      	movls	r4, #0
 8008b9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008ba0:	fa01 f000 	lsl.w	r0, r1, r0
 8008ba4:	fa24 f40c 	lsr.w	r4, r4, ip
 8008ba8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008bac:	ea40 0204 	orr.w	r2, r0, r4
 8008bb0:	e7db      	b.n	8008b6a <__b2d+0x4a>
 8008bb2:	ea44 030c 	orr.w	r3, r4, ip
 8008bb6:	460a      	mov	r2, r1
 8008bb8:	e7d7      	b.n	8008b6a <__b2d+0x4a>
 8008bba:	bf00      	nop
 8008bbc:	3ff00000 	.word	0x3ff00000

08008bc0 <__d2b>:
 8008bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	ec57 6b10 	vmov	r6, r7, d0
 8008bcc:	4690      	mov	r8, r2
 8008bce:	f7ff fc0f 	bl	80083f0 <_Balloc>
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	b930      	cbnz	r0, 8008be4 <__d2b+0x24>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	4b25      	ldr	r3, [pc, #148]	; (8008c70 <__d2b+0xb0>)
 8008bda:	4826      	ldr	r0, [pc, #152]	; (8008c74 <__d2b+0xb4>)
 8008bdc:	f240 310a 	movw	r1, #778	; 0x30a
 8008be0:	f000 fb0e 	bl	8009200 <__assert_func>
 8008be4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bec:	bb35      	cbnz	r5, 8008c3c <__d2b+0x7c>
 8008bee:	2e00      	cmp	r6, #0
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	d028      	beq.n	8008c46 <__d2b+0x86>
 8008bf4:	4668      	mov	r0, sp
 8008bf6:	9600      	str	r6, [sp, #0]
 8008bf8:	f7ff fd10 	bl	800861c <__lo0bits>
 8008bfc:	9900      	ldr	r1, [sp, #0]
 8008bfe:	b300      	cbz	r0, 8008c42 <__d2b+0x82>
 8008c00:	9a01      	ldr	r2, [sp, #4]
 8008c02:	f1c0 0320 	rsb	r3, r0, #32
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	40c2      	lsrs	r2, r0
 8008c0e:	6163      	str	r3, [r4, #20]
 8008c10:	9201      	str	r2, [sp, #4]
 8008c12:	9b01      	ldr	r3, [sp, #4]
 8008c14:	61a3      	str	r3, [r4, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	bf14      	ite	ne
 8008c1a:	2202      	movne	r2, #2
 8008c1c:	2201      	moveq	r2, #1
 8008c1e:	6122      	str	r2, [r4, #16]
 8008c20:	b1d5      	cbz	r5, 8008c58 <__d2b+0x98>
 8008c22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c26:	4405      	add	r5, r0
 8008c28:	f8c9 5000 	str.w	r5, [r9]
 8008c2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c30:	f8c8 0000 	str.w	r0, [r8]
 8008c34:	4620      	mov	r0, r4
 8008c36:	b003      	add	sp, #12
 8008c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c40:	e7d5      	b.n	8008bee <__d2b+0x2e>
 8008c42:	6161      	str	r1, [r4, #20]
 8008c44:	e7e5      	b.n	8008c12 <__d2b+0x52>
 8008c46:	a801      	add	r0, sp, #4
 8008c48:	f7ff fce8 	bl	800861c <__lo0bits>
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	6163      	str	r3, [r4, #20]
 8008c50:	2201      	movs	r2, #1
 8008c52:	6122      	str	r2, [r4, #16]
 8008c54:	3020      	adds	r0, #32
 8008c56:	e7e3      	b.n	8008c20 <__d2b+0x60>
 8008c58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c60:	f8c9 0000 	str.w	r0, [r9]
 8008c64:	6918      	ldr	r0, [r3, #16]
 8008c66:	f7ff fcb9 	bl	80085dc <__hi0bits>
 8008c6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c6e:	e7df      	b.n	8008c30 <__d2b+0x70>
 8008c70:	08009ff4 	.word	0x08009ff4
 8008c74:	0800a084 	.word	0x0800a084

08008c78 <__ratio>:
 8008c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	4688      	mov	r8, r1
 8008c7e:	4669      	mov	r1, sp
 8008c80:	4681      	mov	r9, r0
 8008c82:	f7ff ff4d 	bl	8008b20 <__b2d>
 8008c86:	a901      	add	r1, sp, #4
 8008c88:	4640      	mov	r0, r8
 8008c8a:	ec55 4b10 	vmov	r4, r5, d0
 8008c8e:	f7ff ff47 	bl	8008b20 <__b2d>
 8008c92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008c9a:	eba3 0c02 	sub.w	ip, r3, r2
 8008c9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ca2:	1a9b      	subs	r3, r3, r2
 8008ca4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ca8:	ec51 0b10 	vmov	r0, r1, d0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bfd6      	itet	le
 8008cb0:	460a      	movle	r2, r1
 8008cb2:	462a      	movgt	r2, r5
 8008cb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cb8:	468b      	mov	fp, r1
 8008cba:	462f      	mov	r7, r5
 8008cbc:	bfd4      	ite	le
 8008cbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008cc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	ee10 2a10 	vmov	r2, s0
 8008ccc:	465b      	mov	r3, fp
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7f7 fdbc 	bl	800084c <__aeabi_ddiv>
 8008cd4:	ec41 0b10 	vmov	d0, r0, r1
 8008cd8:	b003      	add	sp, #12
 8008cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008cde <__copybits>:
 8008cde:	3901      	subs	r1, #1
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	1149      	asrs	r1, r1, #5
 8008ce4:	6914      	ldr	r4, [r2, #16]
 8008ce6:	3101      	adds	r1, #1
 8008ce8:	f102 0314 	add.w	r3, r2, #20
 8008cec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008cf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008cf4:	1f05      	subs	r5, r0, #4
 8008cf6:	42a3      	cmp	r3, r4
 8008cf8:	d30c      	bcc.n	8008d14 <__copybits+0x36>
 8008cfa:	1aa3      	subs	r3, r4, r2
 8008cfc:	3b11      	subs	r3, #17
 8008cfe:	f023 0303 	bic.w	r3, r3, #3
 8008d02:	3211      	adds	r2, #17
 8008d04:	42a2      	cmp	r2, r4
 8008d06:	bf88      	it	hi
 8008d08:	2300      	movhi	r3, #0
 8008d0a:	4418      	add	r0, r3
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4288      	cmp	r0, r1
 8008d10:	d305      	bcc.n	8008d1e <__copybits+0x40>
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d18:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d1c:	e7eb      	b.n	8008cf6 <__copybits+0x18>
 8008d1e:	f840 3b04 	str.w	r3, [r0], #4
 8008d22:	e7f4      	b.n	8008d0e <__copybits+0x30>

08008d24 <__any_on>:
 8008d24:	f100 0214 	add.w	r2, r0, #20
 8008d28:	6900      	ldr	r0, [r0, #16]
 8008d2a:	114b      	asrs	r3, r1, #5
 8008d2c:	4298      	cmp	r0, r3
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	db11      	blt.n	8008d56 <__any_on+0x32>
 8008d32:	dd0a      	ble.n	8008d4a <__any_on+0x26>
 8008d34:	f011 011f 	ands.w	r1, r1, #31
 8008d38:	d007      	beq.n	8008d4a <__any_on+0x26>
 8008d3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d3e:	fa24 f001 	lsr.w	r0, r4, r1
 8008d42:	fa00 f101 	lsl.w	r1, r0, r1
 8008d46:	428c      	cmp	r4, r1
 8008d48:	d10b      	bne.n	8008d62 <__any_on+0x3e>
 8008d4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d803      	bhi.n	8008d5a <__any_on+0x36>
 8008d52:	2000      	movs	r0, #0
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	4603      	mov	r3, r0
 8008d58:	e7f7      	b.n	8008d4a <__any_on+0x26>
 8008d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d5e:	2900      	cmp	r1, #0
 8008d60:	d0f5      	beq.n	8008d4e <__any_on+0x2a>
 8008d62:	2001      	movs	r0, #1
 8008d64:	e7f6      	b.n	8008d54 <__any_on+0x30>

08008d66 <_calloc_r>:
 8008d66:	b513      	push	{r0, r1, r4, lr}
 8008d68:	434a      	muls	r2, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	9201      	str	r2, [sp, #4]
 8008d6e:	f000 f859 	bl	8008e24 <_malloc_r>
 8008d72:	4604      	mov	r4, r0
 8008d74:	b118      	cbz	r0, 8008d7e <_calloc_r+0x18>
 8008d76:	9a01      	ldr	r2, [sp, #4]
 8008d78:	2100      	movs	r1, #0
 8008d7a:	f7fc fbc9 	bl	8005510 <memset>
 8008d7e:	4620      	mov	r0, r4
 8008d80:	b002      	add	sp, #8
 8008d82:	bd10      	pop	{r4, pc}

08008d84 <_free_r>:
 8008d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d86:	2900      	cmp	r1, #0
 8008d88:	d048      	beq.n	8008e1c <_free_r+0x98>
 8008d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8e:	9001      	str	r0, [sp, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f1a1 0404 	sub.w	r4, r1, #4
 8008d96:	bfb8      	it	lt
 8008d98:	18e4      	addlt	r4, r4, r3
 8008d9a:	f000 fa7b 	bl	8009294 <__malloc_lock>
 8008d9e:	4a20      	ldr	r2, [pc, #128]	; (8008e20 <_free_r+0x9c>)
 8008da0:	9801      	ldr	r0, [sp, #4]
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	4615      	mov	r5, r2
 8008da6:	b933      	cbnz	r3, 8008db6 <_free_r+0x32>
 8008da8:	6063      	str	r3, [r4, #4]
 8008daa:	6014      	str	r4, [r2, #0]
 8008dac:	b003      	add	sp, #12
 8008dae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008db2:	f000 ba75 	b.w	80092a0 <__malloc_unlock>
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	d90b      	bls.n	8008dd2 <_free_r+0x4e>
 8008dba:	6821      	ldr	r1, [r4, #0]
 8008dbc:	1862      	adds	r2, r4, r1
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	bf04      	itt	eq
 8008dc2:	681a      	ldreq	r2, [r3, #0]
 8008dc4:	685b      	ldreq	r3, [r3, #4]
 8008dc6:	6063      	str	r3, [r4, #4]
 8008dc8:	bf04      	itt	eq
 8008dca:	1852      	addeq	r2, r2, r1
 8008dcc:	6022      	streq	r2, [r4, #0]
 8008dce:	602c      	str	r4, [r5, #0]
 8008dd0:	e7ec      	b.n	8008dac <_free_r+0x28>
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	b10b      	cbz	r3, 8008ddc <_free_r+0x58>
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d9fa      	bls.n	8008dd2 <_free_r+0x4e>
 8008ddc:	6811      	ldr	r1, [r2, #0]
 8008dde:	1855      	adds	r5, r2, r1
 8008de0:	42a5      	cmp	r5, r4
 8008de2:	d10b      	bne.n	8008dfc <_free_r+0x78>
 8008de4:	6824      	ldr	r4, [r4, #0]
 8008de6:	4421      	add	r1, r4
 8008de8:	1854      	adds	r4, r2, r1
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	6011      	str	r1, [r2, #0]
 8008dee:	d1dd      	bne.n	8008dac <_free_r+0x28>
 8008df0:	681c      	ldr	r4, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	6053      	str	r3, [r2, #4]
 8008df6:	4421      	add	r1, r4
 8008df8:	6011      	str	r1, [r2, #0]
 8008dfa:	e7d7      	b.n	8008dac <_free_r+0x28>
 8008dfc:	d902      	bls.n	8008e04 <_free_r+0x80>
 8008dfe:	230c      	movs	r3, #12
 8008e00:	6003      	str	r3, [r0, #0]
 8008e02:	e7d3      	b.n	8008dac <_free_r+0x28>
 8008e04:	6825      	ldr	r5, [r4, #0]
 8008e06:	1961      	adds	r1, r4, r5
 8008e08:	428b      	cmp	r3, r1
 8008e0a:	bf04      	itt	eq
 8008e0c:	6819      	ldreq	r1, [r3, #0]
 8008e0e:	685b      	ldreq	r3, [r3, #4]
 8008e10:	6063      	str	r3, [r4, #4]
 8008e12:	bf04      	itt	eq
 8008e14:	1949      	addeq	r1, r1, r5
 8008e16:	6021      	streq	r1, [r4, #0]
 8008e18:	6054      	str	r4, [r2, #4]
 8008e1a:	e7c7      	b.n	8008dac <_free_r+0x28>
 8008e1c:	b003      	add	sp, #12
 8008e1e:	bd30      	pop	{r4, r5, pc}
 8008e20:	2000060c 	.word	0x2000060c

08008e24 <_malloc_r>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	1ccd      	adds	r5, r1, #3
 8008e28:	f025 0503 	bic.w	r5, r5, #3
 8008e2c:	3508      	adds	r5, #8
 8008e2e:	2d0c      	cmp	r5, #12
 8008e30:	bf38      	it	cc
 8008e32:	250c      	movcc	r5, #12
 8008e34:	2d00      	cmp	r5, #0
 8008e36:	4606      	mov	r6, r0
 8008e38:	db01      	blt.n	8008e3e <_malloc_r+0x1a>
 8008e3a:	42a9      	cmp	r1, r5
 8008e3c:	d903      	bls.n	8008e46 <_malloc_r+0x22>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	6033      	str	r3, [r6, #0]
 8008e42:	2000      	movs	r0, #0
 8008e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e46:	f000 fa25 	bl	8009294 <__malloc_lock>
 8008e4a:	4921      	ldr	r1, [pc, #132]	; (8008ed0 <_malloc_r+0xac>)
 8008e4c:	680a      	ldr	r2, [r1, #0]
 8008e4e:	4614      	mov	r4, r2
 8008e50:	b99c      	cbnz	r4, 8008e7a <_malloc_r+0x56>
 8008e52:	4f20      	ldr	r7, [pc, #128]	; (8008ed4 <_malloc_r+0xb0>)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	b923      	cbnz	r3, 8008e62 <_malloc_r+0x3e>
 8008e58:	4621      	mov	r1, r4
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f000 f9a0 	bl	80091a0 <_sbrk_r>
 8008e60:	6038      	str	r0, [r7, #0]
 8008e62:	4629      	mov	r1, r5
 8008e64:	4630      	mov	r0, r6
 8008e66:	f000 f99b 	bl	80091a0 <_sbrk_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d123      	bne.n	8008eb6 <_malloc_r+0x92>
 8008e6e:	230c      	movs	r3, #12
 8008e70:	6033      	str	r3, [r6, #0]
 8008e72:	4630      	mov	r0, r6
 8008e74:	f000 fa14 	bl	80092a0 <__malloc_unlock>
 8008e78:	e7e3      	b.n	8008e42 <_malloc_r+0x1e>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	1b5b      	subs	r3, r3, r5
 8008e7e:	d417      	bmi.n	8008eb0 <_malloc_r+0x8c>
 8008e80:	2b0b      	cmp	r3, #11
 8008e82:	d903      	bls.n	8008e8c <_malloc_r+0x68>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	441c      	add	r4, r3
 8008e88:	6025      	str	r5, [r4, #0]
 8008e8a:	e004      	b.n	8008e96 <_malloc_r+0x72>
 8008e8c:	6863      	ldr	r3, [r4, #4]
 8008e8e:	42a2      	cmp	r2, r4
 8008e90:	bf0c      	ite	eq
 8008e92:	600b      	streq	r3, [r1, #0]
 8008e94:	6053      	strne	r3, [r2, #4]
 8008e96:	4630      	mov	r0, r6
 8008e98:	f000 fa02 	bl	80092a0 <__malloc_unlock>
 8008e9c:	f104 000b 	add.w	r0, r4, #11
 8008ea0:	1d23      	adds	r3, r4, #4
 8008ea2:	f020 0007 	bic.w	r0, r0, #7
 8008ea6:	1ac2      	subs	r2, r0, r3
 8008ea8:	d0cc      	beq.n	8008e44 <_malloc_r+0x20>
 8008eaa:	1a1b      	subs	r3, r3, r0
 8008eac:	50a3      	str	r3, [r4, r2]
 8008eae:	e7c9      	b.n	8008e44 <_malloc_r+0x20>
 8008eb0:	4622      	mov	r2, r4
 8008eb2:	6864      	ldr	r4, [r4, #4]
 8008eb4:	e7cc      	b.n	8008e50 <_malloc_r+0x2c>
 8008eb6:	1cc4      	adds	r4, r0, #3
 8008eb8:	f024 0403 	bic.w	r4, r4, #3
 8008ebc:	42a0      	cmp	r0, r4
 8008ebe:	d0e3      	beq.n	8008e88 <_malloc_r+0x64>
 8008ec0:	1a21      	subs	r1, r4, r0
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 f96c 	bl	80091a0 <_sbrk_r>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d1dd      	bne.n	8008e88 <_malloc_r+0x64>
 8008ecc:	e7cf      	b.n	8008e6e <_malloc_r+0x4a>
 8008ece:	bf00      	nop
 8008ed0:	2000060c 	.word	0x2000060c
 8008ed4:	20000610 	.word	0x20000610

08008ed8 <__ssputs_r>:
 8008ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008edc:	688e      	ldr	r6, [r1, #8]
 8008ede:	429e      	cmp	r6, r3
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	4690      	mov	r8, r2
 8008ee6:	461f      	mov	r7, r3
 8008ee8:	d838      	bhi.n	8008f5c <__ssputs_r+0x84>
 8008eea:	898a      	ldrh	r2, [r1, #12]
 8008eec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ef0:	d032      	beq.n	8008f58 <__ssputs_r+0x80>
 8008ef2:	6825      	ldr	r5, [r4, #0]
 8008ef4:	6909      	ldr	r1, [r1, #16]
 8008ef6:	eba5 0901 	sub.w	r9, r5, r1
 8008efa:	6965      	ldr	r5, [r4, #20]
 8008efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f04:	3301      	adds	r3, #1
 8008f06:	444b      	add	r3, r9
 8008f08:	106d      	asrs	r5, r5, #1
 8008f0a:	429d      	cmp	r5, r3
 8008f0c:	bf38      	it	cc
 8008f0e:	461d      	movcc	r5, r3
 8008f10:	0553      	lsls	r3, r2, #21
 8008f12:	d531      	bpl.n	8008f78 <__ssputs_r+0xa0>
 8008f14:	4629      	mov	r1, r5
 8008f16:	f7ff ff85 	bl	8008e24 <_malloc_r>
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	b950      	cbnz	r0, 8008f34 <__ssputs_r+0x5c>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	f8ca 3000 	str.w	r3, [sl]
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f34:	6921      	ldr	r1, [r4, #16]
 8008f36:	464a      	mov	r2, r9
 8008f38:	f7ff fa4c 	bl	80083d4 <memcpy>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	6126      	str	r6, [r4, #16]
 8008f4a:	6165      	str	r5, [r4, #20]
 8008f4c:	444e      	add	r6, r9
 8008f4e:	eba5 0509 	sub.w	r5, r5, r9
 8008f52:	6026      	str	r6, [r4, #0]
 8008f54:	60a5      	str	r5, [r4, #8]
 8008f56:	463e      	mov	r6, r7
 8008f58:	42be      	cmp	r6, r7
 8008f5a:	d900      	bls.n	8008f5e <__ssputs_r+0x86>
 8008f5c:	463e      	mov	r6, r7
 8008f5e:	4632      	mov	r2, r6
 8008f60:	6820      	ldr	r0, [r4, #0]
 8008f62:	4641      	mov	r1, r8
 8008f64:	f000 f97c 	bl	8009260 <memmove>
 8008f68:	68a3      	ldr	r3, [r4, #8]
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	1b9b      	subs	r3, r3, r6
 8008f6e:	4432      	add	r2, r6
 8008f70:	60a3      	str	r3, [r4, #8]
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	2000      	movs	r0, #0
 8008f76:	e7db      	b.n	8008f30 <__ssputs_r+0x58>
 8008f78:	462a      	mov	r2, r5
 8008f7a:	f000 f997 	bl	80092ac <_realloc_r>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d1e1      	bne.n	8008f48 <__ssputs_r+0x70>
 8008f84:	6921      	ldr	r1, [r4, #16]
 8008f86:	4650      	mov	r0, sl
 8008f88:	f7ff fefc 	bl	8008d84 <_free_r>
 8008f8c:	e7c7      	b.n	8008f1e <__ssputs_r+0x46>
	...

08008f90 <_svfiprintf_r>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	4698      	mov	r8, r3
 8008f96:	898b      	ldrh	r3, [r1, #12]
 8008f98:	061b      	lsls	r3, r3, #24
 8008f9a:	b09d      	sub	sp, #116	; 0x74
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	460d      	mov	r5, r1
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	d50e      	bpl.n	8008fc2 <_svfiprintf_r+0x32>
 8008fa4:	690b      	ldr	r3, [r1, #16]
 8008fa6:	b963      	cbnz	r3, 8008fc2 <_svfiprintf_r+0x32>
 8008fa8:	2140      	movs	r1, #64	; 0x40
 8008faa:	f7ff ff3b 	bl	8008e24 <_malloc_r>
 8008fae:	6028      	str	r0, [r5, #0]
 8008fb0:	6128      	str	r0, [r5, #16]
 8008fb2:	b920      	cbnz	r0, 8008fbe <_svfiprintf_r+0x2e>
 8008fb4:	230c      	movs	r3, #12
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbc:	e0d1      	b.n	8009162 <_svfiprintf_r+0x1d2>
 8008fbe:	2340      	movs	r3, #64	; 0x40
 8008fc0:	616b      	str	r3, [r5, #20]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc6:	2320      	movs	r3, #32
 8008fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd0:	2330      	movs	r3, #48	; 0x30
 8008fd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800917c <_svfiprintf_r+0x1ec>
 8008fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008fda:	f04f 0901 	mov.w	r9, #1
 8008fde:	4623      	mov	r3, r4
 8008fe0:	469a      	mov	sl, r3
 8008fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe6:	b10a      	cbz	r2, 8008fec <_svfiprintf_r+0x5c>
 8008fe8:	2a25      	cmp	r2, #37	; 0x25
 8008fea:	d1f9      	bne.n	8008fe0 <_svfiprintf_r+0x50>
 8008fec:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff0:	d00b      	beq.n	800900a <_svfiprintf_r+0x7a>
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ff6d 	bl	8008ed8 <__ssputs_r>
 8008ffe:	3001      	adds	r0, #1
 8009000:	f000 80aa 	beq.w	8009158 <_svfiprintf_r+0x1c8>
 8009004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009006:	445a      	add	r2, fp
 8009008:	9209      	str	r2, [sp, #36]	; 0x24
 800900a:	f89a 3000 	ldrb.w	r3, [sl]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 80a2 	beq.w	8009158 <_svfiprintf_r+0x1c8>
 8009014:	2300      	movs	r3, #0
 8009016:	f04f 32ff 	mov.w	r2, #4294967295
 800901a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800901e:	f10a 0a01 	add.w	sl, sl, #1
 8009022:	9304      	str	r3, [sp, #16]
 8009024:	9307      	str	r3, [sp, #28]
 8009026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800902a:	931a      	str	r3, [sp, #104]	; 0x68
 800902c:	4654      	mov	r4, sl
 800902e:	2205      	movs	r2, #5
 8009030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009034:	4851      	ldr	r0, [pc, #324]	; (800917c <_svfiprintf_r+0x1ec>)
 8009036:	f7f7 f8d3 	bl	80001e0 <memchr>
 800903a:	9a04      	ldr	r2, [sp, #16]
 800903c:	b9d8      	cbnz	r0, 8009076 <_svfiprintf_r+0xe6>
 800903e:	06d0      	lsls	r0, r2, #27
 8009040:	bf44      	itt	mi
 8009042:	2320      	movmi	r3, #32
 8009044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009048:	0711      	lsls	r1, r2, #28
 800904a:	bf44      	itt	mi
 800904c:	232b      	movmi	r3, #43	; 0x2b
 800904e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009052:	f89a 3000 	ldrb.w	r3, [sl]
 8009056:	2b2a      	cmp	r3, #42	; 0x2a
 8009058:	d015      	beq.n	8009086 <_svfiprintf_r+0xf6>
 800905a:	9a07      	ldr	r2, [sp, #28]
 800905c:	4654      	mov	r4, sl
 800905e:	2000      	movs	r0, #0
 8009060:	f04f 0c0a 	mov.w	ip, #10
 8009064:	4621      	mov	r1, r4
 8009066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906a:	3b30      	subs	r3, #48	; 0x30
 800906c:	2b09      	cmp	r3, #9
 800906e:	d94e      	bls.n	800910e <_svfiprintf_r+0x17e>
 8009070:	b1b0      	cbz	r0, 80090a0 <_svfiprintf_r+0x110>
 8009072:	9207      	str	r2, [sp, #28]
 8009074:	e014      	b.n	80090a0 <_svfiprintf_r+0x110>
 8009076:	eba0 0308 	sub.w	r3, r0, r8
 800907a:	fa09 f303 	lsl.w	r3, r9, r3
 800907e:	4313      	orrs	r3, r2
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	46a2      	mov	sl, r4
 8009084:	e7d2      	b.n	800902c <_svfiprintf_r+0x9c>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	1d19      	adds	r1, r3, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	9103      	str	r1, [sp, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	bfbb      	ittet	lt
 8009092:	425b      	neglt	r3, r3
 8009094:	f042 0202 	orrlt.w	r2, r2, #2
 8009098:	9307      	strge	r3, [sp, #28]
 800909a:	9307      	strlt	r3, [sp, #28]
 800909c:	bfb8      	it	lt
 800909e:	9204      	strlt	r2, [sp, #16]
 80090a0:	7823      	ldrb	r3, [r4, #0]
 80090a2:	2b2e      	cmp	r3, #46	; 0x2e
 80090a4:	d10c      	bne.n	80090c0 <_svfiprintf_r+0x130>
 80090a6:	7863      	ldrb	r3, [r4, #1]
 80090a8:	2b2a      	cmp	r3, #42	; 0x2a
 80090aa:	d135      	bne.n	8009118 <_svfiprintf_r+0x188>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	9203      	str	r2, [sp, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfb8      	it	lt
 80090b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80090bc:	3402      	adds	r4, #2
 80090be:	9305      	str	r3, [sp, #20]
 80090c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800918c <_svfiprintf_r+0x1fc>
 80090c4:	7821      	ldrb	r1, [r4, #0]
 80090c6:	2203      	movs	r2, #3
 80090c8:	4650      	mov	r0, sl
 80090ca:	f7f7 f889 	bl	80001e0 <memchr>
 80090ce:	b140      	cbz	r0, 80090e2 <_svfiprintf_r+0x152>
 80090d0:	2340      	movs	r3, #64	; 0x40
 80090d2:	eba0 000a 	sub.w	r0, r0, sl
 80090d6:	fa03 f000 	lsl.w	r0, r3, r0
 80090da:	9b04      	ldr	r3, [sp, #16]
 80090dc:	4303      	orrs	r3, r0
 80090de:	3401      	adds	r4, #1
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e6:	4826      	ldr	r0, [pc, #152]	; (8009180 <_svfiprintf_r+0x1f0>)
 80090e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80090ec:	2206      	movs	r2, #6
 80090ee:	f7f7 f877 	bl	80001e0 <memchr>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d038      	beq.n	8009168 <_svfiprintf_r+0x1d8>
 80090f6:	4b23      	ldr	r3, [pc, #140]	; (8009184 <_svfiprintf_r+0x1f4>)
 80090f8:	bb1b      	cbnz	r3, 8009142 <_svfiprintf_r+0x1b2>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	3307      	adds	r3, #7
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	3308      	adds	r3, #8
 8009104:	9303      	str	r3, [sp, #12]
 8009106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009108:	4433      	add	r3, r6
 800910a:	9309      	str	r3, [sp, #36]	; 0x24
 800910c:	e767      	b.n	8008fde <_svfiprintf_r+0x4e>
 800910e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009112:	460c      	mov	r4, r1
 8009114:	2001      	movs	r0, #1
 8009116:	e7a5      	b.n	8009064 <_svfiprintf_r+0xd4>
 8009118:	2300      	movs	r3, #0
 800911a:	3401      	adds	r4, #1
 800911c:	9305      	str	r3, [sp, #20]
 800911e:	4619      	mov	r1, r3
 8009120:	f04f 0c0a 	mov.w	ip, #10
 8009124:	4620      	mov	r0, r4
 8009126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800912a:	3a30      	subs	r2, #48	; 0x30
 800912c:	2a09      	cmp	r2, #9
 800912e:	d903      	bls.n	8009138 <_svfiprintf_r+0x1a8>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0c5      	beq.n	80090c0 <_svfiprintf_r+0x130>
 8009134:	9105      	str	r1, [sp, #20]
 8009136:	e7c3      	b.n	80090c0 <_svfiprintf_r+0x130>
 8009138:	fb0c 2101 	mla	r1, ip, r1, r2
 800913c:	4604      	mov	r4, r0
 800913e:	2301      	movs	r3, #1
 8009140:	e7f0      	b.n	8009124 <_svfiprintf_r+0x194>
 8009142:	ab03      	add	r3, sp, #12
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	462a      	mov	r2, r5
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <_svfiprintf_r+0x1f8>)
 800914a:	a904      	add	r1, sp, #16
 800914c:	4638      	mov	r0, r7
 800914e:	f7fc fa87 	bl	8005660 <_printf_float>
 8009152:	1c42      	adds	r2, r0, #1
 8009154:	4606      	mov	r6, r0
 8009156:	d1d6      	bne.n	8009106 <_svfiprintf_r+0x176>
 8009158:	89ab      	ldrh	r3, [r5, #12]
 800915a:	065b      	lsls	r3, r3, #25
 800915c:	f53f af2c 	bmi.w	8008fb8 <_svfiprintf_r+0x28>
 8009160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009162:	b01d      	add	sp, #116	; 0x74
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	ab03      	add	r3, sp, #12
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	462a      	mov	r2, r5
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <_svfiprintf_r+0x1f8>)
 8009170:	a904      	add	r1, sp, #16
 8009172:	4638      	mov	r0, r7
 8009174:	f7fc fd18 	bl	8005ba8 <_printf_i>
 8009178:	e7eb      	b.n	8009152 <_svfiprintf_r+0x1c2>
 800917a:	bf00      	nop
 800917c:	0800a1e4 	.word	0x0800a1e4
 8009180:	0800a1ee 	.word	0x0800a1ee
 8009184:	08005661 	.word	0x08005661
 8009188:	08008ed9 	.word	0x08008ed9
 800918c:	0800a1ea 	.word	0x0800a1ea

08009190 <nan>:
 8009190:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009198 <nan+0x8>
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	00000000 	.word	0x00000000
 800919c:	7ff80000 	.word	0x7ff80000

080091a0 <_sbrk_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	4d06      	ldr	r5, [pc, #24]	; (80091bc <_sbrk_r+0x1c>)
 80091a4:	2300      	movs	r3, #0
 80091a6:	4604      	mov	r4, r0
 80091a8:	4608      	mov	r0, r1
 80091aa:	602b      	str	r3, [r5, #0]
 80091ac:	f7f8 fa68 	bl	8001680 <_sbrk>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_sbrk_r+0x1a>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_sbrk_r+0x1a>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	200007ac 	.word	0x200007ac

080091c0 <strncmp>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	b16a      	cbz	r2, 80091e0 <strncmp+0x20>
 80091c4:	3901      	subs	r1, #1
 80091c6:	1884      	adds	r4, r0, r2
 80091c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d103      	bne.n	80091dc <strncmp+0x1c>
 80091d4:	42a0      	cmp	r0, r4
 80091d6:	d001      	beq.n	80091dc <strncmp+0x1c>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f5      	bne.n	80091c8 <strncmp+0x8>
 80091dc:	1a98      	subs	r0, r3, r2
 80091de:	bd10      	pop	{r4, pc}
 80091e0:	4610      	mov	r0, r2
 80091e2:	e7fc      	b.n	80091de <strncmp+0x1e>

080091e4 <__ascii_wctomb>:
 80091e4:	b149      	cbz	r1, 80091fa <__ascii_wctomb+0x16>
 80091e6:	2aff      	cmp	r2, #255	; 0xff
 80091e8:	bf85      	ittet	hi
 80091ea:	238a      	movhi	r3, #138	; 0x8a
 80091ec:	6003      	strhi	r3, [r0, #0]
 80091ee:	700a      	strbls	r2, [r1, #0]
 80091f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80091f4:	bf98      	it	ls
 80091f6:	2001      	movls	r0, #1
 80091f8:	4770      	bx	lr
 80091fa:	4608      	mov	r0, r1
 80091fc:	4770      	bx	lr
	...

08009200 <__assert_func>:
 8009200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009202:	4614      	mov	r4, r2
 8009204:	461a      	mov	r2, r3
 8009206:	4b09      	ldr	r3, [pc, #36]	; (800922c <__assert_func+0x2c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4605      	mov	r5, r0
 800920c:	68d8      	ldr	r0, [r3, #12]
 800920e:	b14c      	cbz	r4, 8009224 <__assert_func+0x24>
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <__assert_func+0x30>)
 8009212:	9100      	str	r1, [sp, #0]
 8009214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009218:	4906      	ldr	r1, [pc, #24]	; (8009234 <__assert_func+0x34>)
 800921a:	462b      	mov	r3, r5
 800921c:	f000 f80e 	bl	800923c <fiprintf>
 8009220:	f000 fa84 	bl	800972c <abort>
 8009224:	4b04      	ldr	r3, [pc, #16]	; (8009238 <__assert_func+0x38>)
 8009226:	461c      	mov	r4, r3
 8009228:	e7f3      	b.n	8009212 <__assert_func+0x12>
 800922a:	bf00      	nop
 800922c:	2000000c 	.word	0x2000000c
 8009230:	0800a1f5 	.word	0x0800a1f5
 8009234:	0800a202 	.word	0x0800a202
 8009238:	0800a230 	.word	0x0800a230

0800923c <fiprintf>:
 800923c:	b40e      	push	{r1, r2, r3}
 800923e:	b503      	push	{r0, r1, lr}
 8009240:	4601      	mov	r1, r0
 8009242:	ab03      	add	r3, sp, #12
 8009244:	4805      	ldr	r0, [pc, #20]	; (800925c <fiprintf+0x20>)
 8009246:	f853 2b04 	ldr.w	r2, [r3], #4
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	f000 f87d 	bl	800934c <_vfiprintf_r>
 8009252:	b002      	add	sp, #8
 8009254:	f85d eb04 	ldr.w	lr, [sp], #4
 8009258:	b003      	add	sp, #12
 800925a:	4770      	bx	lr
 800925c:	2000000c 	.word	0x2000000c

08009260 <memmove>:
 8009260:	4288      	cmp	r0, r1
 8009262:	b510      	push	{r4, lr}
 8009264:	eb01 0402 	add.w	r4, r1, r2
 8009268:	d902      	bls.n	8009270 <memmove+0x10>
 800926a:	4284      	cmp	r4, r0
 800926c:	4623      	mov	r3, r4
 800926e:	d807      	bhi.n	8009280 <memmove+0x20>
 8009270:	1e43      	subs	r3, r0, #1
 8009272:	42a1      	cmp	r1, r4
 8009274:	d008      	beq.n	8009288 <memmove+0x28>
 8009276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800927a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800927e:	e7f8      	b.n	8009272 <memmove+0x12>
 8009280:	4402      	add	r2, r0
 8009282:	4601      	mov	r1, r0
 8009284:	428a      	cmp	r2, r1
 8009286:	d100      	bne.n	800928a <memmove+0x2a>
 8009288:	bd10      	pop	{r4, pc}
 800928a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800928e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009292:	e7f7      	b.n	8009284 <memmove+0x24>

08009294 <__malloc_lock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_lock+0x8>)
 8009296:	f000 bc09 	b.w	8009aac <__retarget_lock_acquire_recursive>
 800929a:	bf00      	nop
 800929c:	200007b4 	.word	0x200007b4

080092a0 <__malloc_unlock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_unlock+0x8>)
 80092a2:	f000 bc04 	b.w	8009aae <__retarget_lock_release_recursive>
 80092a6:	bf00      	nop
 80092a8:	200007b4 	.word	0x200007b4

080092ac <_realloc_r>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	4607      	mov	r7, r0
 80092b0:	4614      	mov	r4, r2
 80092b2:	460e      	mov	r6, r1
 80092b4:	b921      	cbnz	r1, 80092c0 <_realloc_r+0x14>
 80092b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092ba:	4611      	mov	r1, r2
 80092bc:	f7ff bdb2 	b.w	8008e24 <_malloc_r>
 80092c0:	b922      	cbnz	r2, 80092cc <_realloc_r+0x20>
 80092c2:	f7ff fd5f 	bl	8008d84 <_free_r>
 80092c6:	4625      	mov	r5, r4
 80092c8:	4628      	mov	r0, r5
 80092ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092cc:	f000 fc54 	bl	8009b78 <_malloc_usable_size_r>
 80092d0:	42a0      	cmp	r0, r4
 80092d2:	d20f      	bcs.n	80092f4 <_realloc_r+0x48>
 80092d4:	4621      	mov	r1, r4
 80092d6:	4638      	mov	r0, r7
 80092d8:	f7ff fda4 	bl	8008e24 <_malloc_r>
 80092dc:	4605      	mov	r5, r0
 80092de:	2800      	cmp	r0, #0
 80092e0:	d0f2      	beq.n	80092c8 <_realloc_r+0x1c>
 80092e2:	4631      	mov	r1, r6
 80092e4:	4622      	mov	r2, r4
 80092e6:	f7ff f875 	bl	80083d4 <memcpy>
 80092ea:	4631      	mov	r1, r6
 80092ec:	4638      	mov	r0, r7
 80092ee:	f7ff fd49 	bl	8008d84 <_free_r>
 80092f2:	e7e9      	b.n	80092c8 <_realloc_r+0x1c>
 80092f4:	4635      	mov	r5, r6
 80092f6:	e7e7      	b.n	80092c8 <_realloc_r+0x1c>

080092f8 <__sfputc_r>:
 80092f8:	6893      	ldr	r3, [r2, #8]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	b410      	push	{r4}
 8009300:	6093      	str	r3, [r2, #8]
 8009302:	da08      	bge.n	8009316 <__sfputc_r+0x1e>
 8009304:	6994      	ldr	r4, [r2, #24]
 8009306:	42a3      	cmp	r3, r4
 8009308:	db01      	blt.n	800930e <__sfputc_r+0x16>
 800930a:	290a      	cmp	r1, #10
 800930c:	d103      	bne.n	8009316 <__sfputc_r+0x1e>
 800930e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009312:	f000 b94b 	b.w	80095ac <__swbuf_r>
 8009316:	6813      	ldr	r3, [r2, #0]
 8009318:	1c58      	adds	r0, r3, #1
 800931a:	6010      	str	r0, [r2, #0]
 800931c:	7019      	strb	r1, [r3, #0]
 800931e:	4608      	mov	r0, r1
 8009320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009324:	4770      	bx	lr

08009326 <__sfputs_r>:
 8009326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009328:	4606      	mov	r6, r0
 800932a:	460f      	mov	r7, r1
 800932c:	4614      	mov	r4, r2
 800932e:	18d5      	adds	r5, r2, r3
 8009330:	42ac      	cmp	r4, r5
 8009332:	d101      	bne.n	8009338 <__sfputs_r+0x12>
 8009334:	2000      	movs	r0, #0
 8009336:	e007      	b.n	8009348 <__sfputs_r+0x22>
 8009338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800933c:	463a      	mov	r2, r7
 800933e:	4630      	mov	r0, r6
 8009340:	f7ff ffda 	bl	80092f8 <__sfputc_r>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d1f3      	bne.n	8009330 <__sfputs_r+0xa>
 8009348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800934c <_vfiprintf_r>:
 800934c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009350:	460d      	mov	r5, r1
 8009352:	b09d      	sub	sp, #116	; 0x74
 8009354:	4614      	mov	r4, r2
 8009356:	4698      	mov	r8, r3
 8009358:	4606      	mov	r6, r0
 800935a:	b118      	cbz	r0, 8009364 <_vfiprintf_r+0x18>
 800935c:	6983      	ldr	r3, [r0, #24]
 800935e:	b90b      	cbnz	r3, 8009364 <_vfiprintf_r+0x18>
 8009360:	f000 fb06 	bl	8009970 <__sinit>
 8009364:	4b89      	ldr	r3, [pc, #548]	; (800958c <_vfiprintf_r+0x240>)
 8009366:	429d      	cmp	r5, r3
 8009368:	d11b      	bne.n	80093a2 <_vfiprintf_r+0x56>
 800936a:	6875      	ldr	r5, [r6, #4]
 800936c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800936e:	07d9      	lsls	r1, r3, #31
 8009370:	d405      	bmi.n	800937e <_vfiprintf_r+0x32>
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	059a      	lsls	r2, r3, #22
 8009376:	d402      	bmi.n	800937e <_vfiprintf_r+0x32>
 8009378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800937a:	f000 fb97 	bl	8009aac <__retarget_lock_acquire_recursive>
 800937e:	89ab      	ldrh	r3, [r5, #12]
 8009380:	071b      	lsls	r3, r3, #28
 8009382:	d501      	bpl.n	8009388 <_vfiprintf_r+0x3c>
 8009384:	692b      	ldr	r3, [r5, #16]
 8009386:	b9eb      	cbnz	r3, 80093c4 <_vfiprintf_r+0x78>
 8009388:	4629      	mov	r1, r5
 800938a:	4630      	mov	r0, r6
 800938c:	f000 f960 	bl	8009650 <__swsetup_r>
 8009390:	b1c0      	cbz	r0, 80093c4 <_vfiprintf_r+0x78>
 8009392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009394:	07dc      	lsls	r4, r3, #31
 8009396:	d50e      	bpl.n	80093b6 <_vfiprintf_r+0x6a>
 8009398:	f04f 30ff 	mov.w	r0, #4294967295
 800939c:	b01d      	add	sp, #116	; 0x74
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	4b7b      	ldr	r3, [pc, #492]	; (8009590 <_vfiprintf_r+0x244>)
 80093a4:	429d      	cmp	r5, r3
 80093a6:	d101      	bne.n	80093ac <_vfiprintf_r+0x60>
 80093a8:	68b5      	ldr	r5, [r6, #8]
 80093aa:	e7df      	b.n	800936c <_vfiprintf_r+0x20>
 80093ac:	4b79      	ldr	r3, [pc, #484]	; (8009594 <_vfiprintf_r+0x248>)
 80093ae:	429d      	cmp	r5, r3
 80093b0:	bf08      	it	eq
 80093b2:	68f5      	ldreq	r5, [r6, #12]
 80093b4:	e7da      	b.n	800936c <_vfiprintf_r+0x20>
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	0598      	lsls	r0, r3, #22
 80093ba:	d4ed      	bmi.n	8009398 <_vfiprintf_r+0x4c>
 80093bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093be:	f000 fb76 	bl	8009aae <__retarget_lock_release_recursive>
 80093c2:	e7e9      	b.n	8009398 <_vfiprintf_r+0x4c>
 80093c4:	2300      	movs	r3, #0
 80093c6:	9309      	str	r3, [sp, #36]	; 0x24
 80093c8:	2320      	movs	r3, #32
 80093ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80093d2:	2330      	movs	r3, #48	; 0x30
 80093d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009598 <_vfiprintf_r+0x24c>
 80093d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093dc:	f04f 0901 	mov.w	r9, #1
 80093e0:	4623      	mov	r3, r4
 80093e2:	469a      	mov	sl, r3
 80093e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e8:	b10a      	cbz	r2, 80093ee <_vfiprintf_r+0xa2>
 80093ea:	2a25      	cmp	r2, #37	; 0x25
 80093ec:	d1f9      	bne.n	80093e2 <_vfiprintf_r+0x96>
 80093ee:	ebba 0b04 	subs.w	fp, sl, r4
 80093f2:	d00b      	beq.n	800940c <_vfiprintf_r+0xc0>
 80093f4:	465b      	mov	r3, fp
 80093f6:	4622      	mov	r2, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ff93 	bl	8009326 <__sfputs_r>
 8009400:	3001      	adds	r0, #1
 8009402:	f000 80aa 	beq.w	800955a <_vfiprintf_r+0x20e>
 8009406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009408:	445a      	add	r2, fp
 800940a:	9209      	str	r2, [sp, #36]	; 0x24
 800940c:	f89a 3000 	ldrb.w	r3, [sl]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 80a2 	beq.w	800955a <_vfiprintf_r+0x20e>
 8009416:	2300      	movs	r3, #0
 8009418:	f04f 32ff 	mov.w	r2, #4294967295
 800941c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009420:	f10a 0a01 	add.w	sl, sl, #1
 8009424:	9304      	str	r3, [sp, #16]
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800942c:	931a      	str	r3, [sp, #104]	; 0x68
 800942e:	4654      	mov	r4, sl
 8009430:	2205      	movs	r2, #5
 8009432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009436:	4858      	ldr	r0, [pc, #352]	; (8009598 <_vfiprintf_r+0x24c>)
 8009438:	f7f6 fed2 	bl	80001e0 <memchr>
 800943c:	9a04      	ldr	r2, [sp, #16]
 800943e:	b9d8      	cbnz	r0, 8009478 <_vfiprintf_r+0x12c>
 8009440:	06d1      	lsls	r1, r2, #27
 8009442:	bf44      	itt	mi
 8009444:	2320      	movmi	r3, #32
 8009446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800944a:	0713      	lsls	r3, r2, #28
 800944c:	bf44      	itt	mi
 800944e:	232b      	movmi	r3, #43	; 0x2b
 8009450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009454:	f89a 3000 	ldrb.w	r3, [sl]
 8009458:	2b2a      	cmp	r3, #42	; 0x2a
 800945a:	d015      	beq.n	8009488 <_vfiprintf_r+0x13c>
 800945c:	9a07      	ldr	r2, [sp, #28]
 800945e:	4654      	mov	r4, sl
 8009460:	2000      	movs	r0, #0
 8009462:	f04f 0c0a 	mov.w	ip, #10
 8009466:	4621      	mov	r1, r4
 8009468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800946c:	3b30      	subs	r3, #48	; 0x30
 800946e:	2b09      	cmp	r3, #9
 8009470:	d94e      	bls.n	8009510 <_vfiprintf_r+0x1c4>
 8009472:	b1b0      	cbz	r0, 80094a2 <_vfiprintf_r+0x156>
 8009474:	9207      	str	r2, [sp, #28]
 8009476:	e014      	b.n	80094a2 <_vfiprintf_r+0x156>
 8009478:	eba0 0308 	sub.w	r3, r0, r8
 800947c:	fa09 f303 	lsl.w	r3, r9, r3
 8009480:	4313      	orrs	r3, r2
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	46a2      	mov	sl, r4
 8009486:	e7d2      	b.n	800942e <_vfiprintf_r+0xe2>
 8009488:	9b03      	ldr	r3, [sp, #12]
 800948a:	1d19      	adds	r1, r3, #4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	9103      	str	r1, [sp, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bfbb      	ittet	lt
 8009494:	425b      	neglt	r3, r3
 8009496:	f042 0202 	orrlt.w	r2, r2, #2
 800949a:	9307      	strge	r3, [sp, #28]
 800949c:	9307      	strlt	r3, [sp, #28]
 800949e:	bfb8      	it	lt
 80094a0:	9204      	strlt	r2, [sp, #16]
 80094a2:	7823      	ldrb	r3, [r4, #0]
 80094a4:	2b2e      	cmp	r3, #46	; 0x2e
 80094a6:	d10c      	bne.n	80094c2 <_vfiprintf_r+0x176>
 80094a8:	7863      	ldrb	r3, [r4, #1]
 80094aa:	2b2a      	cmp	r3, #42	; 0x2a
 80094ac:	d135      	bne.n	800951a <_vfiprintf_r+0x1ce>
 80094ae:	9b03      	ldr	r3, [sp, #12]
 80094b0:	1d1a      	adds	r2, r3, #4
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	9203      	str	r2, [sp, #12]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	bfb8      	it	lt
 80094ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80094be:	3402      	adds	r4, #2
 80094c0:	9305      	str	r3, [sp, #20]
 80094c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095a8 <_vfiprintf_r+0x25c>
 80094c6:	7821      	ldrb	r1, [r4, #0]
 80094c8:	2203      	movs	r2, #3
 80094ca:	4650      	mov	r0, sl
 80094cc:	f7f6 fe88 	bl	80001e0 <memchr>
 80094d0:	b140      	cbz	r0, 80094e4 <_vfiprintf_r+0x198>
 80094d2:	2340      	movs	r3, #64	; 0x40
 80094d4:	eba0 000a 	sub.w	r0, r0, sl
 80094d8:	fa03 f000 	lsl.w	r0, r3, r0
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	4303      	orrs	r3, r0
 80094e0:	3401      	adds	r4, #1
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e8:	482c      	ldr	r0, [pc, #176]	; (800959c <_vfiprintf_r+0x250>)
 80094ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ee:	2206      	movs	r2, #6
 80094f0:	f7f6 fe76 	bl	80001e0 <memchr>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d03f      	beq.n	8009578 <_vfiprintf_r+0x22c>
 80094f8:	4b29      	ldr	r3, [pc, #164]	; (80095a0 <_vfiprintf_r+0x254>)
 80094fa:	bb1b      	cbnz	r3, 8009544 <_vfiprintf_r+0x1f8>
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	3307      	adds	r3, #7
 8009500:	f023 0307 	bic.w	r3, r3, #7
 8009504:	3308      	adds	r3, #8
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950a:	443b      	add	r3, r7
 800950c:	9309      	str	r3, [sp, #36]	; 0x24
 800950e:	e767      	b.n	80093e0 <_vfiprintf_r+0x94>
 8009510:	fb0c 3202 	mla	r2, ip, r2, r3
 8009514:	460c      	mov	r4, r1
 8009516:	2001      	movs	r0, #1
 8009518:	e7a5      	b.n	8009466 <_vfiprintf_r+0x11a>
 800951a:	2300      	movs	r3, #0
 800951c:	3401      	adds	r4, #1
 800951e:	9305      	str	r3, [sp, #20]
 8009520:	4619      	mov	r1, r3
 8009522:	f04f 0c0a 	mov.w	ip, #10
 8009526:	4620      	mov	r0, r4
 8009528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952c:	3a30      	subs	r2, #48	; 0x30
 800952e:	2a09      	cmp	r2, #9
 8009530:	d903      	bls.n	800953a <_vfiprintf_r+0x1ee>
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0c5      	beq.n	80094c2 <_vfiprintf_r+0x176>
 8009536:	9105      	str	r1, [sp, #20]
 8009538:	e7c3      	b.n	80094c2 <_vfiprintf_r+0x176>
 800953a:	fb0c 2101 	mla	r1, ip, r1, r2
 800953e:	4604      	mov	r4, r0
 8009540:	2301      	movs	r3, #1
 8009542:	e7f0      	b.n	8009526 <_vfiprintf_r+0x1da>
 8009544:	ab03      	add	r3, sp, #12
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	462a      	mov	r2, r5
 800954a:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <_vfiprintf_r+0x258>)
 800954c:	a904      	add	r1, sp, #16
 800954e:	4630      	mov	r0, r6
 8009550:	f7fc f886 	bl	8005660 <_printf_float>
 8009554:	4607      	mov	r7, r0
 8009556:	1c78      	adds	r0, r7, #1
 8009558:	d1d6      	bne.n	8009508 <_vfiprintf_r+0x1bc>
 800955a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800955c:	07d9      	lsls	r1, r3, #31
 800955e:	d405      	bmi.n	800956c <_vfiprintf_r+0x220>
 8009560:	89ab      	ldrh	r3, [r5, #12]
 8009562:	059a      	lsls	r2, r3, #22
 8009564:	d402      	bmi.n	800956c <_vfiprintf_r+0x220>
 8009566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009568:	f000 faa1 	bl	8009aae <__retarget_lock_release_recursive>
 800956c:	89ab      	ldrh	r3, [r5, #12]
 800956e:	065b      	lsls	r3, r3, #25
 8009570:	f53f af12 	bmi.w	8009398 <_vfiprintf_r+0x4c>
 8009574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009576:	e711      	b.n	800939c <_vfiprintf_r+0x50>
 8009578:	ab03      	add	r3, sp, #12
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	462a      	mov	r2, r5
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <_vfiprintf_r+0x258>)
 8009580:	a904      	add	r1, sp, #16
 8009582:	4630      	mov	r0, r6
 8009584:	f7fc fb10 	bl	8005ba8 <_printf_i>
 8009588:	e7e4      	b.n	8009554 <_vfiprintf_r+0x208>
 800958a:	bf00      	nop
 800958c:	0800a254 	.word	0x0800a254
 8009590:	0800a274 	.word	0x0800a274
 8009594:	0800a234 	.word	0x0800a234
 8009598:	0800a1e4 	.word	0x0800a1e4
 800959c:	0800a1ee 	.word	0x0800a1ee
 80095a0:	08005661 	.word	0x08005661
 80095a4:	08009327 	.word	0x08009327
 80095a8:	0800a1ea 	.word	0x0800a1ea

080095ac <__swbuf_r>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	460e      	mov	r6, r1
 80095b0:	4614      	mov	r4, r2
 80095b2:	4605      	mov	r5, r0
 80095b4:	b118      	cbz	r0, 80095be <__swbuf_r+0x12>
 80095b6:	6983      	ldr	r3, [r0, #24]
 80095b8:	b90b      	cbnz	r3, 80095be <__swbuf_r+0x12>
 80095ba:	f000 f9d9 	bl	8009970 <__sinit>
 80095be:	4b21      	ldr	r3, [pc, #132]	; (8009644 <__swbuf_r+0x98>)
 80095c0:	429c      	cmp	r4, r3
 80095c2:	d12b      	bne.n	800961c <__swbuf_r+0x70>
 80095c4:	686c      	ldr	r4, [r5, #4]
 80095c6:	69a3      	ldr	r3, [r4, #24]
 80095c8:	60a3      	str	r3, [r4, #8]
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	071a      	lsls	r2, r3, #28
 80095ce:	d52f      	bpl.n	8009630 <__swbuf_r+0x84>
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	b36b      	cbz	r3, 8009630 <__swbuf_r+0x84>
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	6820      	ldr	r0, [r4, #0]
 80095d8:	1ac0      	subs	r0, r0, r3
 80095da:	6963      	ldr	r3, [r4, #20]
 80095dc:	b2f6      	uxtb	r6, r6
 80095de:	4283      	cmp	r3, r0
 80095e0:	4637      	mov	r7, r6
 80095e2:	dc04      	bgt.n	80095ee <__swbuf_r+0x42>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4628      	mov	r0, r5
 80095e8:	f000 f92e 	bl	8009848 <_fflush_r>
 80095ec:	bb30      	cbnz	r0, 800963c <__swbuf_r+0x90>
 80095ee:	68a3      	ldr	r3, [r4, #8]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	60a3      	str	r3, [r4, #8]
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	1c5a      	adds	r2, r3, #1
 80095f8:	6022      	str	r2, [r4, #0]
 80095fa:	701e      	strb	r6, [r3, #0]
 80095fc:	6963      	ldr	r3, [r4, #20]
 80095fe:	3001      	adds	r0, #1
 8009600:	4283      	cmp	r3, r0
 8009602:	d004      	beq.n	800960e <__swbuf_r+0x62>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	07db      	lsls	r3, r3, #31
 8009608:	d506      	bpl.n	8009618 <__swbuf_r+0x6c>
 800960a:	2e0a      	cmp	r6, #10
 800960c:	d104      	bne.n	8009618 <__swbuf_r+0x6c>
 800960e:	4621      	mov	r1, r4
 8009610:	4628      	mov	r0, r5
 8009612:	f000 f919 	bl	8009848 <_fflush_r>
 8009616:	b988      	cbnz	r0, 800963c <__swbuf_r+0x90>
 8009618:	4638      	mov	r0, r7
 800961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800961c:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <__swbuf_r+0x9c>)
 800961e:	429c      	cmp	r4, r3
 8009620:	d101      	bne.n	8009626 <__swbuf_r+0x7a>
 8009622:	68ac      	ldr	r4, [r5, #8]
 8009624:	e7cf      	b.n	80095c6 <__swbuf_r+0x1a>
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <__swbuf_r+0xa0>)
 8009628:	429c      	cmp	r4, r3
 800962a:	bf08      	it	eq
 800962c:	68ec      	ldreq	r4, [r5, #12]
 800962e:	e7ca      	b.n	80095c6 <__swbuf_r+0x1a>
 8009630:	4621      	mov	r1, r4
 8009632:	4628      	mov	r0, r5
 8009634:	f000 f80c 	bl	8009650 <__swsetup_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	d0cb      	beq.n	80095d4 <__swbuf_r+0x28>
 800963c:	f04f 37ff 	mov.w	r7, #4294967295
 8009640:	e7ea      	b.n	8009618 <__swbuf_r+0x6c>
 8009642:	bf00      	nop
 8009644:	0800a254 	.word	0x0800a254
 8009648:	0800a274 	.word	0x0800a274
 800964c:	0800a234 	.word	0x0800a234

08009650 <__swsetup_r>:
 8009650:	4b32      	ldr	r3, [pc, #200]	; (800971c <__swsetup_r+0xcc>)
 8009652:	b570      	push	{r4, r5, r6, lr}
 8009654:	681d      	ldr	r5, [r3, #0]
 8009656:	4606      	mov	r6, r0
 8009658:	460c      	mov	r4, r1
 800965a:	b125      	cbz	r5, 8009666 <__swsetup_r+0x16>
 800965c:	69ab      	ldr	r3, [r5, #24]
 800965e:	b913      	cbnz	r3, 8009666 <__swsetup_r+0x16>
 8009660:	4628      	mov	r0, r5
 8009662:	f000 f985 	bl	8009970 <__sinit>
 8009666:	4b2e      	ldr	r3, [pc, #184]	; (8009720 <__swsetup_r+0xd0>)
 8009668:	429c      	cmp	r4, r3
 800966a:	d10f      	bne.n	800968c <__swsetup_r+0x3c>
 800966c:	686c      	ldr	r4, [r5, #4]
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009674:	0719      	lsls	r1, r3, #28
 8009676:	d42c      	bmi.n	80096d2 <__swsetup_r+0x82>
 8009678:	06dd      	lsls	r5, r3, #27
 800967a:	d411      	bmi.n	80096a0 <__swsetup_r+0x50>
 800967c:	2309      	movs	r3, #9
 800967e:	6033      	str	r3, [r6, #0]
 8009680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	f04f 30ff 	mov.w	r0, #4294967295
 800968a:	e03e      	b.n	800970a <__swsetup_r+0xba>
 800968c:	4b25      	ldr	r3, [pc, #148]	; (8009724 <__swsetup_r+0xd4>)
 800968e:	429c      	cmp	r4, r3
 8009690:	d101      	bne.n	8009696 <__swsetup_r+0x46>
 8009692:	68ac      	ldr	r4, [r5, #8]
 8009694:	e7eb      	b.n	800966e <__swsetup_r+0x1e>
 8009696:	4b24      	ldr	r3, [pc, #144]	; (8009728 <__swsetup_r+0xd8>)
 8009698:	429c      	cmp	r4, r3
 800969a:	bf08      	it	eq
 800969c:	68ec      	ldreq	r4, [r5, #12]
 800969e:	e7e6      	b.n	800966e <__swsetup_r+0x1e>
 80096a0:	0758      	lsls	r0, r3, #29
 80096a2:	d512      	bpl.n	80096ca <__swsetup_r+0x7a>
 80096a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096a6:	b141      	cbz	r1, 80096ba <__swsetup_r+0x6a>
 80096a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096ac:	4299      	cmp	r1, r3
 80096ae:	d002      	beq.n	80096b6 <__swsetup_r+0x66>
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff fb67 	bl	8008d84 <_free_r>
 80096b6:	2300      	movs	r3, #0
 80096b8:	6363      	str	r3, [r4, #52]	; 0x34
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	2300      	movs	r3, #0
 80096c4:	6063      	str	r3, [r4, #4]
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f043 0308 	orr.w	r3, r3, #8
 80096d0:	81a3      	strh	r3, [r4, #12]
 80096d2:	6923      	ldr	r3, [r4, #16]
 80096d4:	b94b      	cbnz	r3, 80096ea <__swsetup_r+0x9a>
 80096d6:	89a3      	ldrh	r3, [r4, #12]
 80096d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096e0:	d003      	beq.n	80096ea <__swsetup_r+0x9a>
 80096e2:	4621      	mov	r1, r4
 80096e4:	4630      	mov	r0, r6
 80096e6:	f000 fa07 	bl	8009af8 <__smakebuf_r>
 80096ea:	89a0      	ldrh	r0, [r4, #12]
 80096ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096f0:	f010 0301 	ands.w	r3, r0, #1
 80096f4:	d00a      	beq.n	800970c <__swsetup_r+0xbc>
 80096f6:	2300      	movs	r3, #0
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	6963      	ldr	r3, [r4, #20]
 80096fc:	425b      	negs	r3, r3
 80096fe:	61a3      	str	r3, [r4, #24]
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	b943      	cbnz	r3, 8009716 <__swsetup_r+0xc6>
 8009704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009708:	d1ba      	bne.n	8009680 <__swsetup_r+0x30>
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	0781      	lsls	r1, r0, #30
 800970e:	bf58      	it	pl
 8009710:	6963      	ldrpl	r3, [r4, #20]
 8009712:	60a3      	str	r3, [r4, #8]
 8009714:	e7f4      	b.n	8009700 <__swsetup_r+0xb0>
 8009716:	2000      	movs	r0, #0
 8009718:	e7f7      	b.n	800970a <__swsetup_r+0xba>
 800971a:	bf00      	nop
 800971c:	2000000c 	.word	0x2000000c
 8009720:	0800a254 	.word	0x0800a254
 8009724:	0800a274 	.word	0x0800a274
 8009728:	0800a234 	.word	0x0800a234

0800972c <abort>:
 800972c:	b508      	push	{r3, lr}
 800972e:	2006      	movs	r0, #6
 8009730:	f000 fa52 	bl	8009bd8 <raise>
 8009734:	2001      	movs	r0, #1
 8009736:	f7f7 ff2b 	bl	8001590 <_exit>
	...

0800973c <__sflush_r>:
 800973c:	898a      	ldrh	r2, [r1, #12]
 800973e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009742:	4605      	mov	r5, r0
 8009744:	0710      	lsls	r0, r2, #28
 8009746:	460c      	mov	r4, r1
 8009748:	d458      	bmi.n	80097fc <__sflush_r+0xc0>
 800974a:	684b      	ldr	r3, [r1, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	dc05      	bgt.n	800975c <__sflush_r+0x20>
 8009750:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009752:	2b00      	cmp	r3, #0
 8009754:	dc02      	bgt.n	800975c <__sflush_r+0x20>
 8009756:	2000      	movs	r0, #0
 8009758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800975c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800975e:	2e00      	cmp	r6, #0
 8009760:	d0f9      	beq.n	8009756 <__sflush_r+0x1a>
 8009762:	2300      	movs	r3, #0
 8009764:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009768:	682f      	ldr	r7, [r5, #0]
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	d032      	beq.n	80097d4 <__sflush_r+0x98>
 800976e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	075a      	lsls	r2, r3, #29
 8009774:	d505      	bpl.n	8009782 <__sflush_r+0x46>
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	1ac0      	subs	r0, r0, r3
 800977a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800977c:	b10b      	cbz	r3, 8009782 <__sflush_r+0x46>
 800977e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009780:	1ac0      	subs	r0, r0, r3
 8009782:	2300      	movs	r3, #0
 8009784:	4602      	mov	r2, r0
 8009786:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009788:	6a21      	ldr	r1, [r4, #32]
 800978a:	4628      	mov	r0, r5
 800978c:	47b0      	blx	r6
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	d106      	bne.n	80097a2 <__sflush_r+0x66>
 8009794:	6829      	ldr	r1, [r5, #0]
 8009796:	291d      	cmp	r1, #29
 8009798:	d82c      	bhi.n	80097f4 <__sflush_r+0xb8>
 800979a:	4a2a      	ldr	r2, [pc, #168]	; (8009844 <__sflush_r+0x108>)
 800979c:	40ca      	lsrs	r2, r1
 800979e:	07d6      	lsls	r6, r2, #31
 80097a0:	d528      	bpl.n	80097f4 <__sflush_r+0xb8>
 80097a2:	2200      	movs	r2, #0
 80097a4:	6062      	str	r2, [r4, #4]
 80097a6:	04d9      	lsls	r1, r3, #19
 80097a8:	6922      	ldr	r2, [r4, #16]
 80097aa:	6022      	str	r2, [r4, #0]
 80097ac:	d504      	bpl.n	80097b8 <__sflush_r+0x7c>
 80097ae:	1c42      	adds	r2, r0, #1
 80097b0:	d101      	bne.n	80097b6 <__sflush_r+0x7a>
 80097b2:	682b      	ldr	r3, [r5, #0]
 80097b4:	b903      	cbnz	r3, 80097b8 <__sflush_r+0x7c>
 80097b6:	6560      	str	r0, [r4, #84]	; 0x54
 80097b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ba:	602f      	str	r7, [r5, #0]
 80097bc:	2900      	cmp	r1, #0
 80097be:	d0ca      	beq.n	8009756 <__sflush_r+0x1a>
 80097c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097c4:	4299      	cmp	r1, r3
 80097c6:	d002      	beq.n	80097ce <__sflush_r+0x92>
 80097c8:	4628      	mov	r0, r5
 80097ca:	f7ff fadb 	bl	8008d84 <_free_r>
 80097ce:	2000      	movs	r0, #0
 80097d0:	6360      	str	r0, [r4, #52]	; 0x34
 80097d2:	e7c1      	b.n	8009758 <__sflush_r+0x1c>
 80097d4:	6a21      	ldr	r1, [r4, #32]
 80097d6:	2301      	movs	r3, #1
 80097d8:	4628      	mov	r0, r5
 80097da:	47b0      	blx	r6
 80097dc:	1c41      	adds	r1, r0, #1
 80097de:	d1c7      	bne.n	8009770 <__sflush_r+0x34>
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0c4      	beq.n	8009770 <__sflush_r+0x34>
 80097e6:	2b1d      	cmp	r3, #29
 80097e8:	d001      	beq.n	80097ee <__sflush_r+0xb2>
 80097ea:	2b16      	cmp	r3, #22
 80097ec:	d101      	bne.n	80097f2 <__sflush_r+0xb6>
 80097ee:	602f      	str	r7, [r5, #0]
 80097f0:	e7b1      	b.n	8009756 <__sflush_r+0x1a>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	e7ad      	b.n	8009758 <__sflush_r+0x1c>
 80097fc:	690f      	ldr	r7, [r1, #16]
 80097fe:	2f00      	cmp	r7, #0
 8009800:	d0a9      	beq.n	8009756 <__sflush_r+0x1a>
 8009802:	0793      	lsls	r3, r2, #30
 8009804:	680e      	ldr	r6, [r1, #0]
 8009806:	bf08      	it	eq
 8009808:	694b      	ldreq	r3, [r1, #20]
 800980a:	600f      	str	r7, [r1, #0]
 800980c:	bf18      	it	ne
 800980e:	2300      	movne	r3, #0
 8009810:	eba6 0807 	sub.w	r8, r6, r7
 8009814:	608b      	str	r3, [r1, #8]
 8009816:	f1b8 0f00 	cmp.w	r8, #0
 800981a:	dd9c      	ble.n	8009756 <__sflush_r+0x1a>
 800981c:	6a21      	ldr	r1, [r4, #32]
 800981e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009820:	4643      	mov	r3, r8
 8009822:	463a      	mov	r2, r7
 8009824:	4628      	mov	r0, r5
 8009826:	47b0      	blx	r6
 8009828:	2800      	cmp	r0, #0
 800982a:	dc06      	bgt.n	800983a <__sflush_r+0xfe>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	e78e      	b.n	8009758 <__sflush_r+0x1c>
 800983a:	4407      	add	r7, r0
 800983c:	eba8 0800 	sub.w	r8, r8, r0
 8009840:	e7e9      	b.n	8009816 <__sflush_r+0xda>
 8009842:	bf00      	nop
 8009844:	20400001 	.word	0x20400001

08009848 <_fflush_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	690b      	ldr	r3, [r1, #16]
 800984c:	4605      	mov	r5, r0
 800984e:	460c      	mov	r4, r1
 8009850:	b913      	cbnz	r3, 8009858 <_fflush_r+0x10>
 8009852:	2500      	movs	r5, #0
 8009854:	4628      	mov	r0, r5
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	b118      	cbz	r0, 8009862 <_fflush_r+0x1a>
 800985a:	6983      	ldr	r3, [r0, #24]
 800985c:	b90b      	cbnz	r3, 8009862 <_fflush_r+0x1a>
 800985e:	f000 f887 	bl	8009970 <__sinit>
 8009862:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <_fflush_r+0x6c>)
 8009864:	429c      	cmp	r4, r3
 8009866:	d11b      	bne.n	80098a0 <_fflush_r+0x58>
 8009868:	686c      	ldr	r4, [r5, #4]
 800986a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0ef      	beq.n	8009852 <_fflush_r+0xa>
 8009872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009874:	07d0      	lsls	r0, r2, #31
 8009876:	d404      	bmi.n	8009882 <_fflush_r+0x3a>
 8009878:	0599      	lsls	r1, r3, #22
 800987a:	d402      	bmi.n	8009882 <_fflush_r+0x3a>
 800987c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800987e:	f000 f915 	bl	8009aac <__retarget_lock_acquire_recursive>
 8009882:	4628      	mov	r0, r5
 8009884:	4621      	mov	r1, r4
 8009886:	f7ff ff59 	bl	800973c <__sflush_r>
 800988a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800988c:	07da      	lsls	r2, r3, #31
 800988e:	4605      	mov	r5, r0
 8009890:	d4e0      	bmi.n	8009854 <_fflush_r+0xc>
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	059b      	lsls	r3, r3, #22
 8009896:	d4dd      	bmi.n	8009854 <_fflush_r+0xc>
 8009898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800989a:	f000 f908 	bl	8009aae <__retarget_lock_release_recursive>
 800989e:	e7d9      	b.n	8009854 <_fflush_r+0xc>
 80098a0:	4b05      	ldr	r3, [pc, #20]	; (80098b8 <_fflush_r+0x70>)
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d101      	bne.n	80098aa <_fflush_r+0x62>
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	e7df      	b.n	800986a <_fflush_r+0x22>
 80098aa:	4b04      	ldr	r3, [pc, #16]	; (80098bc <_fflush_r+0x74>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	bf08      	it	eq
 80098b0:	68ec      	ldreq	r4, [r5, #12]
 80098b2:	e7da      	b.n	800986a <_fflush_r+0x22>
 80098b4:	0800a254 	.word	0x0800a254
 80098b8:	0800a274 	.word	0x0800a274
 80098bc:	0800a234 	.word	0x0800a234

080098c0 <std>:
 80098c0:	2300      	movs	r3, #0
 80098c2:	b510      	push	{r4, lr}
 80098c4:	4604      	mov	r4, r0
 80098c6:	e9c0 3300 	strd	r3, r3, [r0]
 80098ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098ce:	6083      	str	r3, [r0, #8]
 80098d0:	8181      	strh	r1, [r0, #12]
 80098d2:	6643      	str	r3, [r0, #100]	; 0x64
 80098d4:	81c2      	strh	r2, [r0, #14]
 80098d6:	6183      	str	r3, [r0, #24]
 80098d8:	4619      	mov	r1, r3
 80098da:	2208      	movs	r2, #8
 80098dc:	305c      	adds	r0, #92	; 0x5c
 80098de:	f7fb fe17 	bl	8005510 <memset>
 80098e2:	4b05      	ldr	r3, [pc, #20]	; (80098f8 <std+0x38>)
 80098e4:	6263      	str	r3, [r4, #36]	; 0x24
 80098e6:	4b05      	ldr	r3, [pc, #20]	; (80098fc <std+0x3c>)
 80098e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80098ea:	4b05      	ldr	r3, [pc, #20]	; (8009900 <std+0x40>)
 80098ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <std+0x44>)
 80098f0:	6224      	str	r4, [r4, #32]
 80098f2:	6323      	str	r3, [r4, #48]	; 0x30
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	bf00      	nop
 80098f8:	08009c11 	.word	0x08009c11
 80098fc:	08009c33 	.word	0x08009c33
 8009900:	08009c6b 	.word	0x08009c6b
 8009904:	08009c8f 	.word	0x08009c8f

08009908 <_cleanup_r>:
 8009908:	4901      	ldr	r1, [pc, #4]	; (8009910 <_cleanup_r+0x8>)
 800990a:	f000 b8af 	b.w	8009a6c <_fwalk_reent>
 800990e:	bf00      	nop
 8009910:	08009849 	.word	0x08009849

08009914 <__sfmoreglue>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	1e4a      	subs	r2, r1, #1
 8009918:	2568      	movs	r5, #104	; 0x68
 800991a:	4355      	muls	r5, r2
 800991c:	460e      	mov	r6, r1
 800991e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009922:	f7ff fa7f 	bl	8008e24 <_malloc_r>
 8009926:	4604      	mov	r4, r0
 8009928:	b140      	cbz	r0, 800993c <__sfmoreglue+0x28>
 800992a:	2100      	movs	r1, #0
 800992c:	e9c0 1600 	strd	r1, r6, [r0]
 8009930:	300c      	adds	r0, #12
 8009932:	60a0      	str	r0, [r4, #8]
 8009934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009938:	f7fb fdea 	bl	8005510 <memset>
 800993c:	4620      	mov	r0, r4
 800993e:	bd70      	pop	{r4, r5, r6, pc}

08009940 <__sfp_lock_acquire>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__sfp_lock_acquire+0x8>)
 8009942:	f000 b8b3 	b.w	8009aac <__retarget_lock_acquire_recursive>
 8009946:	bf00      	nop
 8009948:	200007b8 	.word	0x200007b8

0800994c <__sfp_lock_release>:
 800994c:	4801      	ldr	r0, [pc, #4]	; (8009954 <__sfp_lock_release+0x8>)
 800994e:	f000 b8ae 	b.w	8009aae <__retarget_lock_release_recursive>
 8009952:	bf00      	nop
 8009954:	200007b8 	.word	0x200007b8

08009958 <__sinit_lock_acquire>:
 8009958:	4801      	ldr	r0, [pc, #4]	; (8009960 <__sinit_lock_acquire+0x8>)
 800995a:	f000 b8a7 	b.w	8009aac <__retarget_lock_acquire_recursive>
 800995e:	bf00      	nop
 8009960:	200007b3 	.word	0x200007b3

08009964 <__sinit_lock_release>:
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <__sinit_lock_release+0x8>)
 8009966:	f000 b8a2 	b.w	8009aae <__retarget_lock_release_recursive>
 800996a:	bf00      	nop
 800996c:	200007b3 	.word	0x200007b3

08009970 <__sinit>:
 8009970:	b510      	push	{r4, lr}
 8009972:	4604      	mov	r4, r0
 8009974:	f7ff fff0 	bl	8009958 <__sinit_lock_acquire>
 8009978:	69a3      	ldr	r3, [r4, #24]
 800997a:	b11b      	cbz	r3, 8009984 <__sinit+0x14>
 800997c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009980:	f7ff bff0 	b.w	8009964 <__sinit_lock_release>
 8009984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009988:	6523      	str	r3, [r4, #80]	; 0x50
 800998a:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <__sinit+0x68>)
 800998c:	4a13      	ldr	r2, [pc, #76]	; (80099dc <__sinit+0x6c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	62a2      	str	r2, [r4, #40]	; 0x28
 8009992:	42a3      	cmp	r3, r4
 8009994:	bf04      	itt	eq
 8009996:	2301      	moveq	r3, #1
 8009998:	61a3      	streq	r3, [r4, #24]
 800999a:	4620      	mov	r0, r4
 800999c:	f000 f820 	bl	80099e0 <__sfp>
 80099a0:	6060      	str	r0, [r4, #4]
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 f81c 	bl	80099e0 <__sfp>
 80099a8:	60a0      	str	r0, [r4, #8]
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 f818 	bl	80099e0 <__sfp>
 80099b0:	2200      	movs	r2, #0
 80099b2:	60e0      	str	r0, [r4, #12]
 80099b4:	2104      	movs	r1, #4
 80099b6:	6860      	ldr	r0, [r4, #4]
 80099b8:	f7ff ff82 	bl	80098c0 <std>
 80099bc:	68a0      	ldr	r0, [r4, #8]
 80099be:	2201      	movs	r2, #1
 80099c0:	2109      	movs	r1, #9
 80099c2:	f7ff ff7d 	bl	80098c0 <std>
 80099c6:	68e0      	ldr	r0, [r4, #12]
 80099c8:	2202      	movs	r2, #2
 80099ca:	2112      	movs	r1, #18
 80099cc:	f7ff ff78 	bl	80098c0 <std>
 80099d0:	2301      	movs	r3, #1
 80099d2:	61a3      	str	r3, [r4, #24]
 80099d4:	e7d2      	b.n	800997c <__sinit+0xc>
 80099d6:	bf00      	nop
 80099d8:	08009ddc 	.word	0x08009ddc
 80099dc:	08009909 	.word	0x08009909

080099e0 <__sfp>:
 80099e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e2:	4607      	mov	r7, r0
 80099e4:	f7ff ffac 	bl	8009940 <__sfp_lock_acquire>
 80099e8:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <__sfp+0x84>)
 80099ea:	681e      	ldr	r6, [r3, #0]
 80099ec:	69b3      	ldr	r3, [r6, #24]
 80099ee:	b913      	cbnz	r3, 80099f6 <__sfp+0x16>
 80099f0:	4630      	mov	r0, r6
 80099f2:	f7ff ffbd 	bl	8009970 <__sinit>
 80099f6:	3648      	adds	r6, #72	; 0x48
 80099f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	d503      	bpl.n	8009a08 <__sfp+0x28>
 8009a00:	6833      	ldr	r3, [r6, #0]
 8009a02:	b30b      	cbz	r3, 8009a48 <__sfp+0x68>
 8009a04:	6836      	ldr	r6, [r6, #0]
 8009a06:	e7f7      	b.n	80099f8 <__sfp+0x18>
 8009a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a0c:	b9d5      	cbnz	r5, 8009a44 <__sfp+0x64>
 8009a0e:	4b16      	ldr	r3, [pc, #88]	; (8009a68 <__sfp+0x88>)
 8009a10:	60e3      	str	r3, [r4, #12]
 8009a12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a16:	6665      	str	r5, [r4, #100]	; 0x64
 8009a18:	f000 f847 	bl	8009aaa <__retarget_lock_init_recursive>
 8009a1c:	f7ff ff96 	bl	800994c <__sfp_lock_release>
 8009a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a28:	6025      	str	r5, [r4, #0]
 8009a2a:	61a5      	str	r5, [r4, #24]
 8009a2c:	2208      	movs	r2, #8
 8009a2e:	4629      	mov	r1, r5
 8009a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a34:	f7fb fd6c 	bl	8005510 <memset>
 8009a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a40:	4620      	mov	r0, r4
 8009a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a44:	3468      	adds	r4, #104	; 0x68
 8009a46:	e7d9      	b.n	80099fc <__sfp+0x1c>
 8009a48:	2104      	movs	r1, #4
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f7ff ff62 	bl	8009914 <__sfmoreglue>
 8009a50:	4604      	mov	r4, r0
 8009a52:	6030      	str	r0, [r6, #0]
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d1d5      	bne.n	8009a04 <__sfp+0x24>
 8009a58:	f7ff ff78 	bl	800994c <__sfp_lock_release>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	603b      	str	r3, [r7, #0]
 8009a60:	e7ee      	b.n	8009a40 <__sfp+0x60>
 8009a62:	bf00      	nop
 8009a64:	08009ddc 	.word	0x08009ddc
 8009a68:	ffff0001 	.word	0xffff0001

08009a6c <_fwalk_reent>:
 8009a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a70:	4606      	mov	r6, r0
 8009a72:	4688      	mov	r8, r1
 8009a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a78:	2700      	movs	r7, #0
 8009a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8009a82:	d505      	bpl.n	8009a90 <_fwalk_reent+0x24>
 8009a84:	6824      	ldr	r4, [r4, #0]
 8009a86:	2c00      	cmp	r4, #0
 8009a88:	d1f7      	bne.n	8009a7a <_fwalk_reent+0xe>
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a90:	89ab      	ldrh	r3, [r5, #12]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d907      	bls.n	8009aa6 <_fwalk_reent+0x3a>
 8009a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	d003      	beq.n	8009aa6 <_fwalk_reent+0x3a>
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	47c0      	blx	r8
 8009aa4:	4307      	orrs	r7, r0
 8009aa6:	3568      	adds	r5, #104	; 0x68
 8009aa8:	e7e9      	b.n	8009a7e <_fwalk_reent+0x12>

08009aaa <__retarget_lock_init_recursive>:
 8009aaa:	4770      	bx	lr

08009aac <__retarget_lock_acquire_recursive>:
 8009aac:	4770      	bx	lr

08009aae <__retarget_lock_release_recursive>:
 8009aae:	4770      	bx	lr

08009ab0 <__swhatbuf_r>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	460e      	mov	r6, r1
 8009ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	b096      	sub	sp, #88	; 0x58
 8009abc:	4614      	mov	r4, r2
 8009abe:	461d      	mov	r5, r3
 8009ac0:	da07      	bge.n	8009ad2 <__swhatbuf_r+0x22>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	89b3      	ldrh	r3, [r6, #12]
 8009ac8:	061a      	lsls	r2, r3, #24
 8009aca:	d410      	bmi.n	8009aee <__swhatbuf_r+0x3e>
 8009acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ad0:	e00e      	b.n	8009af0 <__swhatbuf_r+0x40>
 8009ad2:	466a      	mov	r2, sp
 8009ad4:	f000 f902 	bl	8009cdc <_fstat_r>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dbf2      	blt.n	8009ac2 <__swhatbuf_r+0x12>
 8009adc:	9a01      	ldr	r2, [sp, #4]
 8009ade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ae6:	425a      	negs	r2, r3
 8009ae8:	415a      	adcs	r2, r3
 8009aea:	602a      	str	r2, [r5, #0]
 8009aec:	e7ee      	b.n	8009acc <__swhatbuf_r+0x1c>
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	2000      	movs	r0, #0
 8009af2:	6023      	str	r3, [r4, #0]
 8009af4:	b016      	add	sp, #88	; 0x58
 8009af6:	bd70      	pop	{r4, r5, r6, pc}

08009af8 <__smakebuf_r>:
 8009af8:	898b      	ldrh	r3, [r1, #12]
 8009afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009afc:	079d      	lsls	r5, r3, #30
 8009afe:	4606      	mov	r6, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	d507      	bpl.n	8009b14 <__smakebuf_r+0x1c>
 8009b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	6123      	str	r3, [r4, #16]
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	6163      	str	r3, [r4, #20]
 8009b10:	b002      	add	sp, #8
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	ab01      	add	r3, sp, #4
 8009b16:	466a      	mov	r2, sp
 8009b18:	f7ff ffca 	bl	8009ab0 <__swhatbuf_r>
 8009b1c:	9900      	ldr	r1, [sp, #0]
 8009b1e:	4605      	mov	r5, r0
 8009b20:	4630      	mov	r0, r6
 8009b22:	f7ff f97f 	bl	8008e24 <_malloc_r>
 8009b26:	b948      	cbnz	r0, 8009b3c <__smakebuf_r+0x44>
 8009b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2c:	059a      	lsls	r2, r3, #22
 8009b2e:	d4ef      	bmi.n	8009b10 <__smakebuf_r+0x18>
 8009b30:	f023 0303 	bic.w	r3, r3, #3
 8009b34:	f043 0302 	orr.w	r3, r3, #2
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	e7e3      	b.n	8009b04 <__smakebuf_r+0xc>
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <__smakebuf_r+0x7c>)
 8009b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	6020      	str	r0, [r4, #0]
 8009b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	6163      	str	r3, [r4, #20]
 8009b4e:	9b01      	ldr	r3, [sp, #4]
 8009b50:	6120      	str	r0, [r4, #16]
 8009b52:	b15b      	cbz	r3, 8009b6c <__smakebuf_r+0x74>
 8009b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 f8d1 	bl	8009d00 <_isatty_r>
 8009b5e:	b128      	cbz	r0, 8009b6c <__smakebuf_r+0x74>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	89a0      	ldrh	r0, [r4, #12]
 8009b6e:	4305      	orrs	r5, r0
 8009b70:	81a5      	strh	r5, [r4, #12]
 8009b72:	e7cd      	b.n	8009b10 <__smakebuf_r+0x18>
 8009b74:	08009909 	.word	0x08009909

08009b78 <_malloc_usable_size_r>:
 8009b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b7c:	1f18      	subs	r0, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bfbc      	itt	lt
 8009b82:	580b      	ldrlt	r3, [r1, r0]
 8009b84:	18c0      	addlt	r0, r0, r3
 8009b86:	4770      	bx	lr

08009b88 <_raise_r>:
 8009b88:	291f      	cmp	r1, #31
 8009b8a:	b538      	push	{r3, r4, r5, lr}
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	d904      	bls.n	8009b9c <_raise_r+0x14>
 8009b92:	2316      	movs	r3, #22
 8009b94:	6003      	str	r3, [r0, #0]
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b9e:	b112      	cbz	r2, 8009ba6 <_raise_r+0x1e>
 8009ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ba4:	b94b      	cbnz	r3, 8009bba <_raise_r+0x32>
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 f830 	bl	8009c0c <_getpid_r>
 8009bac:	462a      	mov	r2, r5
 8009bae:	4601      	mov	r1, r0
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb6:	f000 b817 	b.w	8009be8 <_kill_r>
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d00a      	beq.n	8009bd4 <_raise_r+0x4c>
 8009bbe:	1c59      	adds	r1, r3, #1
 8009bc0:	d103      	bne.n	8009bca <_raise_r+0x42>
 8009bc2:	2316      	movs	r3, #22
 8009bc4:	6003      	str	r3, [r0, #0]
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	e7e7      	b.n	8009b9a <_raise_r+0x12>
 8009bca:	2400      	movs	r4, #0
 8009bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	4798      	blx	r3
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	e7e0      	b.n	8009b9a <_raise_r+0x12>

08009bd8 <raise>:
 8009bd8:	4b02      	ldr	r3, [pc, #8]	; (8009be4 <raise+0xc>)
 8009bda:	4601      	mov	r1, r0
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	f7ff bfd3 	b.w	8009b88 <_raise_r>
 8009be2:	bf00      	nop
 8009be4:	2000000c 	.word	0x2000000c

08009be8 <_kill_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d07      	ldr	r5, [pc, #28]	; (8009c08 <_kill_r+0x20>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	f7f7 fcbb 	bl	8001570 <_kill>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	d102      	bne.n	8009c04 <_kill_r+0x1c>
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	b103      	cbz	r3, 8009c04 <_kill_r+0x1c>
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	200007ac 	.word	0x200007ac

08009c0c <_getpid_r>:
 8009c0c:	f7f7 bca8 	b.w	8001560 <_getpid>

08009c10 <__sread>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	460c      	mov	r4, r1
 8009c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c18:	f000 f894 	bl	8009d44 <_read_r>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	bfab      	itete	ge
 8009c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c22:	89a3      	ldrhlt	r3, [r4, #12]
 8009c24:	181b      	addge	r3, r3, r0
 8009c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c2a:	bfac      	ite	ge
 8009c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c2e:	81a3      	strhlt	r3, [r4, #12]
 8009c30:	bd10      	pop	{r4, pc}

08009c32 <__swrite>:
 8009c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c36:	461f      	mov	r7, r3
 8009c38:	898b      	ldrh	r3, [r1, #12]
 8009c3a:	05db      	lsls	r3, r3, #23
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	4616      	mov	r6, r2
 8009c42:	d505      	bpl.n	8009c50 <__swrite+0x1e>
 8009c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c48:	2302      	movs	r3, #2
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f000 f868 	bl	8009d20 <_lseek_r>
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	4632      	mov	r2, r6
 8009c5e:	463b      	mov	r3, r7
 8009c60:	4628      	mov	r0, r5
 8009c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c66:	f000 b817 	b.w	8009c98 <_write_r>

08009c6a <__sseek>:
 8009c6a:	b510      	push	{r4, lr}
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c72:	f000 f855 	bl	8009d20 <_lseek_r>
 8009c76:	1c43      	adds	r3, r0, #1
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	bf15      	itete	ne
 8009c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c86:	81a3      	strheq	r3, [r4, #12]
 8009c88:	bf18      	it	ne
 8009c8a:	81a3      	strhne	r3, [r4, #12]
 8009c8c:	bd10      	pop	{r4, pc}

08009c8e <__sclose>:
 8009c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c92:	f000 b813 	b.w	8009cbc <_close_r>
	...

08009c98 <_write_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_write_r+0x20>)
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	602a      	str	r2, [r5, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f7f7 fc99 	bl	80015de <_write>
 8009cac:	1c43      	adds	r3, r0, #1
 8009cae:	d102      	bne.n	8009cb6 <_write_r+0x1e>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	b103      	cbz	r3, 8009cb6 <_write_r+0x1e>
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	200007ac 	.word	0x200007ac

08009cbc <_close_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d06      	ldr	r5, [pc, #24]	; (8009cd8 <_close_r+0x1c>)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	602b      	str	r3, [r5, #0]
 8009cc8:	f7f7 fca5 	bl	8001616 <_close>
 8009ccc:	1c43      	adds	r3, r0, #1
 8009cce:	d102      	bne.n	8009cd6 <_close_r+0x1a>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	b103      	cbz	r3, 8009cd6 <_close_r+0x1a>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
 8009cd8:	200007ac 	.word	0x200007ac

08009cdc <_fstat_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	; (8009cfc <_fstat_r+0x20>)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	f7f7 fca0 	bl	800162e <_fstat>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d102      	bne.n	8009cf8 <_fstat_r+0x1c>
 8009cf2:	682b      	ldr	r3, [r5, #0]
 8009cf4:	b103      	cbz	r3, 8009cf8 <_fstat_r+0x1c>
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	bf00      	nop
 8009cfc:	200007ac 	.word	0x200007ac

08009d00 <_isatty_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d06      	ldr	r5, [pc, #24]	; (8009d1c <_isatty_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	f7f7 fc9f 	bl	800164e <_isatty>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_isatty_r+0x1a>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_isatty_r+0x1a>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	200007ac 	.word	0x200007ac

08009d20 <_lseek_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	4d07      	ldr	r5, [pc, #28]	; (8009d40 <_lseek_r+0x20>)
 8009d24:	4604      	mov	r4, r0
 8009d26:	4608      	mov	r0, r1
 8009d28:	4611      	mov	r1, r2
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	602a      	str	r2, [r5, #0]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f7f7 fc98 	bl	8001664 <_lseek>
 8009d34:	1c43      	adds	r3, r0, #1
 8009d36:	d102      	bne.n	8009d3e <_lseek_r+0x1e>
 8009d38:	682b      	ldr	r3, [r5, #0]
 8009d3a:	b103      	cbz	r3, 8009d3e <_lseek_r+0x1e>
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	bd38      	pop	{r3, r4, r5, pc}
 8009d40:	200007ac 	.word	0x200007ac

08009d44 <_read_r>:
 8009d44:	b538      	push	{r3, r4, r5, lr}
 8009d46:	4d07      	ldr	r5, [pc, #28]	; (8009d64 <_read_r+0x20>)
 8009d48:	4604      	mov	r4, r0
 8009d4a:	4608      	mov	r0, r1
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	2200      	movs	r2, #0
 8009d50:	602a      	str	r2, [r5, #0]
 8009d52:	461a      	mov	r2, r3
 8009d54:	f7f7 fc26 	bl	80015a4 <_read>
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d102      	bne.n	8009d62 <_read_r+0x1e>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b103      	cbz	r3, 8009d62 <_read_r+0x1e>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	200007ac 	.word	0x200007ac

08009d68 <_init>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	bf00      	nop
 8009d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d6e:	bc08      	pop	{r3}
 8009d70:	469e      	mov	lr, r3
 8009d72:	4770      	bx	lr

08009d74 <_fini>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	bf00      	nop
 8009d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d7a:	bc08      	pop	{r3}
 8009d7c:	469e      	mov	lr, r3
 8009d7e:	4770      	bx	lr
